{
  "docs/OnixRuntime.Api.Audio.AudioPlayer.html": {
    "href": "docs/OnixRuntime.Api.Audio.AudioPlayer.html",
    "title": "Class AudioPlayer | Onix Plugin Documentation",
    "summary": "Class AudioPlayer Namespace OnixRuntime.Api.Audio Assembly OnixRuntime.dll A class to play audio content. public class AudioPlayer : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer AudioPlayer Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AudioPlayer() Initializes a new instance of the AudioPlayer class. public AudioPlayer() Properties Duration Gets the duration of the audio in milliseconds. public int Duration { get; } Property Value int IsFinished Gets whether the audio has finished playing. public bool IsFinished { get; } Property Value bool IsLooping Gets or sets whether the audio should loop when finished. public bool IsLooping { get; set; } Property Value bool IsPaused Gets or sets whether the audio is paused. Setting to true resumes, setting to false pauses. public bool IsPaused { get; set; } Property Value bool IsPlaying Gets or sets whether the audio is currently playing. Setting to true will play, setting to false will stop. public bool IsPlaying { get; set; } Property Value bool IsStopped Gets whether the audio is stopped. public bool IsStopped { get; } Property Value bool Muted Gets or sets whether the audio is muted. public bool Muted { get; set; } Property Value bool Pitch The pitch (frequency) of the sound wave. May have no effect. public float Pitch { get; set; } Property Value float Position Gets or sets the current playback position in milliseconds. public int Position { get; set; } Property Value int Speed How quickly the sound is playing. public float Speed { get; set; } Property Value float Status Gets the current status of the audio player. public AudioPlayerStatus Status { get; } Property Value AudioPlayerStatus Volume The volume of the audio player between 0.0f to 1.0f. public float Volume { get; set; } Property Value float Methods Pause() Pauses audio playback. public void Pause() Play() Plays the current audio source. public void Play() Play(string) Plays the audio from the specified file path or URL. public void Play(string pathOrUrl) Parameters pathOrUrl string The file path or URL of the audio to play. Restart() Restarts audio playback from the beginning. public void Restart() Resume() Resumes audio playback if paused. public void Resume() Stop() Stops audio playback. public void Stop()"
  },
  "docs/OnixRuntime.Api.Audio.AudioPlayerStatus.html": {
    "href": "docs/OnixRuntime.Api.Audio.AudioPlayerStatus.html",
    "title": "Enum AudioPlayerStatus | Onix Plugin Documentation",
    "summary": "Enum AudioPlayerStatus Namespace OnixRuntime.Api.Audio Assembly OnixRuntime.dll Represents the status of the audio player. public enum AudioPlayerStatus Fields Buffering = 5 NoSource = 0 Opening = 4 Paused = 3 Playing = 2 Stopped = 1"
  },
  "docs/OnixRuntime.Api.Audio.GameAudioEngine.html": {
    "href": "docs/OnixRuntime.Api.Audio.GameAudioEngine.html",
    "title": "Class GameAudioEngine | Onix Plugin Documentation",
    "summary": "Class GameAudioEngine Namespace OnixRuntime.Api.Audio Assembly OnixRuntime.dll Represents the audio engine of the game, used to play or stop playing game sounds. public class GameAudioEngine : MemoryAddressContainer Inheritance object MemoryAddressContainer GameAudioEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PlayInWorld(string, Vec3, float, float) Plays a sound at a specific position in the game world. public void PlayInWorld(string soundName, Vec3 position, float volume = 1, float pitch = 1) Parameters soundName string The name of the sound to play. position Vec3 The 3D position in the world where the sound should be played. volume float The volume of the sound (default is 1.0f). pitch float The pitch of the sound (default is 1.0f). PlayUi(string, float, float) Plays a UI sound, typically used for menus or interface feedback. public void PlayUi(string soundName, float volume = 1, float pitch = 1) Parameters soundName string The name of the sound to play. volume float The volume of the sound (default is 1.0f). pitch float The pitch of the sound (default is 1.0f). StopAllSounds() Stops all currently playing sounds. public void StopAllSounds() StopSound(string) Stops a specific sound that is currently playing. public void StopSound(string soundName) Parameters soundName string The name of the sound to stop."
  },
  "docs/OnixRuntime.Api.Audio.html": {
    "href": "docs/OnixRuntime.Api.Audio.html",
    "title": "Namespace OnixRuntime.Api.Audio | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Audio Classes AudioPlayer A class to play audio content. GameAudioEngine Represents the audio engine of the game, used to play or stop playing game sounds. Enums AudioPlayerStatus Represents the status of the audio player."
  },
  "docs/OnixRuntime.Api.ClientNotificationType.html": {
    "href": "docs/OnixRuntime.Api.ClientNotificationType.html",
    "title": "Enum ClientNotificationType | Onix Plugin Documentation",
    "summary": "Enum ClientNotificationType Namespace OnixRuntime.Api Assembly OnixRuntime.dll Specifies the type of client notification. public enum ClientNotificationType Fields Banner = 0 Tray = 1"
  },
  "docs/OnixRuntime.Api.Connection.ConnectionInfo.html": {
    "href": "docs/OnixRuntime.Api.Connection.ConnectionInfo.html",
    "title": "Class ConnectionInfo | Onix Plugin Documentation",
    "summary": "Class ConnectionInfo Namespace OnixRuntime.Api.Connection Assembly OnixRuntime.dll Represents network connection information for the current runtime session. public class ConnectionInfo : MemoryAddressContainer Inheritance object MemoryAddressContainer ConnectionInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AveragePing The average ping (in milliseconds) over time to the connected server. public int AveragePing { get; } Property Value int ConnectedIp The IP address the client is currently connected to. public string ConnectedIp { get; } Property Value string CurrentPing The current ping (in milliseconds) to the connected server. public int CurrentPing { get; } Property Value int IsLocal Whether the connection is local (e.g. singleplayer or LAN). public bool IsLocal { get; } Property Value bool JoinedIp The IP address the client originally joined. public string JoinedIp { get; } Property Value string Port The port used for the current connection. public int Port { get; } Property Value int Realm The realm or dimension the player is currently in, if applicable. public RealmWorld? Realm { get; } Property Value RealmWorld"
  },
  "docs/OnixRuntime.Api.Connection.LocalGameServer.html": {
    "href": "docs/OnixRuntime.Api.Connection.LocalGameServer.html",
    "title": "Class LocalGameServer | Onix Plugin Documentation",
    "summary": "Class LocalGameServer Namespace OnixRuntime.Api.Connection Assembly OnixRuntime.dll Represents a running instance of a local game server in the Onix runtime. public class LocalGameServer : MemoryAddressContainer Inheritance object MemoryAddressContainer LocalGameServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LocalPlayer The local player on the server, if one exists. public ServerPlayer? LocalPlayer { get; } Property Value ServerPlayer PackManager The server's pack manager, primarily used for managing behavior packs. There is a decent chance you want PackManager instead. public PackManager PackManager { get; } Property Value PackManager SimulationTickRate Gets or sets the simulation tick rate for the server. public float SimulationTickRate { get; set; } Property Value float World The world object managed by this server instance. public RuntimeWorld World { get; } Property Value RuntimeWorld Methods BroadcastTextMessage(string, ChatMessageType, string?) Broadcasts a message to all players on the server. public void BroadcastTextMessage(string message, ChatMessageType type = ChatMessageType.Raw, string? username = null) Parameters message string The text content of the message. type ChatMessageType The type of message to send. Defaults to Raw. username string The name associated with the message sender, if applicable."
  },
  "docs/OnixRuntime.Api.Connection.RealmWorld.html": {
    "href": "docs/OnixRuntime.Api.Connection.RealmWorld.html",
    "title": "Class RealmWorld | Onix Plugin Documentation",
    "summary": "Class RealmWorld Namespace OnixRuntime.Api.Connection Assembly OnixRuntime.dll Provides access to a Minecraft Realm world and its metadata. public class RealmWorld : MemoryAddressContainer Inheritance object MemoryAddressContainer RealmWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClubId Gets the Club ID associated with the realm. public string ClubId { get; } Property Value string Description Gets the description of the realm. public string Description { get; } Property Value string Name Gets the name of the realm. public string Name { get; } Property Value string OwnerXuid Gets the XUID of the realm owner. public string OwnerXuid { get; } Property Value string RealmId Gets the unique identifier of the realm. public ulong RealmId { get; } Property Value ulong"
  },
  "docs/OnixRuntime.Api.Connection.html": {
    "href": "docs/OnixRuntime.Api.Connection.html",
    "title": "Namespace OnixRuntime.Api.Connection | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Connection Classes ConnectionInfo Represents network connection information for the current runtime session. LocalGameServer Represents a running instance of a local game server in the Onix runtime. RealmWorld Provides access to a Minecraft Realm world and its metadata."
  },
  "docs/OnixRuntime.Api.Entities.CommandPermissionLevel.html": {
    "href": "docs/OnixRuntime.Api.Entities.CommandPermissionLevel.html",
    "title": "Enum CommandPermissionLevel | Onix Plugin Documentation",
    "summary": "Enum CommandPermissionLevel Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents the command permission level of a player. public enum CommandPermissionLevel Fields Admin = 2 Any = 0 GameDirectors = 1 Host = 3 Internal = 5 Owner = 4"
  },
  "docs/OnixRuntime.Api.Entities.Entity.html": {
    "href": "docs/OnixRuntime.Api.Entities.Entity.html",
    "title": "Class Entity | Onix Plugin Documentation",
    "summary": "Class Entity Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents an entity in the world. Entity methods and properties are only available from a game logic thread. public class Entity : MemoryAddressContainer Inheritance object MemoryAddressContainer Entity Derived ItemEntity Mob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AliveDuration Gets the duration the entity has been alive as a TimeSpan. public TimeSpan AliveDuration { get; } Property Value TimeSpan AliveTicks Gets the number of game ticks the entity has been alive. public int AliveTicks { get; } Property Value int ArmorItems Gets or sets all armor items of the entity. public virtual ItemStack[] ArmorItems { get; set; } Property Value ItemStack[] Attributes Gets the attributes of the entity. public Dictionary<EntityAttributeId, EntityAttribute> Attributes { get; } Property Value Dictionary<EntityAttributeId, EntityAttribute> BlockPosition Gets the block position of the entity. public BlockPos BlockPosition { get; } Property Value BlockPos BootsItem Gets or sets the item in the entity's boots slot. public virtual ItemStack BootsItem { get; set; } Property Value ItemStack BoundingBox Gets the bounding box of the entity. public BoundingBox BoundingBox { get; } Property Value BoundingBox BoundingBoxRaw Gets the raw bounding box of the entity. public BoundingBox BoundingBoxRaw { get; } Property Value BoundingBox BoundingBoxSize Gets the size of the entity's bounding box. public Vec2 BoundingBoxSize { get; } Property Value Vec2 Categories Gets the categories this entity belongs to. public EntityCategory Categories { get; } Property Value EntityCategory ChestplateItem Gets or sets the item in the entity's chestplate slot. public virtual ItemStack ChestplateItem { get; set; } Property Value ItemStack ChunkPosition Gets the chunk position of the entity. public ChunkPos ChunkPosition { get; } Property Value ChunkPos Dimension Gets the dimension the entity is in. public Dimension Dimension { get; } Property Value Dimension Effects Gets the list of mob effect instances applied to the entity. public MobEffectInstance[] Effects { get; } Property Value MobEffectInstance[] HeightOffset Gets the height offset of the entity. public float HeightOffset { get; } Property Value float HelmetItem Gets or sets the item in the entity's helmet slot. public virtual ItemStack HelmetItem { get; set; } Property Value ItemStack IsClientSide Gets whether this entity is client-side only. public bool IsClientSide { get; } Property Value bool IsTargetable Gets whether the entity can be targeted. public bool IsTargetable { get; } Property Value bool LeggingsItem Gets or sets the item in the entity's leggings slot. public virtual ItemStack LeggingsItem { get; set; } Property Value ItemStack MainHandItem Gets or sets the item in the entity's main hand. public virtual ItemStack MainHandItem { get; set; } Property Value ItemStack Nametag Gets or sets the nametag of the entity. public string Nametag { get; set; } Property Value string OffhandItem Gets or sets the item in the entity's offhand. public virtual ItemStack OffhandItem { get; set; } Property Value ItemStack Position Gets or sets the position of the entity. public Vec3 Position { get; set; } Property Value Vec3 RawPosition Gets the raw position and previous position of the entity. public Tuple<Vec3, Vec3> RawPosition { get; } Property Value Tuple<Vec3, Vec3> Region Gets the Region of world blocks the entity is in. public WorldBlocks Region { get; } Property Value WorldBlocks RiddenBy Gets the entity riding this entity, if any. public Entity? RiddenBy { get; } Property Value Entity Riding Gets the entity this entity is riding, if any. public Entity? Riding { get; } Property Value Entity Rotation Gets the rotation angles of the entity. public Angles Rotation { get; } Property Value Angles RuntimeId Gets the runtime identifier of the entity. public ulong RuntimeId { get; } Property Value ulong ScoreboardIdentity Gets the scoreboard identity of the entity, if available. public ScoreboardIdentity? ScoreboardIdentity { get; } Property Value ScoreboardIdentity SimpleMolangVariables Gets the simple Molang variables for the entity. public Dictionary<string, float> SimpleMolangVariables { get; } Property Value Dictionary<string, float> StepHeight Gets the step height of the entity. public float StepHeight { get; } Property Value float TypeName Gets the type name of the entity. public string TypeName { get; } Property Value string TypeNameFull Gets the full type name of the entity. public string TypeNameFull { get; } Property Value string TypeNamespace Gets the type namespace of the entity. public string TypeNamespace { get; } Property Value string UniqueId Gets the unique identifier of the entity. public ulong UniqueId { get; } Property Value ulong Velocity Gets the velocity of the entity. public Vec3 Velocity { get; } Property Value Vec3 World Gets the runtime world the entity is in. public RuntimeWorld World { get; } Property Value RuntimeWorld Methods ForwardPosition(float) Gets the position in front of the entity at the specified distance. public Vec3 ForwardPosition(float distance = 1) Parameters distance float Returns Vec3 GetAttribute(EntityAttributeId) Gets the attribute with the specified ID. public EntityAttribute? GetAttribute(EntityAttributeId attributeId) Parameters attributeId EntityAttributeId Returns EntityAttribute GetAttribute(string) Gets the attribute with the specified name, if it exists. public EntityAttribute? GetAttribute(string attributeName) Parameters attributeName string Returns EntityAttribute GetFlag(EntityFlag) Checks if the entity has the specified flag. public bool GetFlag(EntityFlag flag) Parameters flag EntityFlag Returns bool HasCategory(EntityCategory) Checks if the entity has the specified category. public bool HasCategory(EntityCategory category) Parameters category EntityCategory Returns bool Kill() Kills the entity by setting its health to zero. public void Kill() SetFlag(EntityFlag, bool) Checks if the entity has the specified flag. You should only use this from the server side. public void SetFlag(EntityFlag flag, bool value) Parameters flag EntityFlag value bool Exceptions InsufficientTrustException When running on the client. ToString() Returns a string representation of the entity. public override string ToString() Returns string UpdateAttribute(EntityAttribute) Updates the specified attribute instance. public void UpdateAttribute(EntityAttribute attribute) Parameters attribute EntityAttribute UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Updates the specified attribute by ID using a callback to modify it. If the attribute cannot be found it will not call the callback. public void UpdateAttribute(EntityAttributeId id, Action<MutableEntityAttribute> callback) Parameters id EntityAttributeId callback Action<MutableEntityAttribute>"
  },
  "docs/OnixRuntime.Api.Entities.EntityAttribute.html": {
    "href": "docs/OnixRuntime.Api.Entities.EntityAttribute.html",
    "title": "Class EntityAttribute | Onix Plugin Documentation",
    "summary": "Class EntityAttribute Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents an immutable entity attribute, including its value and limits. public class EntityAttribute Inheritance object EntityAttribute Derived MutableEntityAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityAttribute() protected EntityAttribute() Properties DefaultMaxValue Gets the default maximum value of the attribute. public float DefaultMaxValue { get; protected set; } Property Value float DefaultMinValue Gets the default minimum value of the attribute. public float DefaultMinValue { get; protected set; } Property Value float DefaultValue Gets the default value of the attribute. public float DefaultValue { get; protected set; } Property Value float Id Gets the attribute's identifier. public EntityAttributeId Id { get; } Property Value EntityAttributeId MaxValue Gets the maximum value of the attribute. public float MaxValue { get; protected set; } Property Value float MinValue Gets the minimum value of the attribute. public float MinValue { get; protected set; } Property Value float Name Gets the name of the attribute. public string Name { get; } Property Value string Value Gets the current value of the attribute. public float Value { get; protected set; } Property Value float"
  },
  "docs/OnixRuntime.Api.Entities.EntityAttributeId.html": {
    "href": "docs/OnixRuntime.Api.Entities.EntityAttributeId.html",
    "title": "Enum EntityAttributeId | Onix Plugin Documentation",
    "summary": "Enum EntityAttributeId Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Identifiers for entity attributes. public enum EntityAttributeId Fields Absorption = 14 AttackDamage = 13 Exhaustion = 3 Experience = 5 FollowRange = 8 Health = 7 Hunger = 1 JumpStrength = 16 KnockbackResistance = 9 LavaMovementSpeed = 12 Level = 4 Luck = 15 MovementSpeed = 10 Saturation = 2 UnderwaterMovementSpeed = 11"
  },
  "docs/OnixRuntime.Api.Entities.EntityCategory.html": {
    "href": "docs/OnixRuntime.Api.Entities.EntityCategory.html",
    "title": "Enum EntityCategory | Onix Plugin Documentation",
    "summary": "Enum EntityCategory Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Specifies the category or categories that an entity can belong to. public enum EntityCategory : uint Fields Ambient = 2048 Animal = 16 Arthropod = 8192 Boat = 131072 BoatRideable = 131328 EvocationIllagerMonster = 4108 Humandoid = 8 HumanoidMonster = 12 Item = 1024 Minecart = 65536 MinecartRidable = 65792 Mob = 2 Monster = 4 NonTargetable = 262144 None = 0 Pathable = 64 Player = 1 Predictable = 524288 Ridable = 256 Tamable = 128 TamableAnimal = 144 Undead = 16384 UndeadMob = 16388 Villager = 4096 WaterAnimal = 48 WaterSpawning = 32 Zombie = 32768 ZombieMonster = 32772"
  },
  "docs/OnixRuntime.Api.Entities.EntityFlag.html": {
    "href": "docs/OnixRuntime.Api.Entities.EntityFlag.html",
    "title": "Enum EntityFlag | Onix Plugin Documentation",
    "summary": "Enum EntityFlag Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Flags representing various states and properties that an entity can have. public enum EntityFlag Fields Admiring = 93 AlwaysShowName = 15 Angry = 25 Baby = 11 BlockedUsingDamagedShield = 74 BlockedUsingShield = 73 Blocking = 71 BreakingObstruction = 79 Breathing = 35 Bribed = 57 CanClimb = 19 CanFly = 21 CanPowerJump = 45 CanShowName = 14 CanSwim = 20 CanWalk = 22 Casting = 42 Celebrating = 92 CelebratingSpecial = 94 Charged = 27 Charging = 43 Chested = 36 ContainerIsPrivate = 53 Converting = 12 Critical = 13 Croaking = 100 DamageNearbyMobs = 55 Dancing = 50 DelayedAttack = 84 DoorBreaker = 78 DoorOpener = 80 Eating = 62 Elder = 33 Emoting = 91 Enchanted = 51 FacingTargetToRangeAttack = 87 FallThroughScaffolding = 70 FireImmune = 49 Gliding = 32 HasCollision = 47 HasGravity = 48 HiddenWhenInvisible = 88 Idling = 41 Ignited = 10 Immobile = 16 InAscendableBlock = 98 InLove = 7 InScaffolding = 68 Interested = 26 Invisible = 5 IsAvoidingBlock = 86 IsAvoidingMobs = 85 IsIllagerCaptain = 81 IsInUi = 89 IsOnFire = 0 IsPregnant = 58 IsTransforming = 54 LayingDown = 63 LayingEgg = 59 Leashed = 30 Lingering = 46 Moving = 34 Orphaned = 29 OutOfControl = 95 OverDescendableBlock = 99 OverScaffolding = 69 PlayingDead = 97 Powered = 9 RamAttack = 96 Resting = 23 ReturnTrident = 52 RiderCanPick = 60 Roaring = 83 Rolling = 66 Saddled = 8 Scared = 67 Shaking = 40 Sheared = 31 ShowBottom = 38 Silent = 17 Sitting = 24 Sleeping = 75 Sneaking = 1 Sneezing = 64 Sprinting = 3 Stackable = 37 Stalking = 90 Standing = 39 Stunned = 82 Swimming = 56 Tamed = 28 Tempted = 6 TradeInterest = 77 TransitionBlocking = 72 TransitionSitting = 61 Trusting = 65 Unknown = -1 UsingItem = 4 WallClimbing = 18 WantsToWake = 76 WasdControlled = 44"
  },
  "docs/OnixRuntime.Api.Entities.GameBuildPlatform.html": {
    "href": "docs/OnixRuntime.Api.Entities.GameBuildPlatform.html",
    "title": "Enum GameBuildPlatform | Onix Plugin Documentation",
    "summary": "Enum GameBuildPlatform Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll public enum GameBuildPlatform Fields Amazon = 4 Android = 1 DedicatedServer = 9 GearVR = 5 MacOS = 3 Playstation = 11 Switch = 12 UWP = 7 Unknown = -1 Win32 = 8 WindowsPhone = 14 Xbox = 13 iOS = 2"
  },
  "docs/OnixRuntime.Api.Entities.GameMode.html": {
    "href": "docs/OnixRuntime.Api.Entities.GameMode.html",
    "title": "Enum GameMode | Onix Plugin Documentation",
    "summary": "Enum GameMode Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents the game mode of a player. public enum GameMode Fields Adventure = 2 Creative = 1 Default = 5 Spectator = 6 Survival = 0"
  },
  "docs/OnixRuntime.Api.Entities.GameType.html": {
    "href": "docs/OnixRuntime.Api.Entities.GameType.html",
    "title": "Enum GameType | Onix Plugin Documentation",
    "summary": "Enum GameType Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents the game mode of a player. public enum GameType Fields Adventure = 2 Creative = 1 Default = 5 Spectator = 6 Survival = 0"
  },
  "docs/OnixRuntime.Api.Entities.ItemEntity.html": {
    "href": "docs/OnixRuntime.Api.Entities.ItemEntity.html",
    "title": "Class ItemEntity | Onix Plugin Documentation",
    "summary": "Class ItemEntity Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll public class ItemEntity : Entity Inheritance object MemoryAddressContainer Entity ItemEntity Inherited Members Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.GetFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.UpdateAttribute(EntityAttribute) Entity.UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Entity.Kill() Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.MainHandItem Entity.OffhandItem Entity.HelmetItem Entity.ChestplateItem Entity.LeggingsItem Entity.BootsItem Entity.ArmorItems Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Item public ItemStack Item { get; } Property Value ItemStack"
  },
  "docs/OnixRuntime.Api.Entities.LocalPlayer.html": {
    "href": "docs/OnixRuntime.Api.Entities.LocalPlayer.html",
    "title": "Class LocalPlayer | Onix Plugin Documentation",
    "summary": "Class LocalPlayer Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll public class LocalPlayer : Player Inheritance object MemoryAddressContainer Entity Mob Player LocalPlayer Inherited Members Player.CommandPermissionLevel Player.PermissionLevel Player.Username Player.Skin Player.ServerConnectedPlayerEntry Player.Inventory Player.SetInventoryItem(ItemStack, int) Player.UIContainer Player.RemainingItemUseDurationTicks Player.RemainingItemUseDuration Player.SelectedSlot Player.GameMode Player.GameModeOrDefault Player.IsDestroyingBlock Player.DestroyBlockProgress Player.AuthenticatedUsername Player.Xuid Player.Uuid Player.SetSkin(PlayerSkin, bool) Player.Cooldowns Player.CooldownTicks Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.GetFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.UpdateAttribute(EntityAttribute) Entity.UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Entity.Kill() Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties MainHandItem Gets or sets the item in the player's main hand. public override ItemStack MainHandItem { get; set; } Property Value ItemStack MovementInputs The movement input state, tells you if the LocalPlayer is moving forward or jumping, etc. public PlayerMovementInputs MovementInputs { get; } Property Value PlayerMovementInputs Raycast The raycast result of the LocalPlayer. public RaycastResult Raycast { get; } Property Value RaycastResult Methods AddRotation(Angles) Adds rotation to the player rotation (This also changes the camera) public void AddRotation(Angles angles) Parameters angles Angles The angles to add to the current rotation in degrees. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. AddRotation(float, float) Adds rotation to the player rotation (This also changes the camera) public void AddRotation(float yaw, float pitch) Parameters yaw float The yaw to add to the current rotation in degrees. pitch float The pitch to add to the current rotation in degrees. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Attack(Entity) Makes the player attack an entity. public bool Attack(Entity entity) Parameters entity Entity The entity to attack. Returns bool True if the entity was attacked. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BreakBlock() Tries to break a block using the current Raycast. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock() Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(BlockPos, BlockFace) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(BlockPos position, BlockFace face) Parameters position BlockPos The position of the block to be broken. face BlockFace The face of the block being broken. Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(BlockPos, BlockFace, Vec3) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(BlockPos position, BlockFace face, Vec3 raycastHitPosition) Parameters position BlockPos The position of the block to be broken. face BlockFace The face of the block being broken. raycastHitPosition Vec3 Where the raycast would have hit the block in world coordinates. Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(RaycastResult) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(RaycastResult raycast) Parameters raycast RaycastResult The raycast to extract the information from. Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(int, int, int, BlockFace) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(int x, int y, int z, BlockFace face) Parameters x int The X position of the block to be broken. y int The Y position of the block to be broken. z int The Z position of the block to be broken. face BlockFace The face of the block being broken. Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(int, int, int, BlockFace, Vec3) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(int x, int y, int z, BlockFace face, Vec3 raycastHitPosition) Parameters x int The X position of the block to be broken. y int The Y position of the block to be broken. z int The Z position of the block to be broken. face BlockFace The face of the block being broken. raycastHitPosition Vec3 Where the raycast would have hit the block in world coordinates. Returns bool True if the block was destroyed. Remarks You should call this function on the same block often since if you are in survival it will take time. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BuildBlock() Builds a new block from the current Raycast. public bool BuildBlock() Returns bool True if the block was built. Remarks This function requires trust or creative mode. If you build block on a chest without sneaking it will open the chest. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(BlockPos, BlockFace) Builds a new block on face of position. public bool BuildBlock(BlockPos position, BlockFace face) Parameters position BlockPos The position of the block being used as a base to place the new block. face BlockFace The face of the base block (determines which side of the base block the new one gets placed.) Returns bool True if the block was built. Remarks This function requires trust or creative mode. If you build block on a chest without sneaking it will open the chest. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(RaycastResult) Builds a new block at the position specified by the raycast result. public bool BuildBlock(RaycastResult raycast) Parameters raycast RaycastResult The raycast result containing the position to place the block. Returns bool True if the block was built. Remarks This function requires trust or creative mode. If you build block on a chest without sneaking it will open the chest. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(int, int, int, BlockFace) Builds a new block at the specified coordinates. public bool BuildBlock(int x, int y, int z, BlockFace face) Parameters x int The X position of the block to be placed. y int The Y position of the block to be placed. z int The Z position of the block to be placed. face BlockFace The face of the base block (determines which side of the base block the new one gets placed.) Returns bool True if the block was built. Remarks This function requires trust or creative mode. If you build block on a chest without sneaking it will open the chest. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Interact(Entity) Makes the player interact with an entity. public bool Interact(Entity entity) Parameters entity Entity The entity to interact with. Returns bool True if the entity was interacted with. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Interact(Entity, Vec3) Makes the player interact with an entity. public bool Interact(Entity entity, Vec3 hitPosition) Parameters entity Entity The entity to interact with. hitPosition Vec3 The world position where the player hit the entity's hitbox. Returns bool True if the entity was interacted with. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(BlockPos, BlockFace, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(BlockPos worldPosition, BlockFace face, bool changeY = true) Parameters worldPosition BlockPos The block in 3d space to look at. face BlockFace The face of the block look at. changeY bool If the player's view should also change on the up/down axis. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(BlockPos, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(BlockPos worldPosition, bool changeY = true) Parameters worldPosition BlockPos The point in 3d space to look at. (The center will be chosen) changeY bool If the player's view should also change on the up/down axis. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(Vec3, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(Vec3 worldPosition, bool changeY = true) Parameters worldPosition Vec3 The point in 3d space to look at. changeY bool If the player's view should also change on the up/down axis. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetRotation(Angles) Sets the rotation of the player. (This also changes the camera) public void SetRotation(Angles angles) Parameters angles Angles The angles to set as the current rotation in degrees. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetRotation(float, float) Sets the rotation of the player. (This also changes the camera) public void SetRotation(float yaw, float pitch) Parameters yaw float The yaw to set as the current rotation in degrees. pitch float The pitch to set as the current rotation in degrees. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopBreakBlock() Tries to stop breaking the block at the last position it tried/started. public void StopBreakBlock() Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopBreakBlock(BlockPos) Tries to stop breaking the block at the position provided. You should probably use the one with no parameters. public void StopBreakBlock(BlockPos position) Parameters position BlockPos The position to stop breaking the block at. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopBreakBlock(RaycastResult) Tries to stop breaking the block at the raycast's block hit position. You should probably use the one with no parameters. public void StopBreakBlock(RaycastResult raycast) Parameters raycast RaycastResult The position to stop breaking the block at. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopBreakBlock(int, int, int) Tries to stop breaking the block at the position provided. You should probably use the one with no parameters. public void StopBreakBlock(int x, int y, int z) Parameters x int The x position of the block to stop breaking. y int The y position of the block to stop breaking. z int The z position of the block to stop breaking. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopUsingItem() Stops using the item in the player's hand (will shoot the arrow out of a bow or cancel eating). public void StopUsingItem() Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItem() Makes the player use the item in their main hand. You can shoot a bow/cancel eating by calling StopUsingItem() public bool UseItem() Returns bool True if the item was successfully used. Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItemOn(BlockPos, BlockFace) Makes the player use the item in their main hand on a block. public bool UseItemOn(BlockPos position, BlockFace face) Parameters position BlockPos The position of the block the item is used on. face BlockFace The face of the block the item is used on. Returns bool True if the item was used on successfully. Remarks This function might do nothing and only be used by others internally, it is available nonetheless. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItemOn(BlockPos, BlockFace, Vec3) Makes the player use the item in their main hand on a block. public bool UseItemOn(BlockPos position, BlockFace face, Vec3 raycastHitPosition) Parameters position BlockPos The position of the block the item is used on. face BlockFace The face of the block the item is used on. raycastHitPosition Vec3 The position the raycast hit. Returns bool True if the item was used on successfully. Remarks This function might do nothing and only be used by others internally, it is available nonetheless. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItemOn(int, int, int, BlockFace) Makes the player use the item in their main hand on a block. public bool UseItemOn(int x, int y, int z, BlockFace face) Parameters x int The x position of the block the item is used on. y int The y position of the block the item is used on. z int The z position of the block the item is used on. face BlockFace The face of the block the item is used on. Returns bool True if the item was used on successfully. Remarks This function might do nothing and only be used by others internally, it is available nonetheless. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItemOn(int, int, int, BlockFace, Vec3) Makes the player use the item in their main hand on a block. public bool UseItemOn(int x, int y, int z, BlockFace face, Vec3 raycastHitPosition) Parameters x int The x position of the block the item is used on. y int The y position of the block the item is used on. z int The z position of the block the item is used on. face BlockFace The face of the block the item is used on. raycastHitPosition Vec3 The position the raycast hit. Returns bool True if the item was used on successfully. Remarks This function might do nothing and only be used by others internally, it is available nonetheless. This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this."
  },
  "docs/OnixRuntime.Api.Entities.Mob.html": {
    "href": "docs/OnixRuntime.Api.Entities.Mob.html",
    "title": "Class Mob | Onix Plugin Documentation",
    "summary": "Class Mob Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a mob entity, providing access to mob-specific properties and inventory handling. public class Mob : Entity Inheritance object MemoryAddressContainer Entity Mob Derived Player Inherited Members Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.GetFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.UpdateAttribute(EntityAttribute) Entity.UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Entity.Kill() Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ArmorItems Gets or sets all armor items of the mob. Sends inventory update if changed server-side. public override ItemStack[] ArmorItems { get; set; } Property Value ItemStack[] BootsItem Gets or sets the item in the mob's boots slot. Sends inventory update if changed server-side. public override ItemStack BootsItem { get; set; } Property Value ItemStack CardinalHeadRotation Gets the cardinal head rotation of the mob. public float CardinalHeadRotation { get; } Property Value float ChestplateItem Gets or sets the item in the mob's chestplate slot. Sends inventory update if changed server-side. public override ItemStack ChestplateItem { get; set; } Property Value ItemStack FallTime Gets the time the mob has been falling. public float FallTime { get; } Property Value float HelmetItem Gets or sets the item in the mob's helmet slot. Sends inventory update if changed server-side. public override ItemStack HelmetItem { get; set; } Property Value ItemStack HurtTime Gets the number of ticks since the mob was last hurt. public int HurtTime { get; } Property Value int LeggingsItem Gets or sets the item in the mob's leggings slot. Sends inventory update if changed server-side. public override ItemStack LeggingsItem { get; set; } Property Value ItemStack MainHandItem Gets or sets the item in the mob's main hand. Sends inventory update if changed server-side. public override ItemStack MainHandItem { get; set; } Property Value ItemStack OffhandItem Gets or sets the item in the mob's offhand. Sends inventory update if changed server-side. public override ItemStack OffhandItem { get; set; } Property Value ItemStack RawBodyRot Gets the raw body rotation of the mob. public float RawBodyRot { get; } Property Value float RawBodyRotOld Gets the previous raw body rotation of the mob. public float RawBodyRotOld { get; } Property Value float RawHeadRot Gets the raw head rotation of the mob. public float RawHeadRot { get; } Property Value float RawHeadRotOld Gets the previous raw head rotation of the mob. public float RawHeadRotOld { get; } Property Value float Methods SendInventory(bool) Sends the mob's inventory to the client, optionally opening it. public void SendInventory(bool open = false) Parameters open bool"
  },
  "docs/OnixRuntime.Api.Entities.MobEffectId.html": {
    "href": "docs/OnixRuntime.Api.Entities.MobEffectId.html",
    "title": "Enum MobEffectId | Onix Plugin Documentation",
    "summary": "Enum MobEffectId Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Identifiers for all possible mob effects. public enum MobEffectId Extension Methods MobEffectIdExtensions.GetIcon(MobEffectId) MobEffectIdExtensions.ToIdentifier(MobEffectId) Fields Absorption = 22 BadOmen = 28 Blindness = 15 ConduitPower = 26 Darkness = 30 FatalPoison = 25 FireResistance = 12 Haste = 3 HealthBoost = 21 Hunger = 17 Infested = 35 InstantDamage = 7 InstantHealth = 6 Invisibility = 14 JumpBoost = 8 Levitation = 24 MiningFatigue = 4 Nausea = 9 NightVision = 16 None = 0 Oozing = 34 Poison = 19 RaidOmen = 36 Regeneration = 10 Resistance = 11 Saturation = 23 SlowFalling = 27 Slowness = 2 Speed = 1 Strength = 5 TrialOmen = 31 VillageHero = 29 WaterBreathing = 13 Weakness = 18 Weaving = 33 WindCharged = 32 Wither = 20"
  },
  "docs/OnixRuntime.Api.Entities.MobEffectIdExtensions.html": {
    "href": "docs/OnixRuntime.Api.Entities.MobEffectIdExtensions.html",
    "title": "Class MobEffectIdExtensions | Onix Plugin Documentation",
    "summary": "Class MobEffectIdExtensions Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Extension methods for MobEffectId, including conversion and icon retrieval. public static class MobEffectIdExtensions Inheritance object MobEffectIdExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromInt(int) Converts an integer to a MobEffectId, returning None if out of range. public static MobEffectId FromInt(int id) Parameters id int Returns MobEffectId GetIcon(MobEffectId) Gets the icon texture path for the given MobEffectId. public static TexturePath GetIcon(this MobEffectId id) Parameters id MobEffectId Returns TexturePath ToIdentifier(MobEffectId) Gets the string identifier for a MobEffectId. public static string ToIdentifier(this MobEffectId id) Parameters id MobEffectId Returns string"
  },
  "docs/OnixRuntime.Api.Entities.MobEffectInstance.html": {
    "href": "docs/OnixRuntime.Api.Entities.MobEffectInstance.html",
    "title": "Class MobEffectInstance | Onix Plugin Documentation",
    "summary": "Class MobEffectInstance Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents an instance of a mob effect applied to an entity, including its properties and duration. public class MobEffectInstance Inheritance object MobEffectInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ambient Gets whether the effect is ambient. public bool Ambient { get; } Property Value bool Amplifier The amplifier is 0 based, so 0 means it will show I in the UI and 1 would be II. public int Amplifier { get; } Property Value int DisplayOnScreenAnimation Gets whether the effect displays an on-screen animation. public bool DisplayOnScreenAnimation { get; } Property Value bool Duration The TimeSpan ticks do not represent Minecraft ticks. public TimeSpan Duration { get; } Property Value TimeSpan Icon Gets the icon texture for this effect. public TexturePath Icon { get; } Property Value TexturePath Id Gets the effect ID. public MobEffectId Id { get; } Property Value MobEffectId IsActive Gets whether the effect is active (duration is not zero). public bool IsActive { get; } Property Value bool NoCounter Gets whether the effect has no counter. public bool NoCounter { get; } Property Value bool Visible Gets whether the effect is visible. public bool Visible { get; } Property Value bool"
  },
  "docs/OnixRuntime.Api.Entities.MutableEntityAttribute.html": {
    "href": "docs/OnixRuntime.Api.Entities.MutableEntityAttribute.html",
    "title": "Class MutableEntityAttribute | Onix Plugin Documentation",
    "summary": "Class MutableEntityAttribute Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a mutable entity attribute, allowing modification of its value and limits. public class MutableEntityAttribute : EntityAttribute Inheritance object EntityAttribute MutableEntityAttribute Inherited Members EntityAttribute.Name EntityAttribute.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultMaxValue Gets or sets the default maximum value of the attribute. public float DefaultMaxValue { get; set; } Property Value float DefaultMinValue Gets or sets the default minimum value of the attribute. public float DefaultMinValue { get; set; } Property Value float DefaultValue Gets or sets the default value of the attribute. public float DefaultValue { get; set; } Property Value float MaxValue Gets or sets the maximum value of the attribute. public float MaxValue { get; set; } Property Value float MinValue Gets or sets the minimum value of the attribute. public float MinValue { get; set; } Property Value float Value Gets or sets the current value of the attribute. public float Value { get; set; } Property Value float"
  },
  "docs/OnixRuntime.Api.Entities.Player.html": {
    "href": "docs/OnixRuntime.Api.Entities.Player.html",
    "title": "Class Player | Onix Plugin Documentation",
    "summary": "Class Player Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a player entity, providing access to player-specific properties and inventory handling. public class Player : Mob Inheritance object MemoryAddressContainer Entity Mob Player Derived LocalPlayer ServerPlayer Inherited Members Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.GetFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.UpdateAttribute(EntityAttribute) Entity.UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Entity.Kill() Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AuthenticatedUsername Gets the authenticated username of the player. public string AuthenticatedUsername { get; } Property Value string CommandPermissionLevel Gets the command permission level of the player. public CommandPermissionLevel CommandPermissionLevel { get; } Property Value CommandPermissionLevel CooldownTicks Gives you the list of all the cooldown types as ticks. These may or may not match the item name. public IReadOnlyDictionary<string, int> CooldownTicks { get; } Property Value IReadOnlyDictionary<string, int> Cooldowns Gives you the list of all the cooldown types. These may or may not match the item name. public IReadOnlyDictionary<string, TimeSpan> Cooldowns { get; } Property Value IReadOnlyDictionary<string, TimeSpan> DestroyBlockProgress Gets the progress of block destruction. public float DestroyBlockProgress { get; } Property Value float GameMode Gets the player's current game type. public GameMode GameMode { get; } Property Value GameMode GameModeOrDefault This one can return GameMode.Default public GameMode GameModeOrDefault { get; } Property Value GameMode Inventory Gets the player's inventory container. public ItemContainer Inventory { get; } Property Value ItemContainer IsDestroyingBlock Gets whether the player is currently destroying a block. public bool IsDestroyingBlock { get; } Property Value bool MainHandItem Gets or sets the item in the player's main hand. public override ItemStack MainHandItem { get; set; } Property Value ItemStack PermissionLevel Gets the player permission level. public PlayerPermissionLevel PermissionLevel { get; } Property Value PlayerPermissionLevel RemainingItemUseDuration Gets the remaining item use duration as a TimeSpan. public TimeSpan RemainingItemUseDuration { get; } Property Value TimeSpan RemainingItemUseDurationTicks Gets the remaining item use duration in game ticks. public int RemainingItemUseDurationTicks { get; } Property Value int SelectedSlot Gets or sets the selected hotbar slot. public int SelectedSlot { get; set; } Property Value int ServerConnectedPlayerEntry Gets the server connected player entry, if available. public ServerConnectedPlayer? ServerConnectedPlayerEntry { get; } Property Value ServerConnectedPlayer Skin Gets or sets the player's skin. public PlayerSkin Skin { get; set; } Property Value PlayerSkin UIContainer Gets the player's UI container. Avoid writing items to this container directly. public ItemContainer UIContainer { get; } Property Value ItemContainer Username Gets the username of the player. public string Username { get; } Property Value string Uuid Gets the UUID of the player. public string Uuid { get; } Property Value string Xuid Gets the XUID of the player. public string Xuid { get; } Property Value string Methods SetInventoryItem(ItemStack, int) Sets an item in the player's inventory at the specified slot. Sends inventory update if changed server-side. public void SetInventoryItem(ItemStack item, int slot) Parameters item ItemStack slot int Remarks This function requires trust on the client side. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetSkin(PlayerSkin, bool) Sets the player's skin, optionally only affecting the client. public void SetSkin(PlayerSkin skin, bool onlyAffectClient = false) Parameters skin PlayerSkin onlyAffectClient bool"
  },
  "docs/OnixRuntime.Api.Entities.PlayerMovementInputs.html": {
    "href": "docs/OnixRuntime.Api.Entities.PlayerMovementInputs.html",
    "title": "Class PlayerMovementInputs | Onix Plugin Documentation",
    "summary": "Class PlayerMovementInputs Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll public class PlayerMovementInputs : MemoryAddressContainer Inheritance object MemoryAddressContainer PlayerMovementInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Backward If the LocalPlayer is moving backward. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Backward { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Forward If the LocalPlayer is moving forward. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Forward { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Jump If the LocalPlayer is jumping. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Jump { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Left If the LocalPlayer is moving left. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Left { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. MoveVector Both values range from -1 to 1 with 0 being no movement. The Y is forward and backward movement (1 = forward and -1 = backwards). The X is left and right movement (1 = left and -1 = right). public Vec2 MoveVector { get; } Property Value Vec2 Right If the LocalPlayer is moving right. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Right { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Sneak If the LocalPlayer is sneaking. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Sneak { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Sprint If the LocalPlayer is sprinting. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Sprint { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Methods Reset() Stops all movement. MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public void Reset() Exceptions NotServerGameTickEventException Thrown when you set it outside its event."
  },
  "docs/OnixRuntime.Api.Entities.PlayerPermissionLevel.html": {
    "href": "docs/OnixRuntime.Api.Entities.PlayerPermissionLevel.html",
    "title": "Enum PlayerPermissionLevel | Onix Plugin Documentation",
    "summary": "Enum PlayerPermissionLevel Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents the player permission level. public enum PlayerPermissionLevel Fields Custom = 3 Member = 1 Operator = 2 Visitor = 0"
  },
  "docs/OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.html": {
    "href": "docs/OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.html",
    "title": "Enum PlayerSkin.ArmSizeType | Onix Plugin Documentation",
    "summary": "Enum PlayerSkin.ArmSizeType Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Specifies the arm size type for a player skin. public enum PlayerSkin.ArmSizeType Fields Count = 2 Slim = 0 Unknown = 3 Wide = 1"
  },
  "docs/OnixRuntime.Api.Entities.PlayerSkin.html": {
    "href": "docs/OnixRuntime.Api.Entities.PlayerSkin.html",
    "title": "Class PlayerSkin | Onix Plugin Documentation",
    "summary": "Class PlayerSkin Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a Minecraft player skin, including geometry, images, and metadata. public class PlayerSkin : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer PlayerSkin Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerSkin() public PlayerSkin() Properties ArmSize Gets or sets the arm size type for the skin. public PlayerSkin.ArmSizeType ArmSize { get; set; } Property Value PlayerSkin.ArmSizeType Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. CapeId Gets or sets the cape ID for the skin. public string CapeId { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. CapeImage Gets or sets the cape image data. public RawImageData CapeImage { get; set; } Property Value RawImageData Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. DefaultGeometryName Gets or sets the default geometry name for the skin. public string DefaultGeometryName { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. FullId Gets or sets the full ID of the skin. public string FullId { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. Geometry Gets or sets the geometry data for the skin. public string Geometry { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. GeometryName Gets or sets the geometry name for the skin. public string GeometryName { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. GeometryOrDefault Since 1.21.70 the player's geometry is null for the default geometries. The client and server are all fine with this but if you need the geometry data, this function will return the default geometry data. public string GeometryOrDefault { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. Id Gets or sets the skin ID. public string Id { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. IgnoreCape Gets or sets a value indicating whether to ignore the cape. public bool IgnoreCape { get; set; } Property Value bool Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. IsPersona Gets or sets a value indicating whether the skin is a persona skin. public bool IsPersona { get; set; } Property Value bool Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. IsPremium Gets or sets a value indicating whether the skin is premium. public bool IsPremium { get; set; } Property Value bool Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. PlayFabId Gets or sets the PlayFab ID associated with the skin. public string PlayFabId { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. ResourcePatch Gets or sets the resource patch for the skin. public string ResourcePatch { get; set; } Property Value string Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. SkinImage Gets or sets the skin image data. public RawImageData SkinImage { get; set; } Property Value RawImageData Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. Trust Gets or sets the trust level of the skin. public PlayerSkinTrust Trust { get; set; } Property Value PlayerSkinTrust Remarks Throws if the object is not owned. Exceptions InvalidOperationException Thrown when the object is not owned. Methods ChangeCape(RawImageData, string?) Changes the cape image and optionally the cape ID. public void ChangeCape(RawImageData image, string? capeId = null) Parameters image RawImageData The new cape image. capeId string The new cape ID. If null, a new ID is generated. ChangeSkin(RawImageData, string?, string?) Changes the skin image and optionally the skin ID and full ID. public void ChangeSkin(RawImageData image, string? skinId = null, string? fullId = null) Parameters image RawImageData The new skin image. skinId string The new skin ID. If null, a new ID is generated. fullId string The new full ID. If null, the skin ID is used. Clone() Clones the player skin. public PlayerSkin Clone() Returns PlayerSkin A new instance of PlayerSkin that is a copy of the current instance. GenerateNewIds() Generates new IDs for the skin and optionally for the cape. public void GenerateNewIds() GenerateNewIds(bool) Generates new IDs for the skin and optionally for the cape. public void GenerateNewIds(bool capeId) Parameters capeId bool If true, generates a new ID for the cape. RemoveCape() Removes the cape. public void RemoveCape()"
  },
  "docs/OnixRuntime.Api.Entities.PlayerSkinTrust.html": {
    "href": "docs/OnixRuntime.Api.Entities.PlayerSkinTrust.html",
    "title": "Enum PlayerSkinTrust | Onix Plugin Documentation",
    "summary": "Enum PlayerSkinTrust Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Indicates the trust level of a player skin. public enum PlayerSkinTrust Fields Trusted = 2 Unknown = 0 Untrusted = 1"
  },
  "docs/OnixRuntime.Api.Entities.ServerConnectedPlayer.html": {
    "href": "docs/OnixRuntime.Api.Entities.ServerConnectedPlayer.html",
    "title": "Class ServerConnectedPlayer | Onix Plugin Documentation",
    "summary": "Class ServerConnectedPlayer Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a player connected to the server, including platform, identity, and skin information. public class ServerConnectedPlayer : MemoryAddressContainer Inheritance object MemoryAddressContainer ServerConnectedPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientPlayer Tries to get the client player entity from the player entry. Won't work if the entity is not loaded. public Player? ClientPlayer { get; } Property Value Player Remarks This function requires trust or creative mode. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Platform Gets the platform the player is connected from. public GameBuildPlatform Platform { get; } Property Value GameBuildPlatform ServerPlayer Gets the server player instance associated with this connected player. public ServerPlayer ServerPlayer { get; } Property Value ServerPlayer Skin Gets or sets the player's skin. public PlayerSkin Skin { get; set; } Property Value PlayerSkin UniqueEntityId Gets the unique entity ID for this player. public ulong UniqueEntityId { get; } Property Value ulong Username Gets the username of the player. public string Username { get; } Property Value string Xuid Gets the XUID of the player. public string Xuid { get; } Property Value string Methods SetSkin(PlayerSkin, bool) Sets the player's skin, optionally only affecting the client. public void SetSkin(PlayerSkin skin, bool onlyAffectsClient = false) Parameters skin PlayerSkin The new player skin. onlyAffectsClient bool If true, only affects the client."
  },
  "docs/OnixRuntime.Api.Entities.ServerPlayer.html": {
    "href": "docs/OnixRuntime.Api.Entities.ServerPlayer.html",
    "title": "Class ServerPlayer | Onix Plugin Documentation",
    "summary": "Class ServerPlayer Namespace OnixRuntime.Api.Entities Assembly OnixRuntime.dll Represents a server-side player entity, providing server-specific player functionality. public class ServerPlayer : Player Inheritance object MemoryAddressContainer Entity Mob Player ServerPlayer Inherited Members Player.CommandPermissionLevel Player.PermissionLevel Player.Username Player.Skin Player.ServerConnectedPlayerEntry Player.Inventory Player.SetInventoryItem(ItemStack, int) Player.UIContainer Player.MainHandItem Player.RemainingItemUseDurationTicks Player.RemainingItemUseDuration Player.SelectedSlot Player.GameMode Player.GameModeOrDefault Player.IsDestroyingBlock Player.DestroyBlockProgress Player.AuthenticatedUsername Player.Xuid Player.Uuid Player.SetSkin(PlayerSkin, bool) Player.Cooldowns Player.CooldownTicks Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.GetFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.UpdateAttribute(EntityAttribute) Entity.UpdateAttribute(EntityAttributeId, Action<MutableEntityAttribute>) Entity.Kill() Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods SendChatMessage(string, ChatMessageType, string?) Sends a chat message to the player. public void SendChatMessage(string message, ChatMessageType type = ChatMessageType.Raw, string? authorName = null) Parameters message string The message to send. type ChatMessageType The type of chat message. authorName string Optional author name for the message."
  },
  "docs/OnixRuntime.Api.Entities.html": {
    "href": "docs/OnixRuntime.Api.Entities.html",
    "title": "Namespace OnixRuntime.Api.Entities | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Entities Classes Entity Represents an entity in the world. Entity methods and properties are only available from a game logic thread. EntityAttribute Represents an immutable entity attribute, including its value and limits. ItemEntity LocalPlayer Mob Represents a mob entity, providing access to mob-specific properties and inventory handling. MobEffectIdExtensions Extension methods for MobEffectId, including conversion and icon retrieval. MobEffectInstance Represents an instance of a mob effect applied to an entity, including its properties and duration. MutableEntityAttribute Represents a mutable entity attribute, allowing modification of its value and limits. Player Represents a player entity, providing access to player-specific properties and inventory handling. PlayerMovementInputs PlayerSkin Represents a Minecraft player skin, including geometry, images, and metadata. ServerConnectedPlayer Represents a player connected to the server, including platform, identity, and skin information. ServerPlayer Represents a server-side player entity, providing server-specific player functionality. Enums CommandPermissionLevel Represents the command permission level of a player. EntityAttributeId Identifiers for entity attributes. EntityCategory Specifies the category or categories that an entity can belong to. EntityFlag Flags representing various states and properties that an entity can have. GameBuildPlatform GameMode Represents the game mode of a player. MobEffectId Identifiers for all possible mob effects. PlayerPermissionLevel Represents the player permission level. PlayerSkin.ArmSizeType Specifies the arm size type for a player skin. PlayerSkinTrust Indicates the trust level of a player skin."
  },
  "docs/OnixRuntime.Api.Errors.CheatsModeRequiredException.html": {
    "href": "docs/OnixRuntime.Api.Errors.CheatsModeRequiredException.html",
    "title": "Class CheatsModeRequiredException | Onix Plugin Documentation",
    "summary": "Class CheatsModeRequiredException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when cheats mode is required for an operation. public class CheatsModeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException CheatsModeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CheatsModeRequiredException() Thrown when cheats mode is required for an operation. public CheatsModeRequiredException()"
  },
  "docs/OnixRuntime.Api.Errors.ClientOnlyObjectException.html": {
    "href": "docs/OnixRuntime.Api.Errors.ClientOnlyObjectException.html",
    "title": "Class ClientOnlyObjectException | Onix Plugin Documentation",
    "summary": "Class ClientOnlyObjectException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when a client-only object is used from the server thread. public class ClientOnlyObjectException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ClientOnlyObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClientOnlyObjectException() Thrown when a client-only object is used from the server thread. public ClientOnlyObjectException()"
  },
  "docs/OnixRuntime.Api.Errors.InsufficientTrustException.html": {
    "href": "docs/OnixRuntime.Api.Errors.InsufficientTrustException.html",
    "title": "Class InsufficientTrustException | Onix Plugin Documentation",
    "summary": "Class InsufficientTrustException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when the trust level is insufficient for the operation. public class InsufficientTrustException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException InsufficientTrustException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InsufficientTrustException() Thrown when the trust level is insufficient for the operation. public InsufficientTrustException()"
  },
  "docs/OnixRuntime.Api.Errors.InvalidJsonDataProvidedException.html": {
    "href": "docs/OnixRuntime.Api.Errors.InvalidJsonDataProvidedException.html",
    "title": "Class InvalidJsonDataProvidedException | Onix Plugin Documentation",
    "summary": "Class InvalidJsonDataProvidedException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when invalid JSON data is provided. public class InvalidJsonDataProvidedException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException InvalidJsonDataProvidedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidJsonDataProvidedException() Thrown when invalid JSON data is provided. public InvalidJsonDataProvidedException()"
  },
  "docs/OnixRuntime.Api.Errors.NotClientGameTickEventException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotClientGameTickEventException.html",
    "title": "Class NotClientGameTickEventException | Onix Plugin Documentation",
    "summary": "Class NotClientGameTickEventException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires a client game tick event. public class NotClientGameTickEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotClientGameTickEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotClientGameTickEventException() Thrown when an operation requires a client game tick event. public NotClientGameTickEventException()"
  },
  "docs/OnixRuntime.Api.Errors.NotClientThreadException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotClientThreadException.html",
    "title": "Class NotClientThreadException | Onix Plugin Documentation",
    "summary": "Class NotClientThreadException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires the client logic thread. public class NotClientThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotClientThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotClientThreadException() Thrown when an operation requires the client logic thread. public NotClientThreadException()"
  },
  "docs/OnixRuntime.Api.Errors.NotGameMovementTickCallbackException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotGameMovementTickCallbackException.html",
    "title": "Class NotGameMovementTickCallbackException | Onix Plugin Documentation",
    "summary": "Class NotGameMovementTickCallbackException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires a game movement tick callback. public class NotGameMovementTickCallbackException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotGameMovementTickCallbackException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotGameMovementTickCallbackException() Thrown when an operation requires a game movement tick callback. public NotGameMovementTickCallbackException()"
  },
  "docs/OnixRuntime.Api.Errors.NotInRuntimeWorldException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotInRuntimeWorldException.html",
    "title": "Class NotInRuntimeWorldException | Onix Plugin Documentation",
    "summary": "Class NotInRuntimeWorldException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation is performed outside of a runtime world. public class NotInRuntimeWorldException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotInRuntimeWorldException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotInRuntimeWorldException() Thrown when an operation is performed outside of a runtime world. public NotInRuntimeWorldException()"
  },
  "docs/OnixRuntime.Api.Errors.NotServerGameTickEventException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotServerGameTickEventException.html",
    "title": "Class NotServerGameTickEventException | Onix Plugin Documentation",
    "summary": "Class NotServerGameTickEventException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires a server game tick event. public class NotServerGameTickEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotServerGameTickEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotServerGameTickEventException() Thrown when an operation requires a server game tick event. public NotServerGameTickEventException()"
  },
  "docs/OnixRuntime.Api.Errors.NotServerThreadException.html": {
    "href": "docs/OnixRuntime.Api.Errors.NotServerThreadException.html",
    "title": "Class NotServerThreadException | Onix Plugin Documentation",
    "summary": "Class NotServerThreadException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires the server thread. public class NotServerThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotServerThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotServerThreadException() Thrown when an operation requires the server thread. public NotServerThreadException()"
  },
  "docs/OnixRuntime.Api.Errors.OnixRuntimeException.html": {
    "href": "docs/OnixRuntime.Api.Errors.OnixRuntimeException.html",
    "title": "Class OnixRuntimeException | Onix Plugin Documentation",
    "summary": "Class OnixRuntimeException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Base exception for Onix Runtime errors. public class OnixRuntimeException : Exception, ISerializable Inheritance object Exception OnixRuntimeException Implements ISerializable Derived CheatsModeRequiredException ClientOnlyObjectException InsufficientTrustException InvalidJsonDataProvidedException NotClientGameTickEventException NotClientThreadException NotGameMovementTickCallbackException NotInRuntimeWorldException NotServerGameTickEventException NotServerThreadException OperatorOrCheatsModeRequiredException OperatorPrivilegeRequiredException RequiresDirect2DEventException RequiresGameLogicThreadException RequiresRenderThreadAndEventException RequiresWorldRenderThreadAndEventException ServerOnlyObjectException ThreadTypeMismatchException SettingAlreadyHasAParentException WaypointsNotEnabledException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnixRuntimeException(string) Base exception for Onix Runtime errors. public OnixRuntimeException(string message) Parameters message string"
  },
  "docs/OnixRuntime.Api.Errors.OperatorOrCheatsModeRequiredException.html": {
    "href": "docs/OnixRuntime.Api.Errors.OperatorOrCheatsModeRequiredException.html",
    "title": "Class OperatorOrCheatsModeRequiredException | Onix Plugin Documentation",
    "summary": "Class OperatorOrCheatsModeRequiredException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when operator or cheats mode is required for an operation. public class OperatorOrCheatsModeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException OperatorOrCheatsModeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OperatorOrCheatsModeRequiredException() Thrown when operator or cheats mode is required for an operation. public OperatorOrCheatsModeRequiredException()"
  },
  "docs/OnixRuntime.Api.Errors.OperatorPrivilegeRequiredException.html": {
    "href": "docs/OnixRuntime.Api.Errors.OperatorPrivilegeRequiredException.html",
    "title": "Class OperatorPrivilegeRequiredException | Onix Plugin Documentation",
    "summary": "Class OperatorPrivilegeRequiredException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when operator privileges are required for an operation. public class OperatorPrivilegeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException OperatorPrivilegeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OperatorPrivilegeRequiredException() Thrown when operator privileges are required for an operation. public OperatorPrivilegeRequiredException()"
  },
  "docs/OnixRuntime.Api.Errors.RequiresDirect2DEventException.html": {
    "href": "docs/OnixRuntime.Api.Errors.RequiresDirect2DEventException.html",
    "title": "Class RequiresDirect2DEventException | Onix Plugin Documentation",
    "summary": "Class RequiresDirect2DEventException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires a Direct2D event. public class RequiresDirect2DEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresDirect2DEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresDirect2DEventException() Thrown when an operation requires a Direct2D event. public RequiresDirect2DEventException()"
  },
  "docs/OnixRuntime.Api.Errors.RequiresGameLogicThreadException.html": {
    "href": "docs/OnixRuntime.Api.Errors.RequiresGameLogicThreadException.html",
    "title": "Class RequiresGameLogicThreadException | Onix Plugin Documentation",
    "summary": "Class RequiresGameLogicThreadException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires the game logic thread. public class RequiresGameLogicThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresGameLogicThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresGameLogicThreadException() Thrown when an operation requires the game logic thread. public RequiresGameLogicThreadException()"
  },
  "docs/OnixRuntime.Api.Errors.RequiresRenderThreadAndEventException.html": {
    "href": "docs/OnixRuntime.Api.Errors.RequiresRenderThreadAndEventException.html",
    "title": "Class RequiresRenderThreadAndEventException | Onix Plugin Documentation",
    "summary": "Class RequiresRenderThreadAndEventException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires the render thread and event. public class RequiresRenderThreadAndEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresRenderThreadAndEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresRenderThreadAndEventException() Thrown when an operation requires the render thread and event. public RequiresRenderThreadAndEventException()"
  },
  "docs/OnixRuntime.Api.Errors.RequiresWorldRenderThreadAndEventException.html": {
    "href": "docs/OnixRuntime.Api.Errors.RequiresWorldRenderThreadAndEventException.html",
    "title": "Class RequiresWorldRenderThreadAndEventException | Onix Plugin Documentation",
    "summary": "Class RequiresWorldRenderThreadAndEventException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation requires the world render thread and event. public class RequiresWorldRenderThreadAndEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresWorldRenderThreadAndEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresWorldRenderThreadAndEventException() Thrown when an operation requires the world render thread and event. public RequiresWorldRenderThreadAndEventException()"
  },
  "docs/OnixRuntime.Api.Errors.ServerOnlyObjectException.html": {
    "href": "docs/OnixRuntime.Api.Errors.ServerOnlyObjectException.html",
    "title": "Class ServerOnlyObjectException | Onix Plugin Documentation",
    "summary": "Class ServerOnlyObjectException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when a server-only object is used from the client thread. public class ServerOnlyObjectException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ServerOnlyObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ServerOnlyObjectException() Thrown when a server-only object is used from the client thread. public ServerOnlyObjectException()"
  },
  "docs/OnixRuntime.Api.Errors.ThreadTypeMismatchException.html": {
    "href": "docs/OnixRuntime.Api.Errors.ThreadTypeMismatchException.html",
    "title": "Class ThreadTypeMismatchException | Onix Plugin Documentation",
    "summary": "Class ThreadTypeMismatchException Namespace OnixRuntime.Api.Errors Assembly OnixRuntime.dll Thrown when an operation is performed on the wrong thread type. public class ThreadTypeMismatchException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ThreadTypeMismatchException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ThreadTypeMismatchException() Thrown when an operation is performed on the wrong thread type. public ThreadTypeMismatchException()"
  },
  "docs/OnixRuntime.Api.Errors.html": {
    "href": "docs/OnixRuntime.Api.Errors.html",
    "title": "Namespace OnixRuntime.Api.Errors | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Errors Classes CheatsModeRequiredException Thrown when cheats mode is required for an operation. ClientOnlyObjectException Thrown when a client-only object is used from the server thread. InsufficientTrustException Thrown when the trust level is insufficient for the operation. InvalidJsonDataProvidedException Thrown when invalid JSON data is provided. NotClientGameTickEventException Thrown when an operation requires a client game tick event. NotClientThreadException Thrown when an operation requires the client logic thread. NotGameMovementTickCallbackException Thrown when an operation requires a game movement tick callback. NotInRuntimeWorldException Thrown when an operation is performed outside of a runtime world. NotServerGameTickEventException Thrown when an operation requires a server game tick event. NotServerThreadException Thrown when an operation requires the server thread. OnixRuntimeException Base exception for Onix Runtime errors. OperatorOrCheatsModeRequiredException Thrown when operator or cheats mode is required for an operation. OperatorPrivilegeRequiredException Thrown when operator privileges are required for an operation. RequiresDirect2DEventException Thrown when an operation requires a Direct2D event. RequiresGameLogicThreadException Thrown when an operation requires the game logic thread. RequiresRenderThreadAndEventException Thrown when an operation requires the render thread and event. RequiresWorldRenderThreadAndEventException Thrown when an operation requires the world render thread and event. ServerOnlyObjectException Thrown when a server-only object is used from the client thread. ThreadTypeMismatchException Thrown when an operation is performed on the wrong thread type."
  },
  "docs/OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInUiDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInUiDelegate.html",
    "title": "Delegate OnixEventAudio.OnSoundPlayedInUiDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventAudio.OnSoundPlayedInUiDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate bool OnixEventAudio.OnSoundPlayedInUiDelegate(string sound, float volume, float pitch) Parameters sound string volume float pitch float Returns bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInWorldDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInWorldDelegate.html",
    "title": "Delegate OnixEventAudio.OnSoundPlayedInWorldDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventAudio.OnSoundPlayedInWorldDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate bool OnixEventAudio.OnSoundPlayedInWorldDelegate(string sound, Vec3 position, float volume, float pitch) Parameters sound string position Vec3 volume float pitch float Returns bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventAudio.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventAudio.html",
    "title": "Class OnixEventAudio | Onix Plugin Documentation",
    "summary": "Class OnixEventAudio Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for client audio related things. public class OnixEventAudio Inheritance object OnixEventAudio Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events SoundPlayedInUi public event OnixEventAudio.OnSoundPlayedInUiDelegate? SoundPlayedInUi Event Type OnixEventAudio.OnSoundPlayedInUiDelegate SoundPlayedInWorld public event OnixEventAudio.OnSoundPlayedInWorldDelegate? SoundPlayedInWorld Event Type OnixEventAudio.OnSoundPlayedInWorldDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventCommon.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventCommon.html",
    "title": "Class OnixEventCommon | Onix Plugin Documentation",
    "summary": "Class OnixEventCommon Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides common event hooks for tick, rendering, input, and chat message events. public class OnixEventCommon Inheritance object OnixEventCommon Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events ChatMessage Occurs when a chat message is received. public event OnixEventSessionChat.OnReceiveDelegate ChatMessage Event Type OnixEventSessionChat.OnReceiveDelegate HudInput Occurs when HUD input is received. public event OnixEventInputs.OnInputDelegate? HudInput Event Type OnixEventInputs.OnInputDelegate HudRender Occurs when the HUD is rendered. public event OnixEventRendering.OnHudRenderDelegate? HudRender Event Type OnixEventRendering.OnHudRenderDelegate HudRenderDirect2D Occurs when the HUD is rendered using Direct2D. public event OnixEventRendering.OnRenderHudDirect2DDelegate? HudRenderDirect2D Event Type OnixEventRendering.OnRenderHudDirect2DDelegate Tick Occurs every game tick. public event OnixEventsSession.OnTickDelegate? Tick Event Type OnixEventsSession.OnTickDelegate WorldRender Occurs when the world is rendered. public event OnixEventRendering.OnWorldRenderDelegate? WorldRender Event Type OnixEventRendering.OnWorldRenderDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenGetClientCommandsDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenGetClientCommandsDelegate.html",
    "title": "Delegate OnixEventGui.OnChatScreenGetClientCommandsDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventGui.OnChatScreenGetClientCommandsDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling requests to get client chat commands. public delegate void OnixEventGui.OnChatScreenGetClientCommandsDelegate(Action<string, string> addCommand) Parameters addCommand Action<string, string> Delegate for handling requests to get client chat commands."
  },
  "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTabCompleteDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTabCompleteDelegate.html",
    "title": "Delegate OnixEventGui.OnChatScreenTabCompleteDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventGui.OnChatScreenTabCompleteDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling chat screen tab completion events. public delegate void OnixEventGui.OnChatScreenTabCompleteDelegate(ChatScreen chat, int direction) Parameters chat ChatScreen Delegate for handling chat screen tab completion events. direction int Delegate for handling chat screen tab completion events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTickDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTickDelegate.html",
    "title": "Delegate OnixEventGui.OnChatScreenTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventGui.OnChatScreenTickDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling chat screen tick events. public delegate void OnixEventGui.OnChatScreenTickDelegate(ChatScreen chat) Parameters chat ChatScreen Delegate for handling chat screen tick events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventGui.OnContainerScreenTickDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventGui.OnContainerScreenTickDelegate.html",
    "title": "Delegate OnixEventGui.OnContainerScreenTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventGui.OnContainerScreenTickDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling container screen tick events. public delegate void OnixEventGui.OnContainerScreenTickDelegate(ContainerScreen container) Parameters container ContainerScreen Delegate for handling container screen tick events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventGui.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventGui.html",
    "title": "Class OnixEventGui | Onix Plugin Documentation",
    "summary": "Class OnixEventGui Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for GUI screens such as container screens and chat screens. public class OnixEventGui Inheritance object OnixEventGui Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events ChatScreenGetClientCommands Occurs when the chat screen requests the list of available client commands. public event OnixEventGui.OnChatScreenGetClientCommandsDelegate? ChatScreenGetClientCommands Event Type OnixEventGui.OnChatScreenGetClientCommandsDelegate ChatScreenTabComplete Occurs when the user requests tab completion in the chat screen. public event OnixEventGui.OnChatScreenTabCompleteDelegate? ChatScreenTabComplete Event Type OnixEventGui.OnChatScreenTabCompleteDelegate ChatScreenTick Occurs every tick while the chat screen is open. public event OnixEventGui.OnChatScreenTickDelegate? ChatScreenTick Event Type OnixEventGui.OnChatScreenTickDelegate ContainerScreenTick Occurs every tick while a container screen is open. public event OnixEventGui.OnContainerScreenTickDelegate? ContainerScreenTick Event Type OnixEventGui.OnContainerScreenTickDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnInputDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnInputDelegate.html",
    "title": "Delegate OnixEventInputs.OnInputDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnInputDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling input events (keyboard, mouse, etc.). public delegate bool OnixEventInputs.OnInputDelegate(InputKey key, bool isDown) Parameters key InputKey Delegate for handling input events (keyboard, mouse, etc.). isDown bool Delegate for handling input events (keyboard, mouse, etc.). Returns bool Delegate for handling input events (keyboard, mouse, etc.)."
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnInputResetDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnInputResetDelegate.html",
    "title": "Delegate OnixEventInputs.OnInputResetDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnInputResetDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling input reset events. public delegate void OnixEventInputs.OnInputResetDelegate()"
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnPlayerInputTickDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnPlayerInputTickDelegate.html",
    "title": "Delegate OnixEventInputs.OnPlayerInputTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnPlayerInputTickDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling player input tick events. public delegate void OnixEventInputs.OnPlayerInputTickDelegate(PlayerMovementInputs movementInputs) Parameters movementInputs PlayerMovementInputs Delegate for handling player input tick events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnRawTextCharDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnRawTextCharDelegate.html",
    "title": "Delegate OnixEventInputs.OnRawTextCharDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnRawTextCharDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling raw text character input events. public delegate void OnixEventInputs.OnRawTextCharDelegate(int character, int scancode, bool isDown, bool isControlDown, bool isShiftDown, bool isAltDown) Parameters character int Delegate for handling raw text character input events. scancode int Delegate for handling raw text character input events. isDown bool Delegate for handling raw text character input events. isControlDown bool Delegate for handling raw text character input events. isShiftDown bool Delegate for handling raw text character input events. isAltDown bool Delegate for handling raw text character input events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnShouldCancelAnalogMovementDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnShouldCancelAnalogMovementDelegate.html",
    "title": "Delegate OnixEventInputs.OnShouldCancelAnalogMovementDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnShouldCancelAnalogMovementDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling analog movement cancellation events. public delegate bool OnixEventInputs.OnShouldCancelAnalogMovementDelegate() Returns bool Delegate for handling analog movement cancellation events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.OnTextCharDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.OnTextCharDelegate.html",
    "title": "Delegate OnixEventInputs.OnTextCharDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnTextCharDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling text character input events. public delegate void OnixEventInputs.OnTextCharDelegate(char character) Parameters character char Delegate for handling text character input events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventInputs.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventInputs.html",
    "title": "Class OnixEventInputs | Onix Plugin Documentation",
    "summary": "Class OnixEventInputs Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for input actions, analog movement, player input ticks, text input, and input reset. public class OnixEventInputs Inheritance object OnixEventInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events Input Occurs when an input event is received. public event OnixEventInputs.OnInputDelegate? Input Event Type OnixEventInputs.OnInputDelegate InputHud Occurs when a HUD input event is received. public event OnixEventInputs.OnInputDelegate? InputHud Event Type OnixEventInputs.OnInputDelegate InputReset Occurs when input is reset. public event OnixEventInputs.OnInputResetDelegate? InputReset Event Type OnixEventInputs.OnInputResetDelegate OnPlayerInputTick Occurs every tick with the player's movement inputs. public event OnixEventInputs.OnPlayerInputTickDelegate? OnPlayerInputTick Event Type OnixEventInputs.OnPlayerInputTickDelegate RawTextChar Occurs when a raw text character input event is received. public event OnixEventInputs.OnRawTextCharDelegate? RawTextChar Event Type OnixEventInputs.OnRawTextCharDelegate ShouldCancelAnalogMovement Occurs when analog movement should be cancelled. public event OnixEventInputs.OnShouldCancelAnalogMovementDelegate? ShouldCancelAnalogMovement Event Type OnixEventInputs.OnShouldCancelAnalogMovementDelegate TextChar Occurs when a text character is input. public event OnixEventInputs.OnTextCharDelegate? TextChar Event Type OnixEventInputs.OnTextCharDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServer.OnPlayerChat.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServer.OnPlayerChat.html",
    "title": "Delegate OnixEventLocalServer.OnPlayerChat | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServer.OnPlayerChat Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling player chat events on the local server. public delegate bool OnixEventLocalServer.OnPlayerChat(ServerPlayer player, string message) Parameters player ServerPlayer Delegate for handling player chat events on the local server. message string Delegate for handling player chat events on the local server. Returns bool Delegate for handling player chat events on the local server."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServer.OnTickDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServer.OnTickDelegate.html",
    "title": "Delegate OnixEventLocalServer.OnTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServer.OnTickDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling local server tick events. public delegate void OnixEventLocalServer.OnTickDelegate()"
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServer.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServer.html",
    "title": "Class OnixEventLocalServer | Onix Plugin Documentation",
    "summary": "Class OnixEventLocalServer Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for local server tick and player chat events. public class OnixEventLocalServer Inheritance object OnixEventLocalServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Player Provides access to player-related local server events. public OnixEventLocalServerPlayer Player { get; } Property Value OnixEventLocalServerPlayer Events PlayerChatEvent Occurs when a player sends a chat message on the local server. public event OnixEventLocalServer.OnPlayerChat? PlayerChatEvent Event Type OnixEventLocalServer.OnPlayerChat Tick Occurs every tick on the local server. public event OnixEventLocalServer.OnTickDelegate? Tick Event Type OnixEventLocalServer.OnTickDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player attacks an entity. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate(ServerPlayer player, Entity entity) Parameters player ServerPlayer Delegate for handling when a player attacks an entity. entity Entity Delegate for handling when a player attacks an entity. Returns bool Delegate for handling when a player attacks an entity."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player breaks a block. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate(ServerPlayer player, BlockPos position, BlockFace face) Parameters player ServerPlayer Delegate for handling when a player breaks a block. position BlockPos Delegate for handling when a player breaks a block. face BlockFace Delegate for handling when a player breaks a block. Returns bool Delegate for handling when a player breaks a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player builds a block. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate(ServerPlayer player, BlockPos position, BlockFace face) Parameters player ServerPlayer Delegate for handling when a player builds a block. position BlockPos Delegate for handling when a player builds a block. face BlockFace Delegate for handling when a player builds a block. Returns bool Delegate for handling when a player builds a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player interacts with an entity. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate(ServerPlayer player, Entity entity, Vec3 rayHit) Parameters player ServerPlayer Delegate for handling when a player interacts with an entity. entity Entity Delegate for handling when a player interacts with an entity. rayHit Vec3 Delegate for handling when a player interacts with an entity. Returns bool Delegate for handling when a player interacts with an entity."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player starts breaking a block. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate(ServerPlayer player, BlockPos position, BlockFace face) Parameters player ServerPlayer Delegate for handling when a player starts breaking a block. position BlockPos Delegate for handling when a player starts breaking a block. face BlockFace Delegate for handling when a player starts breaking a block. Returns bool Delegate for handling when a player starts breaking a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player stops using an item. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate(ServerPlayer player) Parameters player ServerPlayer Delegate for handling when a player stops using an item. Returns bool Delegate for handling when a player stops using an item."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player uses an item. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate(ServerPlayer player, ItemStack stack) Parameters player ServerPlayer Delegate for handling when a player uses an item. stack ItemStack Delegate for handling when a player uses an item. Returns bool Delegate for handling when a player uses an item."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate.html",
    "title": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player uses an item on a block. public delegate bool OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate(ServerPlayer player, ItemStack stack, BlockPos position, BlockFace face, Vec3 rayHit, Block block) Parameters player ServerPlayer Delegate for handling when a player uses an item on a block. stack ItemStack Delegate for handling when a player uses an item on a block. position BlockPos Delegate for handling when a player uses an item on a block. face BlockFace Delegate for handling when a player uses an item on a block. rayHit Vec3 Delegate for handling when a player uses an item on a block. block Block Delegate for handling when a player uses an item on a block. Returns bool Delegate for handling when a player uses an item on a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventLocalServerPlayer.html",
    "title": "Class OnixEventLocalServerPlayer | Onix Plugin Documentation",
    "summary": "Class OnixEventLocalServerPlayer Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for local server player actions such as breaking, building, using items, and interacting with entities. public class OnixEventLocalServerPlayer Inheritance object OnixEventLocalServerPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events Attack Occurs when a player attacks an entity. public event OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate? Attack Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate BreakBlock Occurs when a player breaks a block. public event OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate? BreakBlock Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate BuildBlock Occurs when a player builds a block. public event OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate? BuildBlock Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate Interact Occurs when a player interacts with an entity. public event OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate? Interact Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate StartBreakBlock Occurs when a player starts breaking a block. public event OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate? StartBreakBlock Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate StopUsingItem Occurs when a player stops using an item. public event OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate? StopUsingItem Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate UseItem Occurs when a player uses an item. public event OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate? UseItem Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate UseItemOn Occurs when a player uses an item on a block. public event OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate? UseItemOn Event Type OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerAttackDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerAttackDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerAttackDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerAttackDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player attacks an entity. public delegate bool OnixEventPlayer.OnLocalServerPlayerAttackDelegate(LocalPlayer player, Entity entity) Parameters player LocalPlayer Delegate for handling when a player attacks an entity. entity Entity Delegate for handling when a player attacks an entity. Returns bool Delegate for handling when a player attacks an entity."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player breaks a block. public delegate bool OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate(LocalPlayer player, BlockPos position, BlockFace face) Parameters player LocalPlayer Delegate for handling when a player breaks a block. position BlockPos Delegate for handling when a player breaks a block. face BlockFace Delegate for handling when a player breaks a block. Returns bool Delegate for handling when a player breaks a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player builds a block. public delegate bool OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate(LocalPlayer player, BlockPos position, BlockFace face) Parameters player LocalPlayer Delegate for handling when a player builds a block. position BlockPos Delegate for handling when a player builds a block. face BlockFace Delegate for handling when a player builds a block. Returns bool Delegate for handling when a player builds a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerInteractDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerInteractDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerInteractDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerInteractDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player interacts with an entity. public delegate bool OnixEventPlayer.OnLocalServerPlayerInteractDelegate(LocalPlayer player, Entity entity, Vec3 rayHit) Parameters player LocalPlayer Delegate for handling when a player interacts with an entity. entity Entity Delegate for handling when a player interacts with an entity. rayHit Vec3 Delegate for handling when a player interacts with an entity. Returns bool Delegate for handling when a player interacts with an entity."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player starts breaking a block. public delegate bool OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate(LocalPlayer player, BlockPos position, BlockFace face) Parameters player LocalPlayer Delegate for handling when a player starts breaking a block. position BlockPos Delegate for handling when a player starts breaking a block. face BlockFace Delegate for handling when a player starts breaking a block. Returns bool Delegate for handling when a player starts breaking a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player stops using an item. public delegate bool OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate(LocalPlayer player) Parameters player LocalPlayer Delegate for handling when a player stops using an item. Returns bool Delegate for handling when a player stops using an item."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerUseItemDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerUseItemDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player uses an item. public delegate bool OnixEventPlayer.OnLocalServerPlayerUseItemDelegate(LocalPlayer player, ItemStack stack) Parameters player LocalPlayer Delegate for handling when a player uses an item. stack ItemStack Delegate for handling when a player uses an item. Returns bool Delegate for handling when a player uses an item."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate.html",
    "title": "Delegate OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling when a player uses an item on a block. public delegate bool OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate(LocalPlayer player, ItemStack stack, BlockPos position, BlockFace face, Vec3 rayHit, Block block) Parameters player LocalPlayer Delegate for handling when a player uses an item on a block. stack ItemStack Delegate for handling when a player uses an item on a block. position BlockPos Delegate for handling when a player uses an item on a block. face BlockFace Delegate for handling when a player uses an item on a block. rayHit Vec3 Delegate for handling when a player uses an item on a block. block Block Delegate for handling when a player uses an item on a block. Returns bool Delegate for handling when a player uses an item on a block."
  },
  "docs/OnixRuntime.Api.Events.OnixEventPlayer.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventPlayer.html",
    "title": "Class OnixEventPlayer | Onix Plugin Documentation",
    "summary": "Class OnixEventPlayer Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for local player actions such as breaking, building, using items, and interacting with entities. public class OnixEventPlayer Inheritance object OnixEventPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events Attack Occurs when a player attacks an entity. public event OnixEventPlayer.OnLocalServerPlayerAttackDelegate? Attack Event Type OnixEventPlayer.OnLocalServerPlayerAttackDelegate BreakBlock Occurs when a player breaks a block. public event OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate? BreakBlock Event Type OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate BuildBlock Occurs when a player builds a block. public event OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate? BuildBlock Event Type OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate Interact Occurs when a player interacts with an entity. public event OnixEventPlayer.OnLocalServerPlayerInteractDelegate? Interact Event Type OnixEventPlayer.OnLocalServerPlayerInteractDelegate StartBreakBlock Occurs when a player starts breaking a block. public event OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate? StartBreakBlock Event Type OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate StopUsingItem Occurs when a player stops using an item. public event OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate? StopUsingItem Event Type OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate UseItem Occurs when a player uses an item. public event OnixEventPlayer.OnLocalServerPlayerUseItemDelegate? UseItem Event Type OnixEventPlayer.OnLocalServerPlayerUseItemDelegate UseItemOn Occurs when a player uses an item on a block. public event OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate? UseItemOn Event Type OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnHudRenderDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnHudRenderDelegate.html",
    "title": "Delegate OnixEventRendering.OnHudRenderDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnHudRenderDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnHudRenderDelegate(RendererGame gfx, float delta) Parameters gfx RendererGame delta float"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDelegate.html",
    "title": "Delegate OnixEventRendering.OnPreRenderScreenDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnPreRenderScreenDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnPreRenderScreenDelegate(RendererGame gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererGame delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnPreRenderScreenDirect2DDelegate(RendererDirect2D gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererDirect2D delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderHudDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderHudDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderHudDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderHudDirect2DDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderHudDirect2DDelegate(RendererDirect2D gfx, float delta) Parameters gfx RendererDirect2D delta float"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderScreenDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderScreenDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderScreenDelegate(RendererGame gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererGame delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderScreenDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderScreenDirect2DDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderScreenDirect2DDelegate(RendererDirect2D gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererDirect2D delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.OnWorldRenderDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.OnWorldRenderDelegate.html",
    "title": "Delegate OnixEventRendering.OnWorldRenderDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnWorldRenderDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnWorldRenderDelegate(RendererWorld gfx, float delta) Parameters gfx RendererWorld delta float"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.ShouldHideScreenDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.ShouldHideScreenDelegate.html",
    "title": "Delegate OnixEventRendering.ShouldHideScreenDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.ShouldHideScreenDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public delegate bool OnixEventRendering.ShouldHideScreenDelegate(string screenName) Parameters screenName string Returns bool"
  },
  "docs/OnixRuntime.Api.Events.OnixEventRendering.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventRendering.html",
    "title": "Class OnixEventRendering | Onix Plugin Documentation",
    "summary": "Class OnixEventRendering Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public class OnixEventRendering Inheritance object OnixEventRendering Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events HudRender public event OnixEventRendering.OnHudRenderDelegate? HudRender Event Type OnixEventRendering.OnHudRenderDelegate PreRenderScreen public event OnixEventRendering.OnPreRenderScreenDelegate? PreRenderScreen Event Type OnixEventRendering.OnPreRenderScreenDelegate PreRenderScreenDirect2D public event OnixEventRendering.OnPreRenderScreenDirect2DDelegate? PreRenderScreenDirect2D Event Type OnixEventRendering.OnPreRenderScreenDirect2DDelegate RenderHudDirect2D public event OnixEventRendering.OnRenderHudDirect2DDelegate? RenderHudDirect2D Event Type OnixEventRendering.OnRenderHudDirect2DDelegate RenderScreen public event OnixEventRendering.OnRenderScreenDelegate? RenderScreen Event Type OnixEventRendering.OnRenderScreenDelegate RenderScreenDirect2D public event OnixEventRendering.OnRenderScreenDirect2DDelegate? RenderScreenDirect2D Event Type OnixEventRendering.OnRenderScreenDirect2DDelegate ShouldHideScreen public event OnixEventRendering.ShouldHideScreenDelegate? ShouldHideScreen Event Type OnixEventRendering.ShouldHideScreenDelegate WorldRender public event OnixEventRendering.OnWorldRenderDelegate? WorldRender Event Type OnixEventRendering.OnWorldRenderDelegate"
  },
  "docs/OnixRuntime.Api.Events.OnixEvents.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEvents.html",
    "title": "Class OnixEvents | Onix Plugin Documentation",
    "summary": "Class OnixEvents Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll public class OnixEvents Inheritance object OnixEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Audio public OnixEventAudio Audio { get; } Property Value OnixEventAudio Common public OnixEventCommon Common { get; } Property Value OnixEventCommon Gui public OnixEventGui Gui { get; } Property Value OnixEventGui Input public OnixEventInputs Input { get; } Property Value OnixEventInputs LocalServer public OnixEventLocalServer LocalServer { get; } Property Value OnixEventLocalServer Player public OnixEventPlayer Player { get; } Property Value OnixEventPlayer Rendering public OnixEventRendering Rendering { get; } Property Value OnixEventRendering Session public OnixEventsSession Session { get; } Property Value OnixEventsSession"
  },
  "docs/OnixRuntime.Api.Events.OnixEventsSession.OnDimensionChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventsSession.OnDimensionChangedDelegate.html",
    "title": "Delegate OnixEventsSession.OnDimensionChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnDimensionChangedDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling dimension change events. public delegate void OnixEventsSession.OnDimensionChangedDelegate(Dimension dimension) Parameters dimension Dimension Delegate for handling dimension change events."
  },
  "docs/OnixRuntime.Api.Events.OnixEventsSession.OnSessionJoinedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventsSession.OnSessionJoinedDelegate.html",
    "title": "Delegate OnixEventsSession.OnSessionJoinedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnSessionJoinedDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling join events. public delegate void OnixEventsSession.OnSessionJoinedDelegate()"
  },
  "docs/OnixRuntime.Api.Events.OnixEventsSession.OnSessionLeftDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventsSession.OnSessionLeftDelegate.html",
    "title": "Delegate OnixEventsSession.OnSessionLeftDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnSessionLeftDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling leave events. public delegate void OnixEventsSession.OnSessionLeftDelegate()"
  },
  "docs/OnixRuntime.Api.Events.OnixEventsSession.OnTickDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventsSession.OnTickDelegate.html",
    "title": "Delegate OnixEventsSession.OnTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnTickDelegate Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Delegate for handling game tick events. public delegate void OnixEventsSession.OnTickDelegate()"
  },
  "docs/OnixRuntime.Api.Events.OnixEventsSession.html": {
    "href": "docs/OnixRuntime.Api.Events.OnixEventsSession.html",
    "title": "Class OnixEventsSession | Onix Plugin Documentation",
    "summary": "Class OnixEventsSession Namespace OnixRuntime.Api.Events Assembly OnixRuntime.dll Provides events for session tick, join, leave, and game pause/resume. public class OnixEventsSession Inheritance object OnixEventsSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chat public OnixEventSessionChat Chat { get; } Property Value OnixEventSessionChat ModalForm public OnixEventSessionModalForms ModalForm { get; } Property Value OnixEventSessionModalForms Title public OnixEventSessionTitle Title { get; } Property Value OnixEventSessionTitle Events DimensionChanged Occurs when the dimension changes. public event OnixEventsSession.OnDimensionChangedDelegate? DimensionChanged Event Type OnixEventsSession.OnDimensionChangedDelegate SessionJoined Note: This event will be called after you start listening to it or when you get enabled even if the world was not just joined. That means you can rely on it to know when the player is in a world. public event OnixEventsSession.OnSessionJoinedDelegate? SessionJoined Event Type OnixEventsSession.OnSessionJoinedDelegate SessionLeft Occurs when the session leaves a world. public event OnixEventsSession.OnSessionLeftDelegate? SessionLeft Event Type OnixEventsSession.OnSessionLeftDelegate Tick Occurs every game tick. public event OnixEventsSession.OnTickDelegate? Tick Event Type OnixEventsSession.OnTickDelegate"
  },
  "docs/OnixRuntime.Api.Events.Session.GameTitleType.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.GameTitleType.html",
    "title": "Enum GameTitleType | Onix Plugin Documentation",
    "summary": "Enum GameTitleType Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Types of game titles that can be displayed to the player. public enum GameTitleType Fields Actionbar = 4 Clear = 0 Reset = 1 Subtitle = 3 Times = 5 Title = 2"
  },
  "docs/OnixRuntime.Api.Events.Session.IModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.IModalFormReplyer.html",
    "title": "Interface IModalFormReplyer | Onix Plugin Documentation",
    "summary": "Interface IModalFormReplyer Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Represents a replyer for modal form events, providing form ID, response JSON, and reply status. public interface IModalFormReplyer Properties FormId Gets the form ID associated with the modal form. uint FormId { get; } Property Value uint HasBeenRepliedAlready Gets whether the form has already been replied to. bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson Gets the response JSON for the modal form. string ResponseJson { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.Events.Session.ModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.ModalFormReplyer.html",
    "title": "Class ModalFormReplyer | Onix Plugin Documentation",
    "summary": "Class ModalFormReplyer Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Implements IModalFormReplyer for modal form requests. public class ModalFormReplyer : IModalFormReplyer Inheritance object ModalFormReplyer Implements IModalFormReplyer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FormId Gets the form ID associated with the modal form. public uint FormId { get; } Property Value uint HasBeenRepliedAlready Gets whether the form has already been replied to. public bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson Gets the response JSON for the modal form. public string ResponseJson { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling chat message about to be sent events. public delegate string OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate(string message) Parameters message string Delegate for handling chat message about to be sent events. Returns string Delegate for handling chat message about to be sent events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnReceiveDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnReceiveDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnReceiveDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnReceiveDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling chat message receive events. public delegate bool OnixEventSessionChat.OnReceiveDelegate(string message, string username, string xuid, ChatMessageType type) Parameters message string Delegate for handling chat message receive events. username string Delegate for handling chat message receive events. xuid string Delegate for handling chat message receive events. type ChatMessageType Delegate for handling chat message receive events. Returns bool Delegate for handling chat message receive events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendCommandDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendCommandDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnSendCommandDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnSendCommandDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling chat command send events. public delegate bool OnixEventSessionChat.OnSendCommandDelegate(string command) Parameters command string Delegate for handling chat command send events. Returns bool Delegate for handling chat command send events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendMessageDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendMessageDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnSendMessageDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnSendMessageDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling chat message send events. public delegate bool OnixEventSessionChat.OnSendMessageDelegate(string message) Parameters message string Delegate for handling chat message send events. Returns bool Delegate for handling chat message send events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionChat.html",
    "title": "Class OnixEventSessionChat | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionChat Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Provides events for chat message receiving, sending, and command sending in a session. public class OnixEventSessionChat Inheritance object OnixEventSessionChat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events ChatScreenMessageAboutToBeSent return the message to sent (return what you're given essentially) or \"\" to cancel sending the message. public event OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate? ChatScreenMessageAboutToBeSent Event Type OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate Receive Occurs when a chat message is received. public event OnixEventSessionChat.OnReceiveDelegate? Receive Event Type OnixEventSessionChat.OnReceiveDelegate Send Occurs when a chat message is sent. public event OnixEventSessionChat.OnSendMessageDelegate? Send Event Type OnixEventSessionChat.OnSendMessageDelegate SendCommand Occurs when a chat command is sent. public event OnixEventSessionChat.OnSendCommandDelegate? SendCommand Event Type OnixEventSessionChat.OnSendCommandDelegate"
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormRequestDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormRequestDelegate.html",
    "title": "Delegate OnixEventSessionModalForms.OnRawModalFormRequestDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionModalForms.OnRawModalFormRequestDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling raw modal form request events. public delegate bool OnixEventSessionModalForms.OnRawModalFormRequestDelegate(uint formId, string requestJson, IModalFormReplyer replyer) Parameters formId uint Delegate for handling raw modal form request events. requestJson string Delegate for handling raw modal form request events. replyer IModalFormReplyer Delegate for handling raw modal form request events. Returns bool Delegate for handling raw modal form request events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormResponseDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormResponseDelegate.html",
    "title": "Delegate OnixEventSessionModalForms.OnRawModalFormResponseDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionModalForms.OnRawModalFormResponseDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling raw modal form response events. public delegate bool OnixEventSessionModalForms.OnRawModalFormResponseDelegate(uint formId, string responseJson, IModalFormReplyer replyer) Parameters formId uint Delegate for handling raw modal form response events. responseJson string Delegate for handling raw modal form response events. replyer IModalFormReplyer Delegate for handling raw modal form response events. Returns bool Delegate for handling raw modal form response events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.html",
    "title": "Class OnixEventSessionModalForms | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionModalForms Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Provides events for modal form requests and responses in a session. public class OnixEventSessionModalForms Inheritance object OnixEventSessionModalForms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events RawModalFormRequest Occurs when a raw modal form request is received. public event OnixEventSessionModalForms.OnRawModalFormRequestDelegate? RawModalFormRequest Event Type OnixEventSessionModalForms.OnRawModalFormRequestDelegate RawModalFormResponse Occurs when a raw modal form response is received. public event OnixEventSessionModalForms.OnRawModalFormResponseDelegate? RawModalFormResponse Event Type OnixEventSessionModalForms.OnRawModalFormResponseDelegate"
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnActionBarChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnActionBarChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnActionBarChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnActionBarChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling actionbar change events. public delegate bool OnixEventSessionTitle.OnActionBarChangedDelegate(string actionbar) Parameters actionbar string Delegate for handling actionbar change events. Returns bool Delegate for handling actionbar change events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnAnyTitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnAnyTitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnAnyTitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnAnyTitleChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling any title change event. public delegate void OnixEventSessionTitle.OnAnyTitleChangedDelegate(GameTitleType type, string title) Parameters type GameTitleType Delegate for handling any title change event. title string Delegate for handling any title change event."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnClearedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnClearedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnClearedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnClearedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling title clear events. public delegate bool OnixEventSessionTitle.OnClearedDelegate() Returns bool Delegate for handling title clear events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnResetDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnResetDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnResetDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnResetDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling title reset events. public delegate bool OnixEventSessionTitle.OnResetDelegate() Returns bool Delegate for handling title reset events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnSubtitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnSubtitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnSubtitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnSubtitleChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling subtitle change events. public delegate bool OnixEventSessionTitle.OnSubtitleChangedDelegate(string subtitle) Parameters subtitle string Delegate for handling subtitle change events. Returns bool Delegate for handling subtitle change events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTimesChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTimesChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling title timing change events (as TimeSpan). public delegate void OnixEventSessionTitle.OnTimesChangedDelegate(TimeSpan fadeInTime, TimeSpan duration, TimeSpan fadeOutTime) Parameters fadeInTime TimeSpan Delegate for handling title timing change events (as TimeSpan). duration TimeSpan Delegate for handling title timing change events (as TimeSpan). fadeOutTime TimeSpan Delegate for handling title timing change events (as TimeSpan)."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesTickChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesTickChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTimesTickChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTimesTickChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling raw title timing change events (in ticks). public delegate void OnixEventSessionTitle.OnTimesTickChangedDelegate(int fadeInTicks, int durationTicks, int fadeOutTicks) Parameters fadeInTicks int Delegate for handling raw title timing change events (in ticks). durationTicks int Delegate for handling raw title timing change events (in ticks). fadeOutTicks int Delegate for handling raw title timing change events (in ticks)."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTitleChangedDelegate Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Delegate for handling title change events. public delegate bool OnixEventSessionTitle.OnTitleChangedDelegate(string title) Parameters title string Delegate for handling title change events. Returns bool Delegate for handling title change events."
  },
  "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.OnixEventSessionTitle.html",
    "title": "Class OnixEventSessionTitle | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionTitle Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Provides events for handling title, subtitle, actionbar, and timing changes in a session. public class OnixEventSessionTitle Inheritance object OnixEventSessionTitle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events ActionBar Occurs when the actionbar is changed. public event OnixEventSessionTitle.OnActionBarChangedDelegate? ActionBar Event Type OnixEventSessionTitle.OnActionBarChangedDelegate AnyTitleChanged Occurs when any title, subtitle, or actionbar is changed. public event OnixEventSessionTitle.OnAnyTitleChangedDelegate? AnyTitleChanged Event Type OnixEventSessionTitle.OnAnyTitleChangedDelegate Cleared Occurs when the title is cleared. public event OnixEventSessionTitle.OnClearedDelegate? Cleared Event Type OnixEventSessionTitle.OnClearedDelegate Reset Occurs when the title is reset. public event OnixEventSessionTitle.OnResetDelegate? Reset Event Type OnixEventSessionTitle.OnResetDelegate Subtitle Occurs when the subtitle is changed. public event OnixEventSessionTitle.OnSubtitleChangedDelegate? Subtitle Event Type OnixEventSessionTitle.OnSubtitleChangedDelegate TimesChanged Occurs when the title timing is changed (as TimeSpan). public event OnixEventSessionTitle.OnTimesChangedDelegate? TimesChanged Event Type OnixEventSessionTitle.OnTimesChangedDelegate TimesTickChanged Occurs when the title timing is changed (in ticks). public event OnixEventSessionTitle.OnTimesTickChangedDelegate? TimesTickChanged Event Type OnixEventSessionTitle.OnTimesTickChangedDelegate Title Occurs when the main title is changed. public event OnixEventSessionTitle.OnTitleChangedDelegate? Title Event Type OnixEventSessionTitle.OnTitleChangedDelegate"
  },
  "docs/OnixRuntime.Api.Events.Session.RawModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.RawModalFormReplyer.html",
    "title": "Class RawModalFormReplyer | Onix Plugin Documentation",
    "summary": "Class RawModalFormReplyer Namespace OnixRuntime.Api.Events.Session Assembly OnixRuntime.dll Implements IModalFormReplyer for modal form responses. public class RawModalFormReplyer : IModalFormReplyer Inheritance object RawModalFormReplyer Implements IModalFormReplyer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FormId Gets the form ID associated with the modal form. public uint FormId { get; } Property Value uint HasBeenRepliedAlready Gets whether the form has already been replied to. public bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson Gets the response JSON for the modal form. public string ResponseJson { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.Events.Session.html": {
    "href": "docs/OnixRuntime.Api.Events.Session.html",
    "title": "Namespace OnixRuntime.Api.Events.Session | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Events.Session Classes ModalFormReplyer Implements IModalFormReplyer for modal form requests. OnixEventSessionChat Provides events for chat message receiving, sending, and command sending in a session. OnixEventSessionModalForms Provides events for modal form requests and responses in a session. OnixEventSessionTitle Provides events for handling title, subtitle, actionbar, and timing changes in a session. RawModalFormReplyer Implements IModalFormReplyer for modal form responses. Interfaces IModalFormReplyer Represents a replyer for modal form events, providing form ID, response JSON, and reply status. Enums GameTitleType Types of game titles that can be displayed to the player. Delegates OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate Delegate for handling chat message about to be sent events. OnixEventSessionChat.OnReceiveDelegate Delegate for handling chat message receive events. OnixEventSessionChat.OnSendCommandDelegate Delegate for handling chat command send events. OnixEventSessionChat.OnSendMessageDelegate Delegate for handling chat message send events. OnixEventSessionModalForms.OnRawModalFormRequestDelegate Delegate for handling raw modal form request events. OnixEventSessionModalForms.OnRawModalFormResponseDelegate Delegate for handling raw modal form response events. OnixEventSessionTitle.OnActionBarChangedDelegate Delegate for handling actionbar change events. OnixEventSessionTitle.OnAnyTitleChangedDelegate Delegate for handling any title change event. OnixEventSessionTitle.OnClearedDelegate Delegate for handling title clear events. OnixEventSessionTitle.OnResetDelegate Delegate for handling title reset events. OnixEventSessionTitle.OnSubtitleChangedDelegate Delegate for handling subtitle change events. OnixEventSessionTitle.OnTimesChangedDelegate Delegate for handling title timing change events (as TimeSpan). OnixEventSessionTitle.OnTimesTickChangedDelegate Delegate for handling raw title timing change events (in ticks). OnixEventSessionTitle.OnTitleChangedDelegate Delegate for handling title change events."
  },
  "docs/OnixRuntime.Api.Events.html": {
    "href": "docs/OnixRuntime.Api.Events.html",
    "title": "Namespace OnixRuntime.Api.Events | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Events Classes OnixEventAudio Provides events for client audio related things. OnixEventCommon Provides common event hooks for tick, rendering, input, and chat message events. OnixEventGui Provides events for GUI screens such as container screens and chat screens. OnixEventInputs Provides events for input actions, analog movement, player input ticks, text input, and input reset. OnixEventLocalServer Provides events for local server tick and player chat events. OnixEventLocalServerPlayer Provides events for local server player actions such as breaking, building, using items, and interacting with entities. OnixEventPlayer Provides events for local player actions such as breaking, building, using items, and interacting with entities. OnixEventRendering OnixEvents OnixEventsSession Provides events for session tick, join, leave, and game pause/resume. Delegates OnixEventAudio.OnSoundPlayedInUiDelegate OnixEventAudio.OnSoundPlayedInWorldDelegate OnixEventGui.OnChatScreenGetClientCommandsDelegate Delegate for handling requests to get client chat commands. OnixEventGui.OnChatScreenTabCompleteDelegate Delegate for handling chat screen tab completion events. OnixEventGui.OnChatScreenTickDelegate Delegate for handling chat screen tick events. OnixEventGui.OnContainerScreenTickDelegate Delegate for handling container screen tick events. OnixEventInputs.OnInputDelegate Delegate for handling input events (keyboard, mouse, etc.). OnixEventInputs.OnInputResetDelegate Delegate for handling input reset events. OnixEventInputs.OnPlayerInputTickDelegate Delegate for handling player input tick events. OnixEventInputs.OnRawTextCharDelegate Delegate for handling raw text character input events. OnixEventInputs.OnShouldCancelAnalogMovementDelegate Delegate for handling analog movement cancellation events. OnixEventInputs.OnTextCharDelegate Delegate for handling text character input events. OnixEventLocalServer.OnPlayerChat Delegate for handling player chat events on the local server. OnixEventLocalServer.OnTickDelegate Delegate for handling local server tick events. OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate Delegate for handling when a player attacks an entity. OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate Delegate for handling when a player breaks a block. OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate Delegate for handling when a player builds a block. OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate Delegate for handling when a player interacts with an entity. OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate Delegate for handling when a player starts breaking a block. OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate Delegate for handling when a player stops using an item. OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate Delegate for handling when a player uses an item. OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate Delegate for handling when a player uses an item on a block. OnixEventPlayer.OnLocalServerPlayerAttackDelegate Delegate for handling when a player attacks an entity. OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate Delegate for handling when a player breaks a block. OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate Delegate for handling when a player builds a block. OnixEventPlayer.OnLocalServerPlayerInteractDelegate Delegate for handling when a player interacts with an entity. OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate Delegate for handling when a player starts breaking a block. OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate Delegate for handling when a player stops using an item. OnixEventPlayer.OnLocalServerPlayerUseItemDelegate Delegate for handling when a player uses an item. OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate Delegate for handling when a player uses an item on a block. OnixEventRendering.OnHudRenderDelegate OnixEventRendering.OnPreRenderScreenDelegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate OnixEventRendering.OnRenderHudDirect2DDelegate OnixEventRendering.OnRenderScreenDelegate OnixEventRendering.OnRenderScreenDirect2DDelegate OnixEventRendering.OnWorldRenderDelegate OnixEventRendering.ShouldHideScreenDelegate OnixEventsSession.OnDimensionChangedDelegate Delegate for handling dimension change events. OnixEventsSession.OnSessionJoinedDelegate Delegate for handling join events. OnixEventsSession.OnSessionLeftDelegate Delegate for handling leave events. OnixEventsSession.OnTickDelegate Delegate for handling game tick events."
  },
  "docs/OnixRuntime.Api.Inputs.ControllerMappingLayout.html": {
    "href": "docs/OnixRuntime.Api.Inputs.ControllerMappingLayout.html",
    "title": "Class ControllerMappingLayout | Onix Plugin Documentation",
    "summary": "Class ControllerMappingLayout Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll public class ControllerMappingLayout : InputMappingLayout Inheritance object MemoryAddressContainer InputMappingLayout ControllerMappingLayout Inherited Members InputMappingLayout.Current InputMappingLayout.Default InputMappingLayout.GetKeys(string) InputMappingLayout.GetDefaultKeys(string) InputMappingLayout.HasKey(string, InputKey) InputMappingLayout.HasDefaultKey(string, InputKey) InputMappingLayout.IsKeyAssigned(InputKey) InputMappingLayout.IsDefaultKeyAssigned(InputKey) InputMappingLayout.Forward InputMappingLayout.Back InputMappingLayout.Left InputMappingLayout.Right InputMappingLayout.Jump InputMappingLayout.Sneak InputMappingLayout.Sprint InputMappingLayout.Inventory InputMappingLayout.Drop InputMappingLayout.Use InputMappingLayout.Attack InputMappingLayout.PickBlock InputMappingLayout.Chat InputMappingLayout.Hotbar1 InputMappingLayout.Hotbar2 InputMappingLayout.Hotbar3 InputMappingLayout.Hotbar4 InputMappingLayout.Hotbar5 InputMappingLayout.Hotbar6 InputMappingLayout.Hotbar7 InputMappingLayout.Hotbar8 InputMappingLayout.Hotbar9 InputMappingLayout.Hotbar InputMappingLayout.GetHotbar(int) InputMappingLayout.GetDefaultHotbar(int) InputMappingLayout.TogglePerspective InputMappingLayout.MobEffects InputMappingLayout.Command InputMappingLayout.CopyCoordinates InputMappingLayout.CopyFacingCoordinates InputMappingLayout.Emote InputMappingLayout.Screenshot InputMappingLayout.MenuTabLeft InputMappingLayout.MenuTabRight InputMappingLayout.MenuCancel InputMappingLayout.Pause InputMappingLayout.CycleItemLeft InputMappingLayout.CycleItemRight InputMappingLayout.DefaultForward InputMappingLayout.DefaultBack InputMappingLayout.DefaultLeft InputMappingLayout.DefaultRight InputMappingLayout.DefaultJump InputMappingLayout.DefaultSneak InputMappingLayout.DefaultSprint InputMappingLayout.DefaultInventory InputMappingLayout.DefaultDrop InputMappingLayout.DefaultUse InputMappingLayout.DefaultAttack InputMappingLayout.DefaultPickBlock InputMappingLayout.DefaultChat InputMappingLayout.DefaultHotbar1 InputMappingLayout.DefaultHotbar2 InputMappingLayout.DefaultHotbar3 InputMappingLayout.DefaultHotbar4 InputMappingLayout.DefaultHotbar5 InputMappingLayout.DefaultHotbar6 InputMappingLayout.DefaultHotbar7 InputMappingLayout.DefaultHotbar8 InputMappingLayout.DefaultHotbar9 InputMappingLayout.DefaultHotbar InputMappingLayout.DefaultTogglePerspective InputMappingLayout.DefaultMobEffects InputMappingLayout.DefaultCommand InputMappingLayout.DefaultCopyCoordinates InputMappingLayout.DefaultCopyFacingCoordinates InputMappingLayout.DefaultEmote InputMappingLayout.DefaultScreenshot InputMappingLayout.DefaultMenuTabLeft InputMappingLayout.DefaultMenuTabRight InputMappingLayout.DefaultMenuCancel InputMappingLayout.DefaultPause InputMappingLayout.DefaultCycleItemLeft InputMappingLayout.DefaultCycleItemRight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsController protected override bool IsController { get; } Property Value bool"
  },
  "docs/OnixRuntime.Api.Inputs.GameInputHandler.html": {
    "href": "docs/OnixRuntime.Api.Inputs.GameInputHandler.html",
    "title": "Class GameInputHandler | Onix Plugin Documentation",
    "summary": "Class GameInputHandler Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Handles game input state, including key and controller mappings, and provides methods to query input status. public class GameInputHandler : MemoryAddressContainer Inheritance object MemoryAddressContainer GameInputHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ControllerMapping Gets the current controller mapping layout. public ControllerMappingLayout ControllerMapping { get; } Property Value ControllerMappingLayout CurrentGameplay Gets the current gameplay mode as a string. public string CurrentGameplay { get; } Property Value string IsFlying Gets whether the player is currently flying. public bool IsFlying { get; } Property Value bool KeyboardMapping Gets the current keyboard mapping layout. public KeyboardMappingLayout KeyboardMapping { get; } Property Value KeyboardMappingLayout Methods IsAAllDown(InputKey[]) Checks if all of the specified keys are currently pressed down. public bool IsAAllDown(InputKey[] keys) Parameters keys InputKey[] Returns bool IsAnyDown(InputKey[]) Checks if any of the specified keys are currently pressed down. public bool IsAnyDown(InputKey[] keys) Parameters keys InputKey[] Returns bool IsDown(InputKey) Checks if the specified key is currently pressed down. public bool IsDown(InputKey key) Parameters key InputKey Returns bool"
  },
  "docs/OnixRuntime.Api.Inputs.InputKey.ClickType.html": {
    "href": "docs/OnixRuntime.Api.Inputs.InputKey.ClickType.html",
    "title": "Enum InputKey.ClickType | Onix Plugin Documentation",
    "summary": "Enum InputKey.ClickType Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Enumerates all possible mouse click types. public enum InputKey.ClickType Fields Back = 5 Mouse button 5 in game, back button on the side. Forward = 6 Mouse button 6 in game, front button on the side. Left = 1 Left click button. Middle = 3 Scroll wheel click. None = 0 No clicks. Right = 2 Right click button. Scroll = 4 Scroll up or down."
  },
  "docs/OnixRuntime.Api.Inputs.InputKey.GamepadInputType.html": {
    "href": "docs/OnixRuntime.Api.Inputs.InputKey.GamepadInputType.html",
    "title": "Enum InputKey.GamepadInputType | Onix Plugin Documentation",
    "summary": "Enum InputKey.GamepadInputType Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Enumerates all possible gamepad input types. public enum InputKey.GamepadInputType Fields GamepadA = 1 GamepadB = 2 GamepadDPadDown = 6 GamepadDPadLeft = 7 GamepadDPadRight = 8 GamepadDPadUp = 5 GamepadLB = 11 GamepadLeftStick = 9 GamepadLeftTrigger = -100 GamepadMenu = 14 GamepadRB = 12 GamepadRightStick = 10 GamepadRightTrigger = -99 GamepadView = 13 GamepadX = 3 GamepadY = 4 None = 0"
  },
  "docs/OnixRuntime.Api.Inputs.InputKey.Type.html": {
    "href": "docs/OnixRuntime.Api.Inputs.InputKey.Type.html",
    "title": "Enum InputKey.Type | Onix Plugin Documentation",
    "summary": "Enum InputKey.Type Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Enumerates all possible input key types, including keyboard, mouse, and gamepad keys. public enum InputKey.Type Fields A = 65 Add = 107 Alt = 18 Application = 93 B = 66 Backspace = 8 C = 67 CapsLock = 20 Clear = 12 ContextMenu = 93 Ctrl = 17 D = 68 Decimal = 110 Delete = 46 Divide = 111 Down = 40 E = 69 End = 35 Enter = 13 Escape = 27 Execute = 43 F = 70 F1 = 112 F10 = 121 F11 = 122 F12 = 123 F13 = 124 F14 = 125 F15 = 126 F16 = 127 F17 = 128 F18 = 129 F19 = 130 F2 = 113 F20 = 131 F21 = 132 F22 = 133 F23 = 134 F24 = 135 F3 = 114 F4 = 115 F5 = 116 F6 = 117 F7 = 118 F8 = 119 F9 = 120 G = 71 GamepadA = -199 GamepadB = -198 GamepadDPadDown = -194 GamepadDPadLeft = -193 GamepadDPadRight = -192 GamepadDPadUp = -195 GamepadLB = -189 GamepadLT = -300 GamepadLeftStick = -191 GamepadMenu = -186 GamepadRB = -188 GamepadRT = -299 GamepadRightStick = -190 GamepadView = -187 GamepadX = -197 GamepadY = -196 H = 72 Help = 47 Home = 36 I = 73 Insert = 45 J = 74 K = 75 L = 76 LAlt = 164 LCtrl = 162 LMB = -99 LShift = 160 LWindows = 91 Left = 37 M = 77 MMB = -97 MouseButton5 = -95 MouseButton6 = -94 Multiply = 106 N = 78 None = 0 Num0 = 48 Num1 = 49 Num2 = 50 Num3 = 51 Num4 = 52 Num5 = 53 Num6 = 54 Num7 = 55 Num8 = 56 Num9 = 57 Numlock = 144 Numpad0 = 96 Numpad1 = 97 Numpad2 = 98 Numpad3 = 99 Numpad4 = 100 Numpad5 = 101 Numpad6 = 102 Numpad7 = 103 Numpad8 = 104 Numpad9 = 105 O = 79 P = 80 PageDown = 34 PageUp = 33 Pause = 19 Print = 42 PrintScreen = 44 Q = 81 R = 82 RAlt = 165 RCtrl = 163 RMB = -98 RShift = 161 RWindows = 92 Return = 13 Right = 39 S = 83 Scroll = -96 ScrollLock = 145 Select = 41 Separator = 108 Shift = 16 Sleep = 95 Space = 32 Substract = 109 T = 84 Tab = 9 U = 85 UnknownMB1 = -93 Up = 38 V = 86 W = 87 X = 88 Y = 89 Z = 90"
  },
  "docs/OnixRuntime.Api.Inputs.InputKey.html": {
    "href": "docs/OnixRuntime.Api.Inputs.InputKey.html",
    "title": "Class InputKey | Onix Plugin Documentation",
    "summary": "Class InputKey Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Represents an input key, including keyboard, mouse, and gamepad keys, and provides utility methods for key type conversion and comparison. public class InputKey Inheritance object InputKey Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InputKey(GamepadInputType) Initializes a new InputKey from a gamepad input type. public InputKey(InputKey.GamepadInputType input) Parameters input InputKey.GamepadInputType InputKey(Type) Initializes a new InputKey from a key type. public InputKey(InputKey.Type input) Parameters input InputKey.Type Fields None public static readonly InputKey None Field Value InputKey Properties ClickInput Gets the mouse click type for this key, if applicable. public InputKey.ClickType ClickInput { get; } Property Value InputKey.ClickType GamepadInput Gets the gamepad input type for this key, if applicable. public InputKey.GamepadInputType GamepadInput { get; } Property Value InputKey.GamepadInputType IsGamepad Gets whether this key is a gamepad button. public bool IsGamepad { get; } Property Value bool IsMouse Gets whether this key is a mouse button. public bool IsMouse { get; } Property Value bool Value Gets the key type value for this input key. public InputKey.Type Value { get; } Property Value InputKey.Type Methods Equals(object?) Determines whether this InputKey is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() Gets the hash code for this InputKey. public override int GetHashCode() Returns int ToString() Returns a string representation of this InputKey. public override string ToString() Returns string Operators operator ==(InputKey, InputKey) Compares two InputKey instances for equality. public static bool operator ==(InputKey lhs, InputKey rhs) Parameters lhs InputKey rhs InputKey Returns bool operator ==(InputKey, GamepadInputType) Compares an InputKey to a gamepad input type for equality. public static bool operator ==(InputKey lhs, InputKey.GamepadInputType rhs) Parameters lhs InputKey rhs InputKey.GamepadInputType Returns bool operator ==(InputKey, Type) Compares an InputKey to a key type for equality, with support for modifier key aliases. public static bool operator ==(InputKey lhs, InputKey.Type rhs) Parameters lhs InputKey rhs InputKey.Type Returns bool operator !=(InputKey, InputKey) Compares two InputKey instances for inequality. public static bool operator !=(InputKey lhs, InputKey rhs) Parameters lhs InputKey rhs InputKey Returns bool operator !=(InputKey, GamepadInputType) Compares an InputKey to a gamepad input type for inequality. public static bool operator !=(InputKey lhs, InputKey.GamepadInputType rhs) Parameters lhs InputKey rhs InputKey.GamepadInputType Returns bool operator !=(InputKey, Type) Compares an InputKey to a key type for inequality. public static bool operator !=(InputKey lhs, InputKey.Type rhs) Parameters lhs InputKey rhs InputKey.Type Returns bool"
  },
  "docs/OnixRuntime.Api.Inputs.InputMappingLayout.html": {
    "href": "docs/OnixRuntime.Api.Inputs.InputMappingLayout.html",
    "title": "Class InputMappingLayout | Onix Plugin Documentation",
    "summary": "Class InputMappingLayout Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Represents a mapping layout for input actions to keys, supporting both keyboard and controller mappings. public class InputMappingLayout : MemoryAddressContainer Inheritance object MemoryAddressContainer InputMappingLayout Derived ControllerMappingLayout KeyboardMappingLayout Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attack Gets the input keys for the attack action. public InputKey[] Attack { get; } Property Value InputKey[] Back Gets the input keys for the back action. public InputKey[] Back { get; } Property Value InputKey[] Chat Gets the input keys for the chat action. public InputKey[] Chat { get; } Property Value InputKey[] Command Gets the input keys for the command action. public InputKey[] Command { get; } Property Value InputKey[] CopyCoordinates Gets the input keys for copying coordinates. public InputKey[] CopyCoordinates { get; } Property Value InputKey[] CopyFacingCoordinates Gets the input keys for copying facing coordinates. public InputKey[] CopyFacingCoordinates { get; } Property Value InputKey[] Current Gets the current mapping of actions to input keys. public IReadOnlyDictionary<string, InputKey[]> Current { get; } Property Value IReadOnlyDictionary<string, InputKey[]> CycleItemLeft Controller only public InputKey[] CycleItemLeft { get; } Property Value InputKey[] CycleItemRight Controller only public InputKey[] CycleItemRight { get; } Property Value InputKey[] Default Gets the default mapping of actions to input keys. public IReadOnlyDictionary<string, InputKey[]> Default { get; } Property Value IReadOnlyDictionary<string, InputKey[]> DefaultAttack Gets the default input keys for the attack action. public InputKey[] DefaultAttack { get; } Property Value InputKey[] DefaultBack Gets the default input keys for the back action. public InputKey[] DefaultBack { get; } Property Value InputKey[] DefaultChat Gets the default input keys for the chat action. public InputKey[] DefaultChat { get; } Property Value InputKey[] DefaultCommand Gets the default input keys for the command action. public InputKey[] DefaultCommand { get; } Property Value InputKey[] DefaultCopyCoordinates Gets the default input keys for copying coordinates. public InputKey[] DefaultCopyCoordinates { get; } Property Value InputKey[] DefaultCopyFacingCoordinates Gets the default input keys for copying facing coordinates. public InputKey[] DefaultCopyFacingCoordinates { get; } Property Value InputKey[] DefaultCycleItemLeft Controller only public InputKey[] DefaultCycleItemLeft { get; } Property Value InputKey[] DefaultCycleItemRight Controller only public InputKey[] DefaultCycleItemRight { get; } Property Value InputKey[] DefaultDrop Gets the default input keys for the drop action. public InputKey[] DefaultDrop { get; } Property Value InputKey[] DefaultEmote Gets the default input keys for the emote action. public InputKey[] DefaultEmote { get; } Property Value InputKey[] DefaultForward Gets the default input keys for the forward action. public InputKey[] DefaultForward { get; } Property Value InputKey[] DefaultHotbar Gets the default input keys for all hotbar slots. public InputKey[][] DefaultHotbar { get; } Property Value InputKey[][] DefaultHotbar1 Gets the default input keys for the first hotbar slot. public InputKey[] DefaultHotbar1 { get; } Property Value InputKey[] DefaultHotbar2 Gets the default input keys for the second hotbar slot. public InputKey[] DefaultHotbar2 { get; } Property Value InputKey[] DefaultHotbar3 Gets the default input keys for the third hotbar slot. public InputKey[] DefaultHotbar3 { get; } Property Value InputKey[] DefaultHotbar4 Gets the default input keys for the fourth hotbar slot. public InputKey[] DefaultHotbar4 { get; } Property Value InputKey[] DefaultHotbar5 Gets the default input keys for the fifth hotbar slot. public InputKey[] DefaultHotbar5 { get; } Property Value InputKey[] DefaultHotbar6 Gets the default input keys for the sixth hotbar slot. public InputKey[] DefaultHotbar6 { get; } Property Value InputKey[] DefaultHotbar7 Gets the default input keys for the seventh hotbar slot. public InputKey[] DefaultHotbar7 { get; } Property Value InputKey[] DefaultHotbar8 Gets the default input keys for the eighth hotbar slot. public InputKey[] DefaultHotbar8 { get; } Property Value InputKey[] DefaultHotbar9 Gets the default input keys for the ninth hotbar slot. public InputKey[] DefaultHotbar9 { get; } Property Value InputKey[] DefaultInventory Gets the default input keys for the inventory action. public InputKey[] DefaultInventory { get; } Property Value InputKey[] DefaultJump Gets the default input keys for the jump action. public InputKey[] DefaultJump { get; } Property Value InputKey[] DefaultLeft Gets the default input keys for the left action. public InputKey[] DefaultLeft { get; } Property Value InputKey[] DefaultMenuCancel Gets the default input keys for cancelling the menu. public InputKey[] DefaultMenuCancel { get; } Property Value InputKey[] DefaultMenuTabLeft Gets the default input keys for moving the menu tab left. public InputKey[] DefaultMenuTabLeft { get; } Property Value InputKey[] DefaultMenuTabRight Gets the default input keys for moving the menu tab right. public InputKey[] DefaultMenuTabRight { get; } Property Value InputKey[] DefaultMobEffects Gets the default input keys for mob effects. public InputKey[] DefaultMobEffects { get; } Property Value InputKey[] DefaultPause Gets the default input keys for pausing the game. public InputKey[] DefaultPause { get; } Property Value InputKey[] DefaultPickBlock Gets the default input keys for the pick block action. public InputKey[] DefaultPickBlock { get; } Property Value InputKey[] DefaultRight Gets the default input keys for the right action. public InputKey[] DefaultRight { get; } Property Value InputKey[] DefaultScreenshot Gets the default input keys for taking a screenshot. public InputKey[] DefaultScreenshot { get; } Property Value InputKey[] DefaultSneak Gets the default input keys for the sneak action. public InputKey[] DefaultSneak { get; } Property Value InputKey[] DefaultSprint Gets the default input keys for the sprint action. public InputKey[] DefaultSprint { get; } Property Value InputKey[] DefaultTogglePerspective Gets the default input keys for toggling perspective. public InputKey[] DefaultTogglePerspective { get; } Property Value InputKey[] DefaultUse Gets the default input keys for the use action. public InputKey[] DefaultUse { get; } Property Value InputKey[] Drop Gets the input keys for the drop action. public InputKey[] Drop { get; } Property Value InputKey[] Emote Gets the input keys for the emote action. public InputKey[] Emote { get; } Property Value InputKey[] Forward Gets the input keys for the forward action. public InputKey[] Forward { get; } Property Value InputKey[] Hotbar Gets the input keys for all hotbar slots. public InputKey[][] Hotbar { get; } Property Value InputKey[][] Hotbar1 Gets the input keys for the first hotbar slot. public InputKey[] Hotbar1 { get; } Property Value InputKey[] Hotbar2 Gets the input keys for the second hotbar slot. public InputKey[] Hotbar2 { get; } Property Value InputKey[] Hotbar3 Gets the input keys for the third hotbar slot. public InputKey[] Hotbar3 { get; } Property Value InputKey[] Hotbar4 Gets the input keys for the fourth hotbar slot. public InputKey[] Hotbar4 { get; } Property Value InputKey[] Hotbar5 Gets the input keys for the fifth hotbar slot. public InputKey[] Hotbar5 { get; } Property Value InputKey[] Hotbar6 Gets the input keys for the sixth hotbar slot. public InputKey[] Hotbar6 { get; } Property Value InputKey[] Hotbar7 Gets the input keys for the seventh hotbar slot. public InputKey[] Hotbar7 { get; } Property Value InputKey[] Hotbar8 Gets the input keys for the eighth hotbar slot. public InputKey[] Hotbar8 { get; } Property Value InputKey[] Hotbar9 Gets the input keys for the ninth hotbar slot. public InputKey[] Hotbar9 { get; } Property Value InputKey[] Inventory Gets the input keys for the inventory action. public InputKey[] Inventory { get; } Property Value InputKey[] IsController protected virtual bool IsController { get; } Property Value bool Jump Gets the input keys for the jump action. public InputKey[] Jump { get; } Property Value InputKey[] Left Gets the input keys for the left action. public InputKey[] Left { get; } Property Value InputKey[] MenuCancel Gets the input keys for cancelling the menu. public InputKey[] MenuCancel { get; } Property Value InputKey[] MenuTabLeft Gets the input keys for moving the menu tab left. public InputKey[] MenuTabLeft { get; } Property Value InputKey[] MenuTabRight Gets the input keys for moving the menu tab right. public InputKey[] MenuTabRight { get; } Property Value InputKey[] MobEffects Gets the input keys for mob effects. public InputKey[] MobEffects { get; } Property Value InputKey[] Pause Gets the input keys for pausing the game. public InputKey[] Pause { get; } Property Value InputKey[] PickBlock Gets the input keys for the pick block action. public InputKey[] PickBlock { get; } Property Value InputKey[] Right Gets the input keys for the right action. public InputKey[] Right { get; } Property Value InputKey[] Screenshot Gets the input keys for taking a screenshot. public InputKey[] Screenshot { get; } Property Value InputKey[] Sneak Gets the input keys for the sneak action. public InputKey[] Sneak { get; } Property Value InputKey[] Sprint Gets the input keys for the sprint action. public InputKey[] Sprint { get; } Property Value InputKey[] TogglePerspective Gets the input keys for toggling perspective. public InputKey[] TogglePerspective { get; } Property Value InputKey[] Use Gets the input keys for the use action. public InputKey[] Use { get; } Property Value InputKey[] Methods GetDefaultHotbar(int) Gets the default input keys for the specified hotbar slot. public InputKey[] GetDefaultHotbar(int slot) Parameters slot int Returns InputKey[] GetDefaultKeys(string) Gets the default input keys assigned to the specified action. public InputKey[] GetDefaultKeys(string action) Parameters action string Returns InputKey[] GetHotbar(int) Gets the input keys for the specified hotbar slot. public InputKey[] GetHotbar(int slot) Parameters slot int Returns InputKey[] GetKeys(string) Gets the input keys currently assigned to the specified action. public InputKey[] GetKeys(string action) Parameters action string Returns InputKey[] HasDefaultKey(string, InputKey) Checks if the specified key is assigned to the given action in the default mapping. public bool HasDefaultKey(string action, InputKey key) Parameters action string key InputKey Returns bool HasKey(string, InputKey) Checks if the specified key is assigned to the given action in the current mapping. public bool HasKey(string action, InputKey key) Parameters action string key InputKey Returns bool IsDefaultKeyAssigned(InputKey) Checks if the specified key is assigned to any action in the default mapping. public bool IsDefaultKeyAssigned(InputKey key) Parameters key InputKey Returns bool IsKeyAssigned(InputKey) Checks if the specified key is assigned to any action in the current mapping. public bool IsKeyAssigned(InputKey key) Parameters key InputKey Returns bool"
  },
  "docs/OnixRuntime.Api.Inputs.KeyboardMappingLayout.html": {
    "href": "docs/OnixRuntime.Api.Inputs.KeyboardMappingLayout.html",
    "title": "Class KeyboardMappingLayout | Onix Plugin Documentation",
    "summary": "Class KeyboardMappingLayout Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll public class KeyboardMappingLayout : InputMappingLayout Inheritance object MemoryAddressContainer InputMappingLayout KeyboardMappingLayout Inherited Members InputMappingLayout.Current InputMappingLayout.Default InputMappingLayout.GetKeys(string) InputMappingLayout.GetDefaultKeys(string) InputMappingLayout.HasKey(string, InputKey) InputMappingLayout.HasDefaultKey(string, InputKey) InputMappingLayout.IsKeyAssigned(InputKey) InputMappingLayout.IsDefaultKeyAssigned(InputKey) InputMappingLayout.Forward InputMappingLayout.Back InputMappingLayout.Left InputMappingLayout.Right InputMappingLayout.Jump InputMappingLayout.Sneak InputMappingLayout.Sprint InputMappingLayout.Inventory InputMappingLayout.Drop InputMappingLayout.Use InputMappingLayout.Attack InputMappingLayout.PickBlock InputMappingLayout.Chat InputMappingLayout.Hotbar1 InputMappingLayout.Hotbar2 InputMappingLayout.Hotbar3 InputMappingLayout.Hotbar4 InputMappingLayout.Hotbar5 InputMappingLayout.Hotbar6 InputMappingLayout.Hotbar7 InputMappingLayout.Hotbar8 InputMappingLayout.Hotbar9 InputMappingLayout.Hotbar InputMappingLayout.GetHotbar(int) InputMappingLayout.GetDefaultHotbar(int) InputMappingLayout.TogglePerspective InputMappingLayout.MobEffects InputMappingLayout.Command InputMappingLayout.CopyCoordinates InputMappingLayout.CopyFacingCoordinates InputMappingLayout.Emote InputMappingLayout.Screenshot InputMappingLayout.MenuTabLeft InputMappingLayout.MenuTabRight InputMappingLayout.MenuCancel InputMappingLayout.Pause InputMappingLayout.CycleItemLeft InputMappingLayout.CycleItemRight InputMappingLayout.DefaultForward InputMappingLayout.DefaultBack InputMappingLayout.DefaultLeft InputMappingLayout.DefaultRight InputMappingLayout.DefaultJump InputMappingLayout.DefaultSneak InputMappingLayout.DefaultSprint InputMappingLayout.DefaultInventory InputMappingLayout.DefaultDrop InputMappingLayout.DefaultUse InputMappingLayout.DefaultAttack InputMappingLayout.DefaultPickBlock InputMappingLayout.DefaultChat InputMappingLayout.DefaultHotbar1 InputMappingLayout.DefaultHotbar2 InputMappingLayout.DefaultHotbar3 InputMappingLayout.DefaultHotbar4 InputMappingLayout.DefaultHotbar5 InputMappingLayout.DefaultHotbar6 InputMappingLayout.DefaultHotbar7 InputMappingLayout.DefaultHotbar8 InputMappingLayout.DefaultHotbar9 InputMappingLayout.DefaultHotbar InputMappingLayout.DefaultTogglePerspective InputMappingLayout.DefaultMobEffects InputMappingLayout.DefaultCommand InputMappingLayout.DefaultCopyCoordinates InputMappingLayout.DefaultCopyFacingCoordinates InputMappingLayout.DefaultEmote InputMappingLayout.DefaultScreenshot InputMappingLayout.DefaultMenuTabLeft InputMappingLayout.DefaultMenuTabRight InputMappingLayout.DefaultMenuCancel InputMappingLayout.DefaultPause InputMappingLayout.DefaultCycleItemLeft InputMappingLayout.DefaultCycleItemRight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsController protected override bool IsController { get; } Property Value bool"
  },
  "docs/OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.html": {
    "href": "docs/OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.html",
    "title": "Enum OnixTextbox.CursorVisibility | Onix Plugin Documentation",
    "summary": "Enum OnixTextbox.CursorVisibility Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Specifies the visibility state of the textbox cursor. public enum OnixTextbox.CursorVisibility Fields BlinkingWhenFocused = 0 The cursor is visible and blinking when the textbox is focused. Hidden = 2 The cursor is not visible. Normal = 0 The cursor is visible and blinking when the textbox is focused. Static = 1 The cursor is visible but not blinking."
  },
  "docs/OnixRuntime.Api.Inputs.OnixTextbox.TextSelection.html": {
    "href": "docs/OnixRuntime.Api.Inputs.OnixTextbox.TextSelection.html",
    "title": "Class OnixTextbox.TextSelection | Onix Plugin Documentation",
    "summary": "Class OnixTextbox.TextSelection Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Class to represent a selection of text in an OnixTextbox. public class OnixTextbox.TextSelection Inheritance object OnixTextbox.TextSelection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextSelection(int, int) Creates a new text selection. public TextSelection(int begin, int end) Parameters begin int The beginning index of the new selection. end int The end index of the new selection. Properties Begin The beginning index of the selection. public int Begin { get; } Property Value int End The end index of the selection. public int End { get; } Property Value int"
  },
  "docs/OnixRuntime.Api.Inputs.OnixTextbox.TextValidity.html": {
    "href": "docs/OnixRuntime.Api.Inputs.OnixTextbox.TextValidity.html",
    "title": "Enum OnixTextbox.TextValidity | Onix Plugin Documentation",
    "summary": "Enum OnixTextbox.TextValidity Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Enum to represent the validity of the text inside an OnixTextbox. public enum OnixTextbox.TextValidity Fields Invalid = 1 The program has checked the current text is an invalid input. This puts a red outline around the textbox. None = 0 The program has not checked the current text for validity. The outline will appear white. Valid = 2 The program has checked the current text is a valid input. This puts a green outline around the textbox."
  },
  "docs/OnixRuntime.Api.Inputs.OnixTextbox.html": {
    "href": "docs/OnixRuntime.Api.Inputs.OnixTextbox.html",
    "title": "Class OnixTextbox | Onix Plugin Documentation",
    "summary": "Class OnixTextbox Namespace OnixRuntime.Api.Inputs Assembly OnixRuntime.dll Convenience class to have the basic functionality of a textbox without doing the hard work that comes with it. You're welcome. Set IsFocused to true to allow the user to start typing in it. don't forget that the user won't be able to use their keyboard until IsFocused is false! Use the Render function to render the textbox. public class OnixTextbox : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixTextbox Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixTextbox(int, string?, string?) Creates a new OnixTextbox. public OnixTextbox(int maxLength = 128, string? text = null, string? placeholder = null) Parameters maxLength int text string placeholder string Properties AllowDecimal Property to allow or disallow decimal numbers e.g. 6.9 public bool AllowDecimal { get; set; } Property Value bool AllowHex Property to make the numeric textbox hexadecimal e.g. DEADBEEF public bool AllowHex { get; set; } Property Value bool AsNumberDouble Gets the text as a double, use this instead of double.Parse() because it takes care of the AllowHex and anything else that might not exist yet. public double AsNumberDouble { get; } Property Value double AsNumberFloat Gets the text as a float, use this instead of float.Parse() because it takes care of the AllowHex and anything else that might not exist yet. public float AsNumberFloat { get; } Property Value float AsNumberInt Gets the text as an integer, use this instead of int.Parse() because it takes care of the AllowHex and anything else that might not exist yet. public int AsNumberInt { get; } Property Value int AsNumberLong Gets the text as an long, use this instead of long.Parse() because it takes care of the AllowHex and anything else that might not exist yet. public long AsNumberLong { get; } Property Value long CursorIndex The index of the cursor in the textbox. public int CursorIndex { get; set; } Property Value int DisplayText The text that should be displayed, this is mainly used for password mode. public string DisplayText { get; } Property Value string HasConfirmedText Will return true once after the user has pressed enter. public bool HasConfirmedText { get; } Property Value bool HasNewText Will return true if the text is different from the last time this property was checked. public bool HasNewText { get; } Property Value bool IsEmpty If the textbox is empty or not. Setting this to true will clear the textbox, false does nothing. public bool IsEmpty { get; set; } Property Value bool IsFocused If the textbox is focused or not. If this is true the user will be able to type in it with no extra setup needed. don't FORGET TO SET IT BACK TO FALSE OTHERWISE THE USER WON'T BE ABLE TO USE THEIR KEYBOARD! public bool IsFocused { get; set; } Property Value bool IsNumericOnly Property to make the textbox only accept numeric values. public bool IsNumericOnly { get; set; } Property Value bool IsPassword Property to make the textbox a password field. public bool IsPassword { get; set; } Property Value bool MaxLength Property for the maximum amount of characters in the textbox. public int MaxLength { get; set; } Property Value int PlaceholderText The placeholder text that will show in light gray when the textbox is empty. public string PlaceholderText { get; set; } Property Value string Selection The selection of text in the textbox or null. public OnixTextbox.TextSelection? Selection { get; set; } Property Value OnixTextbox.TextSelection Text The raw text inside the textbox. public string Text { get; set; } Property Value string Validity The validity of the text inside the textbox. Setting it to Valid will make the outline green, setting it to Invalid will make the outline red. Having it to None will have the normal outline color. public OnixTextbox.TextValidity Validity { get; set; } Property Value OnixTextbox.TextValidity Methods Clear() Clears the textbox text/selection. public void Clear() Render(Rect, CursorVisibility) Renders the textbox in the specified position using the onix theme. public void Render(Rect position, OnixTextbox.CursorVisibility cursorVisibility = CursorVisibility.BlinkingWhenFocused) Parameters position Rect The position of the textbox. cursorVisibility OnixTextbox.CursorVisibility The visibility of the cursor. Render(Rect, ColorF, ColorF, ColorF, CursorVisibility) Renders the textbox in the specified position using your own colors. public void Render(Rect position, ColorF backgroundColor, ColorF textColor, ColorF outlineColor, OnixTextbox.CursorVisibility cursorVisibility) Parameters position Rect The position of the textbox. backgroundColor ColorF The color of the background. textColor ColorF The color of the text. outlineColor ColorF The color of the outline. cursorVisibility OnixTextbox.CursorVisibility The visibility of the cursor."
  },
  "docs/OnixRuntime.Api.Inputs.html": {
    "href": "docs/OnixRuntime.Api.Inputs.html",
    "title": "Namespace OnixRuntime.Api.Inputs | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Inputs Classes ControllerMappingLayout GameInputHandler Handles game input state, including key and controller mappings, and provides methods to query input status. InputKey Represents an input key, including keyboard, mouse, and gamepad keys, and provides utility methods for key type conversion and comparison. InputMappingLayout Represents a mapping layout for input actions to keys, supporting both keyboard and controller mappings. KeyboardMappingLayout OnixTextbox Convenience class to have the basic functionality of a textbox without doing the hard work that comes with it. You're welcome. Set IsFocused to true to allow the user to start typing in it. don't forget that the user won't be able to use their keyboard until IsFocused is false! Use the Render function to render the textbox. OnixTextbox.TextSelection Class to represent a selection of text in an OnixTextbox. Enums InputKey.ClickType Enumerates all possible mouse click types. InputKey.GamepadInputType Enumerates all possible gamepad input types. InputKey.Type Enumerates all possible input key types, including keyboard, mouse, and gamepad keys. OnixTextbox.CursorVisibility Specifies the visibility state of the textbox cursor. OnixTextbox.TextValidity Enum to represent the validity of the text inside an OnixTextbox."
  },
  "docs/OnixRuntime.Api.Internal.MemoryAddressContainer.html": {
    "href": "docs/OnixRuntime.Api.Internal.MemoryAddressContainer.html",
    "title": "Class MemoryAddressContainer | Onix Plugin Documentation",
    "summary": "Class MemoryAddressContainer Namespace OnixRuntime.Api.Internal Assembly OnixRuntime.dll public class MemoryAddressContainer Inheritance object MemoryAddressContainer Derived GameAudioEngine ConnectionInfo LocalGameServer RealmWorld Entity PlayerMovementInputs ServerConnectedPlayer GameInputHandler InputMappingLayout Item ItemContainer ItemRegistry GameMeshBuilder PackAssetLoader PackBase PackInstance PackManager PackManifest ResourcePackBase ChatMessage ChatScreen ContainerScreen GameGuiInfo GameUIElement Biome Block BlockEntity BlockRegistry BlockState Dimension RuntimeWorld Scoreboard ScoreboardObjective WorldBlocks WorldChunk WorldChunks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MemoryAddressContainer(nint) protected MemoryAddressContainer(nint currentMemoryAddress) Parameters currentMemoryAddress nint"
  },
  "docs/OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.html": {
    "href": "docs/OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.html",
    "title": "Class MightOwnMemoryAddressContainer | Onix Plugin Documentation",
    "summary": "Class MightOwnMemoryAddressContainer Namespace OnixRuntime.Api.Internal Assembly OnixRuntime.dll public class MightOwnMemoryAddressContainer : IDisposable Inheritance object MightOwnMemoryAddressContainer Implements IDisposable Derived AudioPlayer PlayerSkin OnixTextbox ItemStack OnixClientScreen OnixModule OnixSetting OnixSettingListRenderer GameMesh TexturePath RaycastResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MightOwnMemoryAddressContainer(nint, nint) protected MightOwnMemoryAddressContainer(nint currentMemoryAddress, nint destructor = 0) Parameters currentMemoryAddress nint destructor nint Properties HasMemoryOwnership protected bool HasMemoryOwnership { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~MightOwnMemoryAddressContainer() protected ~MightOwnMemoryAddressContainer() SetMemoryAddressValues(nint, nint) protected void SetMemoryAddressValues(nint currentMemoryAddress, nint destructor = 0) Parameters currentMemoryAddress nint destructor nint"
  },
  "docs/OnixRuntime.Api.Internal.html": {
    "href": "docs/OnixRuntime.Api.Internal.html",
    "title": "Namespace OnixRuntime.Api.Internal | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Internal Classes MemoryAddressContainer MightOwnMemoryAddressContainer"
  },
  "docs/OnixRuntime.Api.Items.EnchantType.html": {
    "href": "docs/OnixRuntime.Api.Items.EnchantType.html",
    "title": "Enum EnchantType | Onix Plugin Documentation",
    "summary": "Enum EnchantType Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Represents an enchantment type for items, such as Protection, Sharpness, or Mending. public enum EnchantType Extension Methods EnchantmentTypesExtensions.ToNameIdentifier(EnchantType) EnchantmentTypesExtensions.ToNameTranslationKey(EnchantType) Fields AquaAffinity = 8 BaneOfArthropods = 11 BlastProtection = 3 Breach = 40 Channeling = 32 CurseOfBinding = 27 CurseOfVanishing = 28 Density = 39 DepthStrider = 7 Efficiency = 15 FeatherFalling = 2 FireAspect = 13 FireProtection = 1 Flame = 21 Fortune = 18 FrostWalker = 25 Impaling = 29 Infinity = 22 Knockback = 12 Looting = 14 Loyalty = 31 LuckOfTheSea = 23 Lure = 24 Mending = 26 Multishot = 33 Piercing = 34 Power = 19 ProjectileProtection = 4 Protection = 0 Punch = 20 QuickCharge = 35 Respiration = 6 Riptide = 30 Sharpness = 9 SilkTouch = 16 Smite = 10 SoulSpeed = 36 SwiftSneak = 37 Thorns = 5 Unbreaking = 17 WindBurst = 38"
  },
  "docs/OnixRuntime.Api.Items.EnchantmentInstance.html": {
    "href": "docs/OnixRuntime.Api.Items.EnchantmentInstance.html",
    "title": "Class EnchantmentInstance | Onix Plugin Documentation",
    "summary": "Class EnchantmentInstance Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Represents an enchantment instance with a type and level. public class EnchantmentInstance Inheritance object EnchantmentInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnchantmentInstance() Initializes a new instance of the EnchantmentInstance class with default values. public EnchantmentInstance() EnchantmentInstance(EnchantType, int) Initializes a new instance of the EnchantmentInstance class with the specified type and level. public EnchantmentInstance(EnchantType type, int level) Parameters type EnchantType level int Fields Level The level of the enchantment. public int Level Field Value int Type The type of enchantment. public EnchantType Type Field Value EnchantType"
  },
  "docs/OnixRuntime.Api.Items.EnchantmentTypesExtensions.html": {
    "href": "docs/OnixRuntime.Api.Items.EnchantmentTypesExtensions.html",
    "title": "Class EnchantmentTypesExtensions | Onix Plugin Documentation",
    "summary": "Class EnchantmentTypesExtensions Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Extension methods for EnchantType, providing identifier and translation key utilities. public static class EnchantmentTypesExtensions Inheritance object EnchantmentTypesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNameIdentifier(EnchantType) Gets the string name identifier for the enchantment type. public static string ToNameIdentifier(this EnchantType ench) Parameters ench EnchantType Returns string ToNameTranslationKey(EnchantType) Gets the translation key for the enchantment type. public static string ToNameTranslationKey(this EnchantType ench) Parameters ench EnchantType Returns string"
  },
  "docs/OnixRuntime.Api.Items.Item.html": {
    "href": "docs/OnixRuntime.Api.Items.Item.html",
    "title": "Class Item | Onix Plugin Documentation",
    "summary": "Class Item Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll public class Item : MemoryAddressContainer Inheritance object MemoryAddressContainer Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AllowsOffhand If this item can be placed in the offhand. public bool AllowsOffhand { get; } Property Value bool CanExplode If this item can be destroyed by explosions. public bool CanExplode { get; } Property Value bool CreativeCategory Which part of the creative menu this item belongs to. public CreativeItemCategory CreativeCategory { get; } Property Value CreativeItemCategory DefaultBlock If this item is a block this will be its default Block State public Block? DefaultBlock { get; } Property Value Block HasEnchantedOverlay If this item has the enchanted overlay without being enchanted (like enchanted golden apples.) public bool HasEnchantedOverlay { get; } Property Value bool Id This id might not be reliable across versions/servers. public int Id { get; } Property Value int IsFireResistant If this item cannot be destroyed by fire. public bool IsFireResistant { get; } Property Value bool IsHandEquipped If this item can be equipped from right-clicking it in your hand. public bool IsHandEquipped { get; } Property Value bool IsStackedByData If the item is stacked by data (like different colored wool.) public bool IsStackedByData { get; } Property Value bool MaxDamage How much damage does that item need to take before it breaks. Zero means that it does not have durability. public int MaxDamage { get; } Property Value int MaxStackSize What is the max size of a stack of this item. Note that this is not accurate for all items. public int MaxStackSize { get; } Property Value int MaxUseDuration How long does it take to use the item. public TimeSpan MaxUseDuration { get; } Property Value TimeSpan MaxUseDurationTicks How long does it take to use the item in game ticks. public int MaxUseDurationTicks { get; } Property Value int Name The name of the item like \"diamond_sword\" public string Name { get; } Property Value string NameFull The full name of the item like \"minecraft:diamond_sword\" public string NameFull { get; } Property Value string Namespace The namespace this item is in like \"minecraft\" public string Namespace { get; } Property Value string Methods IsValidAuxValue(int) If this item finds the aux value valid. public bool IsValidAuxValue(int value) Parameters value int The value to check Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Api.Items.ItemContainer.html": {
    "href": "docs/OnixRuntime.Api.Items.ItemContainer.html",
    "title": "Class ItemContainer | Onix Plugin Documentation",
    "summary": "Class ItemContainer Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Represents a container for item stacks, providing access to items and slots. public class ItemContainer : MemoryAddressContainer Inheritance object MemoryAddressContainer ItemContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Size Gets the number of slots in the container. public int Size { get; } Property Value int Slots Gets all item stacks in the container slots. public ItemStack[] Slots { get; } Property Value ItemStack[] Methods GetItem(int) Gets the item stack at the specified index. public ItemStack GetItem(int index) Parameters index int The index of the item to retrieve. Returns ItemStack The ItemStack at the specified index. Exceptions IndexOutOfRangeException Thrown if the index is out of range. SetItem(int, ItemStack) Sets an item in a container. public void SetItem(int index, ItemStack item) Parameters index int The index of the item to set. item ItemStack The item to be set. Remarks This function requires trust or creative mode. Exceptions IndexOutOfRangeException Thrown if the index is out of range. InsufficientTrustException Thrown when the user lacks the trust level necessary for this."
  },
  "docs/OnixRuntime.Api.Items.ItemRegistry.html": {
    "href": "docs/OnixRuntime.Api.Items.ItemRegistry.html",
    "title": "Class ItemRegistry | Onix Plugin Documentation",
    "summary": "Class ItemRegistry Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Provides access to the item registry, allowing lookup and enumeration of items at runtime. public class ItemRegistry : MemoryAddressContainer Inheritance object MemoryAddressContainer ItemRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ItemCount Gets the total number of items in the registry. public int ItemCount { get; } Property Value int RuntimeItems Gets all items currently registered at runtime. public IEnumerable<Item> RuntimeItems { get; } Property Value IEnumerable<Item> Methods GetItem(string) Gets an item by its name, or null if not found. public Item? GetItem(string name) Parameters name string The name of the item. Returns Item The item if found, otherwise null. GetItemAtIndex(int) Gets an item by its index in the registry. public Item GetItemAtIndex(int index) Parameters index int The index of the item. Returns Item The item at the specified index."
  },
  "docs/OnixRuntime.Api.Items.ItemStack.html": {
    "href": "docs/OnixRuntime.Api.Items.ItemStack.html",
    "title": "Class ItemStack | Onix Plugin Documentation",
    "summary": "Class ItemStack Namespace OnixRuntime.Api.Items Assembly OnixRuntime.dll Represents a stack of items or blocks, including count, auxiliary value, NBT data, enchantments, and utility methods. Creation must be done in a game logic thread. The other functions are fine but avoid reading from random threads/places if you don't own it. If you get it from the source every time it should be safe to read. public class ItemStack : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer ItemStack Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ItemStack() Creation must be done in a game logic thread. public ItemStack() ItemStack(Item, int, int) Creation must be done in a game logic thread. public ItemStack(Item item, int count, int aux = 0) Parameters item Item count int aux int ItemStack(ObjectTag) Creation must be done in a game logic thread. public ItemStack(ObjectTag tag) Parameters tag ObjectTag ItemStack(Block, int) Creation must be done in a game logic thread. public ItemStack(Block block, int count) Parameters block Block count int ItemStack(string, int, int) Creation must be done in a game logic thread. public ItemStack(string itemName, int count, int aux = 0) Parameters itemName string count int aux int Properties Aux Gets or sets the auxiliary value (damage, variant, etc.) for the item stack. public int Aux { get; set; } Property Value int Exceptions AccessViolationException Thrown if the ItemStack is not owned. Block Gets the block type for this stack, or null if not a block. public Block? Block { get; } Property Value Block CanBeDamaged public bool CanBeDamaged { get; } Property Value bool Count Gets or sets the number of items in the stack. public int Count { get; set; } Property Value int Exceptions AccessViolationException Thrown if the ItemStack is not owned. CustomName Gets or sets the custom name for this stack. public string CustomName { get; set; } Property Value string Exceptions AccessViolationException Thrown if the ItemStack is not owned. Damage Gets or sets the damage value for this stack. public int Damage { get; set; } Property Value int Exceptions AccessViolationException Thrown if the ItemStack is not owned. DisplayName public string DisplayName { get; } Property Value string Durability public int Durability { get; set; } Property Value int Enchants Gets or sets the enchantments for this stack. public EnchantmentInstance[] Enchants { get; set; } Property Value EnchantmentInstance[] Exceptions AccessViolationException Thrown if the ItemStack is not owned. IsEmpty Gets whether this stack is empty. public bool IsEmpty { get; } Property Value bool Item Gets the item type for this stack, or null if empty. public Item? Item { get; } Property Value Item Lore Gets or sets the lore for this stack. public string[] Lore { get; set; } Property Value string[] Exceptions AccessViolationException Thrown if the ItemStack is not owned. Nbt Gets or sets the NBT data for this stack. public ObjectTag Nbt { get; set; } Property Value ObjectTag Exceptions AccessViolationException Thrown if the ItemStack is not owned. ArgumentException Thrown if the value is not an ObjectTag or null. ShowPickup Gets or sets whether the pickup animation should be shown for this stack. You can edit this on any items, mainly useful for rendering public bool ShowPickup { get; set; } Property Value bool Methods AddEnchant(EnchantType, int) public void AddEnchant(EnchantType enchant, int level) Parameters enchant EnchantType level int AddEnchant(EnchantmentInstance) Adds an enchantment to this stack. public void AddEnchant(EnchantmentInstance enchant) Parameters enchant EnchantmentInstance Exceptions AccessViolationException Thrown if the ItemStack is not owned. AddOrUpdateEnchant(EnchantType, int) public void AddOrUpdateEnchant(EnchantType enchant, int level) Parameters enchant EnchantType level int AddOrUpdateEnchant(EnchantmentInstance) Adds or updates an enchantment on this stack. public void AddOrUpdateEnchant(EnchantmentInstance enchant) Parameters enchant EnchantmentInstance Exceptions AccessViolationException Thrown if the ItemStack is not owned. Clone() Creation/Cloning must be done in a game logic thread. public ItemStack Clone() Returns ItemStack GetEnchant(EnchantType) public EnchantmentInstance? GetEnchant(EnchantType type) Parameters type EnchantType Returns EnchantmentInstance LoadFromNbt(ObjectTag) Creation/Initialization must be done in a game logic thread. public void LoadFromNbt(ObjectTag tag) Parameters tag ObjectTag Exceptions AccessViolationException Thrown if the ItemStack is not owned. Reinit(Item, int, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(Item item, int count, int aux = 0, bool keepNbt = false) Parameters item Item count int aux int keepNbt bool Exceptions AccessViolationException Thrown if the ItemStack is not owned. Reinit(Block, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(Block block, int count, bool keepNbt = false) Parameters block Block count int keepNbt bool Exceptions AccessViolationException Thrown if the ItemStack is not owned. Reinit(string, int, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(string itemName, int count, int aux = 0, bool keepNbt = false) Parameters itemName string count int aux int keepNbt bool Exceptions AccessViolationException Thrown if the ItemStack is not owned. RemoveEnchant(EnchantType) Removes an enchantment from this stack. public bool RemoveEnchant(EnchantType type) Parameters type EnchantType Returns bool Exceptions AccessViolationException Thrown if the ItemStack is not owned. SaveToNbt() public ObjectTag SaveToNbt() Returns ObjectTag SetEmpty() Sets this stack to empty. public void SetEmpty() Exceptions AccessViolationException Thrown if the ItemStack is not owned. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Api.Items.html": {
    "href": "docs/OnixRuntime.Api.Items.html",
    "title": "Namespace OnixRuntime.Api.Items | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Items Classes EnchantmentInstance Represents an enchantment instance with a type and level. EnchantmentTypesExtensions Extension methods for EnchantType, providing identifier and translation key utilities. Item ItemContainer Represents a container for item stacks, providing access to items and slots. ItemRegistry Provides access to the item registry, allowing lookup and enumeration of items at runtime. ItemStack Represents a stack of items or blocks, including count, auxiliary value, NBT data, enchantments, and utility methods. Creation must be done in a game logic thread. The other functions are fine but avoid reading from random threads/places if you don't own it. If you get it from the source every time it should be safe to read. Enums EnchantType Represents an enchantment type for items, such as Protection, Sharpness, or Mending."
  },
  "docs/OnixRuntime.Api.Logger.Level.html": {
    "href": "docs/OnixRuntime.Api.Logger.Level.html",
    "title": "Enum Logger.Level | Onix Plugin Documentation",
    "summary": "Enum Logger.Level Namespace OnixRuntime.Api Assembly OnixRuntime.dll public enum Logger.Level Fields Debug = 1 Used for debug only information. Error = 4 Something went wrong, good luck. Info = 2 If you have information to share. None = 5 Nothing, does not ever log anything. Trace = 0 Basically used for Log debugging... Warning = 3 Anything that isn't necessarily bad but could be."
  },
  "docs/OnixRuntime.Api.Logger.html": {
    "href": "docs/OnixRuntime.Api.Logger.html",
    "title": "Class Logger | Onix Plugin Documentation",
    "summary": "Class Logger Namespace OnixRuntime.Api Assembly OnixRuntime.dll public class Logger Inheritance object Logger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Logger(string, Level, Level) Creates a new logger with the desired name Put the name as your mod's name if possible. public Logger(string name, Logger.Level chatLevel = Level.Warning, Logger.Level fileLevel = Level.Debug) Parameters name string The name of the logger to know where the logs come from. chatLevel Logger.Level The minimum level required to log to chat. fileLevel Logger.Level The minimum level required to log to the log file. Properties ChatLevel The minimum level required to log to the log file. public Logger.Level ChatLevel { get; set; } Property Value Logger.Level FileLevel The minimum level required to log to chat. public Logger.Level FileLevel { get; set; } Property Value Logger.Level Name The name of the logger to know where the logs come from. public string Name { get; } Property Value string Methods Debug(string) Calls log with the specified text and the Debug level. public void Debug(string text) Parameters text string The text to log. Error(string) Calls log with the specified text and the Error level. public void Error(string text) Parameters text string The text to log. Info(string) Calls log with the specified text and the Info level. public void Info(string text) Parameters text string The text to log. Log(Level, string) Logs text according tho the logging rules with the given message and level. public void Log(Logger.Level logLevel, string message) Parameters logLevel Logger.Level The level of importance. message string The content of the log. Trace(string) Calls log with the specified text and the Trace level. public void Trace(string text) Parameters text string The text to log. Warning(string) Calls log with the specified text and the Warning level. public void Warning(string text) Parameters text string The text to log."
  },
  "docs/OnixRuntime.Api.Maths.Angles.html": {
    "href": "docs/OnixRuntime.Api.Maths.Angles.html",
    "title": "Struct Angles | Onix Plugin Documentation",
    "summary": "Struct Angles Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a pair of angles (Yaw, Pitch) and provides vector-like operations and utilities for angle manipulation. public struct Angles : IEquatable<Angles> Implements IEquatable<Angles> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Angles() Initializes a new instance of the Angles struct with zero yaw and pitch. public Angles() Angles(float, float) Initializes a new instance of the Angles struct with the specified yaw and pitch. public Angles(float yaw, float pitch) Parameters yaw float The yaw component. pitch float The pitch component. Fields Pitch The pitch component of the angles. public float Pitch Field Value float Yaw The yaw component of the angles. public float Yaw Field Value float Properties Length Gets the Euclidean length of the angle vector. public float Length { get; } Property Value float Magnitude Gets the magnitude (length) of the angle vector. public float Magnitude { get; } Property Value float MagnitudeSqr Gets the squared magnitude of the angle vector. public float MagnitudeSqr { get; } Property Value float Normalized Gets a normalized version of this angle vector. public Angles Normalized { get; } Property Value Angles Methods Angle(Angles) Returns the angle (in radians) between this and another Angles vector. public float Angle(Angles vec) Parameters vec Angles The other Angles vector. Returns float AnglesRandom() Returns a random Angles instance with yaw and pitch in [0, 1). public static Angles AnglesRandom() Returns Angles Clamp(Angles, Angles) Clamps the components of this Angles vector between the corresponding components of two other Angles vectors. public Angles Clamp(Angles min, Angles max) Parameters min Angles The minimum Angles vector. max Angles The maximum Angles vector. Returns Angles Clamp(float, float) Clamps the components of this Angles vector between two scalar values. public Angles Clamp(float min, float max) Parameters min float The minimum scalar value. max float The maximum scalar value. Returns Angles Cross(Angles) Returns the cross product of this and another Angles vector. public float Cross(Angles vec) Parameters vec Angles The other Angles vector. Returns float Distance(Angles) Returns the Euclidean distance between this and another Angles vector. public float Distance(Angles vec) Parameters vec Angles The other Angles vector. Returns float Dot(Angles) Returns the dot product of this and another Angles vector. public float Dot(Angles vec) Parameters vec Angles The other Angles vector. Returns float Equals(Angles) Determines whether this Angles vector is equal to another Angles vector. public bool Equals(Angles other) Parameters other Angles The other Angles vector. Returns bool Equals(object?) Determines whether this Angles vector is equal to another object. public override bool Equals(object? obj) Parameters obj object The other object. Returns bool GetHashCode() Returns the hash code for this Angles vector. public override int GetHashCode() Returns int Lerp(Angles, float) Linearly interpolates between this and another Angles vector. public Angles Lerp(Angles vec, float t) Parameters vec Angles The other Angles vector. t float The interpolation factor, clamped between 0 and 1. Returns Angles Max(Angles) Returns a new Angles vector with the maximum components of this and another Angles vector. public Angles Max(Angles vec) Parameters vec Angles The other Angles vector. Returns Angles Max(float) Returns a new Angles vector with the maximum components of this and a scalar value. public Angles Max(float value) Parameters value float The scalar value. Returns Angles Min(Angles) Returns a new Angles vector with the minimum components of this and another Angles vector. public Angles Min(Angles vec) Parameters vec Angles The other Angles vector. Returns Angles Min(float) Returns a new Angles vector with the minimum components of this and a scalar value. public Angles Min(float value) Parameters value float The scalar value. Returns Angles SetDirection(float) Sets the direction of this angle vector, preserving its magnitude. public void SetDirection(float angle) Parameters angle float The angle in radians. SetMagnitude(float) Sets the magnitude (length) of this angle vector. public void SetMagnitude(float magnitude) Parameters magnitude float The new magnitude. ToString() Returns a string representation of this Angles vector. public override string ToString() Returns string ToString(string, CultureInfo?) Returns a formatted string representation of this Angles vector. public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string The format string. formatProvider CultureInfo The format provider. Returns string Operators operator +(Angles, Angles) Adds two Angles vectors. public static Angles operator +(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns Angles operator +(Angles, float) Adds a scalar value to an Angles vector. public static Angles operator +(Angles a, float b) Parameters a Angles The Angles vector. b float The scalar value. Returns Angles operator /(Angles, Angles) Divides one Angles vector by another component-wise. public static Angles operator /(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns Angles Exceptions DivideByZeroException Thrown when any component of the second Angles vector is zero. operator /(Angles, float) Divides an Angles vector by a scalar value. public static Angles operator /(Angles a, float b) Parameters a Angles The Angles vector. b float The scalar value. Returns Angles Exceptions DivideByZeroException Thrown when the scalar value is zero. operator /(float, Angles) Divides a scalar value by an Angles vector component-wise. public static Angles operator /(float a, Angles b) Parameters a float The scalar value. b Angles The Angles vector. Returns Angles operator ==(Angles, Angles) Determines whether two Angles vectors are equal. public static bool operator ==(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns bool operator !=(Angles, Angles) Determines whether two Angles vectors are not equal. public static bool operator !=(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns bool operator *(Angles, Angles) Multiplies two Angles vectors component-wise. public static Angles operator *(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns Angles operator *(Angles, float) Multiplies an Angles vector by a scalar value. public static Angles operator *(Angles a, float b) Parameters a Angles The Angles vector. b float The scalar value. Returns Angles operator *(float, Angles) Multiplies a scalar value by an Angles vector. public static Angles operator *(float a, Angles b) Parameters a float The scalar value. b Angles The Angles vector. Returns Angles operator -(Angles, Angles) Subtracts one Angles vector from another. public static Angles operator -(Angles a, Angles b) Parameters a Angles The first Angles vector. b Angles The second Angles vector. Returns Angles operator -(Angles, float) Subtracts a scalar value from an Angles vector. public static Angles operator -(Angles a, float b) Parameters a Angles The Angles vector. b float The scalar value. Returns Angles operator -(Angles) Negates an Angles vector. public static Angles operator -(Angles a) Parameters a Angles The Angles vector. Returns Angles"
  },
  "docs/OnixRuntime.Api.Maths.Angles3.html": {
    "href": "docs/OnixRuntime.Api.Maths.Angles3.html",
    "title": "Struct Angles3 | Onix Plugin Documentation",
    "summary": "Struct Angles3 Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a set of three angles (Yaw, Pitch, Roll) in 3D space, with various utility methods for manipulation and comparison. public struct Angles3 : IEquatable<Angles3> Implements IEquatable<Angles3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Angles3(Angles, float) Initializes a new instance with the specified yaw, pitch, and roll. public Angles3(Angles angles, float roll = 0) Parameters angles Angles The two-dimensional angles that will form this newly 3d angle. roll float The roll if you care to set it. Angles3(float, float, float) Initializes a new instance with the specified yaw, pitch, and roll. public Angles3(float yaw, float pitch, float roll) Parameters yaw float The yaw angle. pitch float The pitch angle. roll float The roll angle. Fields Pitch The pitch angle component. public float Pitch Field Value float Roll The roll angle component. public float Roll Field Value float Yaw The yaw angle component. public float Yaw Field Value float Properties Length Gets the Euclidean length (magnitude) of the angle vector. public float Length { get; } Property Value float Magnitude Gets the magnitude (length) of the angle vector. public float Magnitude { get; } Property Value float MagnitudeSqr Gets the squared magnitude of the angle vector. public float MagnitudeSqr { get; } Property Value float Normalized Gets a normalized version of this angle vector. public Angles3 Normalized { get; } Property Value Angles3 Methods AnglesRandom() Generates a random Angles3 instance with each component in the range [0, 1). public static Angles3 AnglesRandom() Returns Angles3 A random Angles3. Clamp(Angles3, Angles3) Clamps each component of this angle vector between the corresponding components of the specified minimum and maximum vectors. public Angles3 Clamp(Angles3 min, Angles3 max) Parameters min Angles3 The minimum vector. max Angles3 The maximum vector. Returns Angles3 The clamped angle vector. Clamp(float, float) Clamps each component of this angle vector between the specified minimum and maximum values. public Angles3 Clamp(float min, float max) Parameters min float The minimum value. max float The maximum value. Returns Angles3 The clamped angle vector. Distance(Angles3) Calculates the Euclidean distance between this angle vector and another. public float Distance(Angles3 vec) Parameters vec Angles3 The other angle vector. Returns float The distance between the two vectors. DistanceSquared(Angles3) Calculates the squared Euclidean distance between this angle vector and another. public float DistanceSquared(Angles3 vec) Parameters vec Angles3 Returns float Dot(Angles3) Calculates the dot product of this angle vector and another. public float Dot(Angles3 vec) Parameters vec Angles3 The other angle vector. Returns float The dot product. Equals(Angles3) Determines whether this instance and another specified Angles3 object have the same value. public bool Equals(Angles3 other) Parameters other Angles3 The other Angles3 to compare. Returns bool True if equal; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Angles3, float) Linearly interpolates between this angle vector and another by a given factor. public Angles3 Lerp(Angles3 vec, float t) Parameters vec Angles3 The target angle vector. t float Interpolation factor in [0, 1]. Returns Angles3 The interpolated angle vector. Max(Angles3) Returns a new angle vector with the maximum components of this and another vector. public Angles3 Max(Angles3 vec) Parameters vec Angles3 The other angle vector. Returns Angles3 The component-wise maximum. Max(float) Returns a new angle vector with each component set to the maximum of itself and the specified value. public Angles3 Max(float value) Parameters value float The value to compare to each component. Returns Angles3 The component-wise maximum. Min(Angles3) Returns a new angle vector with the minimum components of this and another vector. public Angles3 Min(Angles3 vec) Parameters vec Angles3 The other angle vector. Returns Angles3 The component-wise minimum. Min(float) Returns a new angle vector with each component set to the minimum of itself and the specified value. public Angles3 Min(float value) Parameters value float The value to compare to each component. Returns Angles3 The component-wise minimum. SetMagnitude(float) Sets the magnitude (length) of this angle vector to the specified value, preserving direction. public void SetMagnitude(float magnitude) Parameters magnitude float The new magnitude. ToString() Returns a string representation of the angle vector in the format \"Yaw Pitch Roll\". public override string ToString() Returns string A string representation of the angle vector. ToString(string, CultureInfo?) Returns a formatted string representation of the angle vector, replacing %y, %p, and %r with Yaw, Pitch, and Roll respectively. public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string The format string. formatProvider CultureInfo An optional format provider. Returns string A formatted string representation of the angle vector. Operators operator +(Angles3, Angles3) Adds two Angles3 vectors component-wise. public static Angles3 operator +(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns Angles3 operator +(Angles3, float) Adds a scalar to each component of a Angles3 vector. public static Angles3 operator +(Angles3 a, float b) Parameters a Angles3 b float Returns Angles3 operator /(Angles3, Angles3) Divides one Angles3 vector by another component-wise. public static Angles3 operator /(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns Angles3 Exceptions DivideByZeroException Thrown if any component of b is zero. operator /(Angles3, float) Divides each component of a Angles3 vector by a scalar. public static Angles3 operator /(Angles3 a, float b) Parameters a Angles3 b float Returns Angles3 Exceptions DivideByZeroException Thrown if b is zero. operator /(float, Angles3) Divides a scalar by each component of a Angles3 vector. public static Angles3 operator /(float a, Angles3 b) Parameters a float b Angles3 Returns Angles3 operator ==(Angles3, Angles3) Determines whether two Angles3 vectors are equal (within float.Epsilon). public static bool operator ==(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns bool operator !=(Angles3, Angles3) Determines whether two Angles3 vectors are not equal. public static bool operator !=(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns bool operator *(Angles3, Angles3) Multiplies two Angles3 vectors component-wise. public static Angles3 operator *(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns Angles3 operator *(Angles3, float) Multiplies each component of a Angles3 vector by a scalar. public static Angles3 operator *(Angles3 a, float b) Parameters a Angles3 b float Returns Angles3 operator *(float, Angles3) Multiplies each component of a Angles3 vector by a scalar. public static Angles3 operator *(float a, Angles3 b) Parameters a float b Angles3 Returns Angles3 operator -(Angles3, Angles3) Subtracts one Angles3 vector from another component-wise. public static Angles3 operator -(Angles3 a, Angles3 b) Parameters a Angles3 b Angles3 Returns Angles3 operator -(Angles3, float) Subtracts a scalar from each component of a Angles3 vector. public static Angles3 operator -(Angles3 a, float b) Parameters a Angles3 b float Returns Angles3 operator -(Angles3) Negates each component of a Angles3 vector. public static Angles3 operator -(Angles3 a) Parameters a Angles3 Returns Angles3"
  },
  "docs/OnixRuntime.Api.Maths.BlockPos.html": {
    "href": "docs/OnixRuntime.Api.Maths.BlockPos.html",
    "title": "Struct BlockPos | Onix Plugin Documentation",
    "summary": "Struct BlockPos Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a block position in 3D integer coordinates, with vector-like operations and utilities. public struct BlockPos : IEquatable<BlockPos> Implements IEquatable<BlockPos> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BlockPos(Vec3) Initializes a new instance of the BlockPos struct from a Vec3 by flooring its components. public BlockPos(Vec3 vec) Parameters vec Vec3 The vector to convert. BlockPos(int, int, int) Initializes a new instance of the BlockPos struct with the specified coordinates. public BlockPos(int x, int y, int z) Parameters x int The X coordinate. y int The Y coordinate. z int The Z coordinate. Fields X The X coordinate of the block position. public int X Field Value int Y The Y coordinate of the block position. public int Y Field Value int Z The Z coordinate of the block position. public int Z Field Value int Properties BoundingBox Gets the bounding box of the current BlockPos. public BoundingBox BoundingBox { get; } Property Value BoundingBox Center Gets the center of the BlockPos. public Vec3 Center { get; } Property Value Vec3 Down Gets a BlockPos that is one unit down from the current position. public BlockPos Down { get; } Property Value BlockPos East Gets a BlockPos that is one unit east from the current position. public BlockPos East { get; } Property Value BlockPos Length Gets the length of the BlockPos vector. public int Length { get; } Property Value int Normalized Gets the normalized vector of the BlockPos. public Vec3 Normalized { get; } Property Value Vec3 North Gets a BlockPos that is one unit north from the current position. public BlockPos North { get; } Property Value BlockPos One Gets a BlockPos with all coordinates set to one. public static BlockPos One { get; } Property Value BlockPos South Gets a BlockPos that is one unit south from the current position. public BlockPos South { get; } Property Value BlockPos Up Gets a BlockPos that is one unit up from the current position. public BlockPos Up { get; } Property Value BlockPos West Gets a BlockPos that is one unit west from the current position. public BlockPos West { get; } Property Value BlockPos Zero Gets a BlockPos with all coordinates set to zero. public static BlockPos Zero { get; } Property Value BlockPos Methods Add(BlockPos) Returns a new BlockPos by adding another BlockPos. public BlockPos Add(BlockPos rhs) Parameters rhs BlockPos The BlockPos to add. Returns BlockPos A new BlockPos with the added coordinates. Add(int, int, int) Returns a new BlockPos by adding the specified values to each coordinate. public BlockPos Add(int x, int y, int z) Parameters x int The X coordinate to add. y int The Y coordinate to add. z int The Z coordinate to add. Returns BlockPos A new BlockPos with the added coordinates. Clamp(BlockPos, BlockPos) Clamps this BlockPos between two other BlockPos values. public BlockPos Clamp(BlockPos min, BlockPos max) Parameters min BlockPos The minimum BlockPos. max BlockPos The maximum BlockPos. Returns BlockPos The clamped BlockPos. Clamp(int, int) Clamps this BlockPos between two integer values. public BlockPos Clamp(int min, int max) Parameters min int The minimum integer. max int The maximum integer. Returns BlockPos The clamped BlockPos. Distance(BlockPos) Calculates the distance to another BlockPos. public float Distance(BlockPos other) Parameters other BlockPos The other BlockPos. Returns float The distance to the other BlockPos. Div(BlockPos) Returns a new BlockPos by dividing another BlockPos. public BlockPos Div(BlockPos rhs) Parameters rhs BlockPos The BlockPos to divide. Returns BlockPos A new BlockPos with the divided coordinates. Div(int, int, int) Returns a new BlockPos by dividing the specified values from each coordinate. public BlockPos Div(int x, int y, int z) Parameters x int The X coordinate to divide. y int The Y coordinate to divide. z int The Z coordinate to divide. Returns BlockPos A new BlockPos with the divided coordinates. Equals(BlockPos) Checks if this BlockPos is equal to another BlockPos. public bool Equals(BlockPos other) Parameters other BlockPos The other BlockPos. Returns bool True if the BlockPos values are equal, otherwise false. Equals(object?) Checks if this BlockPos is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the object is a BlockPos and the values are equal, otherwise false. GetHashCode() Returns the hash code for this BlockPos. public override int GetHashCode() Returns int The hash code for this BlockPos. Lerp(BlockPos, float) Linearly interpolates between this BlockPos and another BlockPos. public BlockPos Lerp(BlockPos other, float t) Parameters other BlockPos The other BlockPos. t float The interpolation factor. Returns BlockPos The interpolated BlockPos. Max(BlockPos) Returns the maximum of this BlockPos and another BlockPos. public BlockPos Max(BlockPos other) Parameters other BlockPos The other BlockPos. Returns BlockPos The maximum BlockPos. Max(int) Returns the maximum of this BlockPos and an integer. public BlockPos Max(int other) Parameters other int The integer. Returns BlockPos The maximum BlockPos. Min(BlockPos) Returns the minimum of this BlockPos and another BlockPos. public BlockPos Min(BlockPos other) Parameters other BlockPos The other BlockPos. Returns BlockPos The minimum BlockPos. Min(int) Returns the minimum of this BlockPos and an integer. public BlockPos Min(int other) Parameters other int The integer. Returns BlockPos The minimum BlockPos. Mod(BlockPos) Returns a new BlockPos by taking the modulus of another BlockPos. public BlockPos Mod(BlockPos rhs) Parameters rhs BlockPos The BlockPos to mod. Returns BlockPos A new BlockPos with the modded coordinates. Mod(int, int, int) Returns a new BlockPos by taking the modulus of the specified values with each coordinate. public BlockPos Mod(int x, int y, int z) Parameters x int The X coordinate to mod. y int The Y coordinate to mod. z int The Z coordinate to mod. Returns BlockPos A new BlockPos with the modded coordinates. Mul(BlockPos) Returns a new BlockPos by multiplying another BlockPos. public BlockPos Mul(BlockPos rhs) Parameters rhs BlockPos The BlockPos to multiply. Returns BlockPos A new BlockPos with the multiplied coordinates. Mul(int, int, int) Returns a new BlockPos by multiplying the specified values with each coordinate. public BlockPos Mul(int x, int y, int z) Parameters x int The X coordinate to multiply. y int The Y coordinate to multiply. z int The Z coordinate to multiply. Returns BlockPos A new BlockPos with the multiplied coordinates. Next(BlockFace, int) Gives you the next block position in the given direction. public BlockPos Next(BlockFace face, int count = 0) Parameters face BlockFace The direction to get the position of. count int How many blocks in that direction. Returns BlockPos Sub(BlockPos) Returns a new BlockPos by subtracting another BlockPos. public BlockPos Sub(BlockPos rhs) Parameters rhs BlockPos The BlockPos to subtract. Returns BlockPos A new BlockPos with the subtracted coordinates. Sub(int, int, int) Returns a new BlockPos by subtracting the specified values from each coordinate. public BlockPos Sub(int x, int y, int z) Parameters x int The X coordinate to subtract. y int The Y coordinate to subtract. z int The Z coordinate to subtract. Returns BlockPos A new BlockPos with the subtracted coordinates. ToString() Returns a string representation of the BlockPos. public override string ToString() Returns string A string representation of the BlockPos. ToString(string) Returns a formatted string representation of the BlockPos. public string ToString(string format) Parameters format string The format string. Returns string A formatted string representation of the BlockPos. Operators operator +(BlockPos, BlockPos) Adds two BlockPos values. public static BlockPos operator +(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns BlockPos A new BlockPos with the added coordinates. operator --(BlockPos) Decrements the coordinates of a BlockPos by 1. public static BlockPos operator --(BlockPos rhs) Parameters rhs BlockPos The BlockPos to decrement. Returns BlockPos A new BlockPos with the decremented coordinates. operator /(BlockPos, BlockPos) Divides one BlockPos by another. public static BlockPos operator /(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns BlockPos A new BlockPos with the divided coordinates. operator /(BlockPos, int) Divides the coordinates of a BlockPos by an integer. public static BlockPos operator /(BlockPos lhs, int rhs) Parameters lhs BlockPos The BlockPos. rhs int The integer to divide. Returns BlockPos A new BlockPos with the divided coordinates. operator /(int, BlockPos) Divides an integer by the coordinates of a BlockPos. public static BlockPos operator /(int lhs, BlockPos rhs) Parameters lhs int The integer to divide. rhs BlockPos The BlockPos. Returns BlockPos A new BlockPos with the divided coordinates. operator ==(BlockPos, BlockPos) Checks if two BlockPos values are equal. public static bool operator ==(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the coordinates are equal, otherwise false. operator >(BlockPos, BlockPos) Checks if one BlockPos is greater than another. public static bool operator >(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the left-hand side is greater, otherwise false. operator >=(BlockPos, BlockPos) Checks if one BlockPos is greater than or equal to another. public static bool operator >=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the left-hand side is greater than or equal, otherwise false. operator ++(BlockPos) Increments the coordinates of a BlockPos by 1. public static BlockPos operator ++(BlockPos rhs) Parameters rhs BlockPos The BlockPos to increment. Returns BlockPos A new BlockPos with the incremented coordinates. operator !=(BlockPos, BlockPos) Checks if two BlockPos values are not equal. public static bool operator !=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the coordinates are not equal, otherwise false. operator <(BlockPos, BlockPos) Checks if one BlockPos is less than another. public static bool operator <(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the left-hand side is less, otherwise false. operator <=(BlockPos, BlockPos) Checks if one BlockPos is less than or equal to another. public static bool operator <=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns bool True if the left-hand side is less than or equal, otherwise false. operator %(BlockPos, BlockPos) Takes the modulus of one BlockPos with another. public static BlockPos operator %(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns BlockPos A new BlockPos with the modded coordinates. operator %(BlockPos, int) Takes the modulus of the coordinates of a BlockPos by an integer. public static BlockPos operator %(BlockPos lhs, int rhs) Parameters lhs BlockPos The BlockPos. rhs int The integer to mod. Returns BlockPos A new BlockPos with the modded coordinates. operator %(int, BlockPos) Takes the modulus of an integer by the coordinates of a BlockPos. public static BlockPos operator %(int lhs, BlockPos rhs) Parameters lhs int The integer to mod. rhs BlockPos The BlockPos. Returns BlockPos A new BlockPos with the modded coordinates. operator *(BlockPos, BlockPos) Multiplies two BlockPos values. public static BlockPos operator *(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns BlockPos A new BlockPos with the multiplied coordinates. operator *(BlockPos, int) Multiplies the coordinates of a BlockPos by an integer. public static BlockPos operator *(BlockPos lhs, int rhs) Parameters lhs BlockPos The BlockPos. rhs int The integer to multiply. Returns BlockPos A new BlockPos with the multiplied coordinates. operator *(int, BlockPos) Multiplies an integer by the coordinates of a BlockPos. public static BlockPos operator *(int lhs, BlockPos rhs) Parameters lhs int The integer to multiply. rhs BlockPos The BlockPos. Returns BlockPos A new BlockPos with the multiplied coordinates. operator -(BlockPos, BlockPos) Subtracts one BlockPos from another. public static BlockPos operator -(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos The left-hand side BlockPos. rhs BlockPos The right-hand side BlockPos. Returns BlockPos A new BlockPos with the subtracted coordinates. operator -(BlockPos) Negates the coordinates of a BlockPos. public static BlockPos operator -(BlockPos rhs) Parameters rhs BlockPos The BlockPos to negate. Returns BlockPos A new BlockPos with the negated coordinates. operator +(BlockPos) Returns the same BlockPos. public static BlockPos operator +(BlockPos rhs) Parameters rhs BlockPos The BlockPos. Returns BlockPos The same BlockPos."
  },
  "docs/OnixRuntime.Api.Maths.BoundingBox.html": {
    "href": "docs/OnixRuntime.Api.Maths.BoundingBox.html",
    "title": "Struct BoundingBox | Onix Plugin Documentation",
    "summary": "Struct BoundingBox Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents an axis-aligned bounding box (AABB) in 3D space, with utility methods for containment, intersection, and manipulation. public struct BoundingBox : IEquatable<BoundingBox> Implements IEquatable<BoundingBox> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BoundingBox(Vec3, Vec3) Initializes a new instance of the BoundingBox struct with the specified minimum and maximum points. public BoundingBox(Vec3 min, Vec3 max) Parameters min Vec3 The minimum point. max Vec3 The maximum point. Fields Maximum The maximum (corner) point of the bounding box. public Vec3 Maximum Field Value Vec3 Minimum The minimum (corner) point of the bounding box. public Vec3 Minimum Field Value Vec3 Properties BackBottomLeft Gets the back bottom left corner of the bounding box. public Vec3 BackBottomLeft { get; } Property Value Vec3 BackBottomRight Gets the back bottom right corner of the bounding box. public Vec3 BackBottomRight { get; } Property Value Vec3 BackBottomTop Gets the back bottom top corner of the bounding box. public Vec3 BackBottomTop { get; } Property Value Vec3 BackTopLeft Gets the back top left corner of the bounding box. public Vec3 BackTopLeft { get; } Property Value Vec3 BackTopRight Gets the back top right corner of the bounding box. public Vec3 BackTopRight { get; } Property Value Vec3 Center Gets the center point of the bounding box. public Vec3 Center { get; } Property Value Vec3 Empty Gets whether the bounding box is empty (minimum equals maximum). public bool Empty { get; } Property Value bool FrontBottomLeft Gets the front bottom left corner of the bounding box. public Vec3 FrontBottomLeft { get; } Property Value Vec3 FrontBottomRight Gets the front bottom right corner of the bounding box. public Vec3 FrontBottomRight { get; } Property Value Vec3 FrontTopLeft Gets the front top left corner of the bounding box. public Vec3 FrontTopLeft { get; } Property Value Vec3 FrontTopRight Gets the front top right corner of the bounding box. public Vec3 FrontTopRight { get; } Property Value Vec3 Size Gets the size (width, height, depth) of the bounding box. public Vec3 Size { get; } Property Value Vec3 Volume Gets the volume of the bounding box. public float Volume { get; } Property Value float Methods Contains(BoundingBox) Determines whether the bounding box completely contains another bounding box. public bool Contains(BoundingBox box) Parameters box BoundingBox The bounding box to check. Returns bool Contains(Vec3) Determines whether the bounding box contains the specified point. public bool Contains(Vec3 point) Parameters point Vec3 The point to check. Returns bool Equals(BoundingBox) Determines whether this bounding box is equal to another bounding box. public bool Equals(BoundingBox other) Parameters other BoundingBox Returns bool Equals(object?) Determines whether this bounding box is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() Returns the hash code for this bounding box. public override int GetHashCode() Returns int GrowToInclude(Vec3) Returns a new bounding box that grows to include the specified point. public BoundingBox GrowToInclude(Vec3 point) Parameters point Vec3 The point to include. Returns BoundingBox Inflate(Vec3) Returns a new bounding box inflated by the specified vector amount in all directions. public BoundingBox Inflate(Vec3 amount) Parameters amount Vec3 The vector amount to inflate. Returns BoundingBox Inflate(float) Returns a new bounding box inflated by the specified amount in all directions. public BoundingBox Inflate(float amount) Parameters amount float The amount to inflate. Returns BoundingBox Intersect(BoundingBox) Returns the intersection of this bounding box with another bounding box. public BoundingBox Intersect(BoundingBox box) Parameters box BoundingBox The bounding box to intersect with. Returns BoundingBox Intersects(BoundingBox) Determines whether the bounding box intersects with another bounding box. public bool Intersects(BoundingBox box) Parameters box BoundingBox The bounding box to check for intersection. Returns bool Lerp(BoundingBox, float) Linearly interpolates between this bounding box and another bounding box. public BoundingBox Lerp(BoundingBox other, float t) Parameters other BoundingBox The other bounding box. t float The interpolation factor. Returns BoundingBox Merge(BoundingBox) Returns a new bounding box that merges this bounding box with another. public BoundingBox Merge(BoundingBox other) Parameters other BoundingBox The other bounding box. Returns BoundingBox Normalize(Vec3) Normalizes a point within the bounding box to a [0, 1] range. public Vec3 Normalize(Vec3 point) Parameters point Vec3 The point to normalize. Returns Vec3 Offset(Vec3) Returns a new bounding box offset by the specified vector. public BoundingBox Offset(Vec3 offset) Parameters offset Vec3 The offset vector. Returns BoundingBox ToString() Returns a string representation of the bounding box. public override string ToString() Returns string Union(BoundingBox) Returns the union of this bounding box with another bounding box. public BoundingBox Union(BoundingBox box) Parameters box BoundingBox The bounding box to union with. Returns BoundingBox Operators operator ==(BoundingBox, BoundingBox) Determines whether two bounding boxes are equal. public static bool operator ==(BoundingBox a, BoundingBox b) Parameters a BoundingBox b BoundingBox Returns bool operator !=(BoundingBox, BoundingBox) Determines whether two bounding boxes are not equal. public static bool operator !=(BoundingBox a, BoundingBox b) Parameters a BoundingBox b BoundingBox Returns bool"
  },
  "docs/OnixRuntime.Api.Maths.ChunkPos.html": {
    "href": "docs/OnixRuntime.Api.Maths.ChunkPos.html",
    "title": "Struct ChunkPos | Onix Plugin Documentation",
    "summary": "Struct ChunkPos Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a chunk position in 2D integer coordinates (X, Y), with utilities for conversion from world/block positions and chunk-relative calculations. public struct ChunkPos : IEquatable<ChunkPos> Implements IEquatable<ChunkPos> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChunkPos(BlockPos) Initializes a new instance of the ChunkPos struct from a BlockPos by converting world coordinates to chunk coordinates. public ChunkPos(BlockPos pos) Parameters pos BlockPos The block position to convert. ChunkPos(int, int) Initializes a new instance of the ChunkPos struct with the specified chunk coordinates. public ChunkPos(int x, int y) Parameters x int The X coordinate. y int The Y coordinate. Fields X The X coordinate of the chunk position. public int X Field Value int Y The Y coordinate of the chunk position. public int Y Field Value int Methods Equals(ChunkPos) Determines whether this ChunkPos is equal to another ChunkPos. public bool Equals(ChunkPos other) Parameters other ChunkPos Returns bool Equals(object?) Determines whether this ChunkPos is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool FromWorld(BlockPos) Converts a BlockPos to a ChunkPos. public static ChunkPos FromWorld(BlockPos pos) Parameters pos BlockPos The block position. Returns ChunkPos The corresponding chunk position. FromWorld(int, int) Converts world X and Z coordinates to a ChunkPos. public static ChunkPos FromWorld(int worldX, int worldZ) Parameters worldX int The world X coordinate. worldZ int The world Z coordinate. Returns ChunkPos The corresponding chunk position. GetHashCode() Returns the hash code for this ChunkPos. public override int GetHashCode() Returns int GetInChunkBlockPos(int, int) Gets the block position within a chunk for the given world coordinates. public static ChunkPos GetInChunkBlockPos(int worldX, int worldZ) Parameters worldX int The world X coordinate. worldZ int The world Z coordinate. Returns ChunkPos The chunk-relative block position. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(ChunkPos, ChunkPos) Checks if two ChunkPos values are equal. public static bool operator ==(ChunkPos lhs, ChunkPos rhs) Parameters lhs ChunkPos rhs ChunkPos Returns bool operator !=(ChunkPos, ChunkPos) Checks if two ChunkPos values are not equal. public static bool operator !=(ChunkPos lhs, ChunkPos rhs) Parameters lhs ChunkPos rhs ChunkPos Returns bool"
  },
  "docs/OnixRuntime.Api.Maths.ColorF.html": {
    "href": "docs/OnixRuntime.Api.Maths.ColorF.html",
    "title": "Struct ColorF | Onix Plugin Documentation",
    "summary": "Struct ColorF Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a color with floating-point RGBA components and provides utility methods for color manipulation and conversion. public struct ColorF Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ColorF() Initializes a new instance of the ColorF struct as white (1,1,1,1). public ColorF() ColorF(int, int, int, int) Initializes a new instance of the ColorF struct from integer RGBA values (0-255). public ColorF(int r, int g, int b, int a = 255) Parameters r int g int b int a int ColorF(ReadOnlySpan<char>) Initializes a new instance of the ColorF struct from a hex color code (with or without alpha). public ColorF(ReadOnlySpan<char> hexCode) Parameters hexCode ReadOnlySpan<char> A 6- or 8-character hex code, optionally prefixed with '#'. Exceptions ArgumentException Thrown if the hex code is invalid. ColorF(float, float, float, float) Initializes a new instance of the ColorF struct with the specified RGBA components (0.0 to 1.0). public ColorF(float r, float g, float b, float a = 1) Parameters r float g float b float a float Fields A The alpha (opacity) component of the color (0.0 to 1.0). public float A Field Value float B The blue component of the color (0.0 to 1.0). public float B Field Value float G The green component of the color (0.0 to 1.0). public float G Field Value float R The red component of the color (0.0 to 1.0). public float R Field Value float Properties Aqua Gets a predefined aqua color. public static ColorF Aqua { get; } Property Value ColorF Black Gets a predefined black color. public static ColorF Black { get; } Property Value ColorF Blue Gets a predefined blue color. public static ColorF Blue { get; } Property Value ColorF Bronze Gets a predefined bronze color. public static ColorF Bronze { get; } Property Value ColorF Brown Gets a predefined brown color. public static ColorF Brown { get; } Property Value ColorF Cyan Gets a predefined cyan color. public static ColorF Cyan { get; } Property Value ColorF Gold Gets a predefined gold color. public static ColorF Gold { get; } Property Value ColorF Gray Gets a predefined gray color. public static ColorF Gray { get; } Property Value ColorF Green Gets a predefined green color. public static ColorF Green { get; } Property Value ColorF Grey Gets a predefined grey color (alias for gray). public static ColorF Grey { get; } Property Value ColorF HexColor Gets the hex string representation of this color (including alpha). public string HexColor { get; } Property Value string HexColorNoAlpha Gets the hex string representation of this color (without alpha). public string HexColorNoAlpha { get; } Property Value string Indigo Gets a predefined indigo color. public static ColorF Indigo { get; } Property Value ColorF Inverted Returns the inverted color (1.0 - R, 1.0 - G, 1.0 - B, A). public ColorF Inverted { get; } Property Value ColorF Lime Gets a predefined lime color. public static ColorF Lime { get; } Property Value ColorF Magenta Gets a predefined magenta color. public static ColorF Magenta { get; } Property Value ColorF Maroon Gets a predefined maroon color. public static ColorF Maroon { get; } Property Value ColorF Navy Gets a predefined navy color. public static ColorF Navy { get; } Property Value ColorF Olive Gets a predefined olive color. public static ColorF Olive { get; } Property Value ColorF Opaque Returns a copy of this color with full opacity (alpha = 1.0). public ColorF Opaque { get; } Property Value ColorF Orange Gets a predefined orange color. public static ColorF Orange { get; } Property Value ColorF Pink Gets a predefined pink color. public static ColorF Pink { get; } Property Value ColorF Purple Gets a predefined purple color. public static ColorF Purple { get; } Property Value ColorF Red Gets a predefined red color. public static ColorF Red { get; } Property Value ColorF Rose Gets a predefined rose color. public static ColorF Rose { get; } Property Value ColorF Silver Gets a predefined silver color. public static ColorF Silver { get; } Property Value ColorF Sky Gets a predefined sky color. public static ColorF Sky { get; } Property Value ColorF Teal Gets a predefined teal color. public static ColorF Teal { get; } Property Value ColorF Transparent Gets a predefined transparent color. public static ColorF Transparent { get; } Property Value ColorF Violet Gets a predefined violet color. public static ColorF Violet { get; } Property Value ColorF White Gets a predefined white color. public static ColorF White { get; } Property Value ColorF Yellow Gets a predefined yellow color. public static ColorF Yellow { get; } Property Value ColorF Methods Equals(object?) Determines whether this color is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool FromHSL(float, float, float, float) Creates a ColorF from HSL (Hue [0-360], Saturation [0-1], Lightness [0-1]). public static ColorF FromHSL(float h, float s, float l, float a = 1) Parameters h float The hue in range 0 to 360. s float The saturation in range 0 to 1. l float The lightness in range 0 to 1. a float The alpha (opacity) in range 0 to 1. Returns ColorF FromHSL((float H, float S, float L), float) Creates a ColorF from an HSL tuple (Hue [0-360], Saturation [0-1], Lightness [0-1]). public static ColorF FromHSL((float H, float S, float L) hsl, float a = 1) Parameters hsl (float H, float S, float L) a float Returns ColorF The RGBA Color from the HSL values FromHSV(float, float, float, float) Creates a ColorF from HSV (Hue [0-360], Saturation [0-1], Value [0-1]). public static ColorF FromHSV(float h, float s, float v, float a = 1) Parameters h float The hue in range 0 to 360. s float The saturation in range 0 to 1. v float The value in range 0 to 1. a float The alpha (opacity) in range 0 to 1. Returns ColorF FromHSV((float H, float S, float V), float) Creates a ColorF from an HSV tuple (Hue [0-360], Saturation [0-1], Value [0-1]). public static ColorF FromHSV((float H, float S, float V) hsv, float a = 1) Parameters hsv (float H, float S, float L) a float Returns ColorF The RGBA Color from the HSV values FromRGBA(uint) Creates a ColorF from a 32-bit RGBA integer. public static ColorF FromRGBA(uint color) Parameters color uint Returns ColorF GetHashCode() Returns the hash code for this color. public override int GetHashCode() Returns int Lerp(ColorF, ColorF, float) Linearly interpolates between two colors. public static ColorF Lerp(ColorF a, ColorF b, float amount) Parameters a ColorF b ColorF amount float Returns ColorF Lerp(ColorF, float) Linearly interpolates between this color and a target color. public readonly ColorF Lerp(ColorF target, float amount) Parameters target ColorF amount float Returns ColorF MultiplyOpacity(float) Returns a copy of this color with its opacity multiplied by the given value. public readonly ColorF MultiplyOpacity(float targetOpacity) Parameters targetOpacity float Returns ColorF Opacity(ColorF, float) Returns a copy of the given color with the specified opacity. public static ColorF Opacity(ColorF color, float targetOpacity) Parameters color ColorF targetOpacity float Returns ColorF Opacity(float) Returns a white color with the specified opacity. public static ColorF Opacity(float targetOpacity) Parameters targetOpacity float Returns ColorF Random(Random?, bool) Generates a random color with optional opacity. public static ColorF Random(Random? random = null, bool opacity = false) Parameters random Random The random to use, otherwise Shared opacity bool Whether opacity should be included Returns ColorF ShiftHue(float) Returns a new ColorF with the hue shifted by the specified degrees (0-360). public ColorF ShiftHue(float degrees) Parameters degrees float How many degrees to shift by. (Positive or negative.) Returns ColorF The new color that had its hut shifted. ToHSL() Converts this color to HSL (Hue, Saturation, Lightness).à public (float H, float S, float L) ToHSL() Returns (float H, float S, float L) Returns a tuple (hue [0-360], saturation [0-1], lightness [0-1]). ToHSV() Converts this color to HSV (Hue, Saturation, Value). public (float H, float S, float V) ToHSV() Returns (float H, float S, float L) Returns a tuple (hue [0-360], saturation [0-1], value [0-1]). ToRGBA() Converts this color to a 32-bit RGBA integer. public uint ToRGBA() Returns uint ToString() Returns a string representation of this color. public override string ToString() Returns string WithOpacity(float) Returns a copy of this color with the specified opacity. public readonly ColorF WithOpacity(float targetOpacity) Parameters targetOpacity float Returns ColorF Operators operator +(ColorF, ColorF) Adds two colors component-wise. public static ColorF operator +(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator /(ColorF, ColorF) Divides two colors component-wise. public static ColorF operator /(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator /(ColorF, float) Divides a color by a scalar. public static ColorF operator /(ColorF a, float b) Parameters a ColorF b float Returns ColorF operator /(float, ColorF) Divides a scalar by a color. public static ColorF operator /(float a, ColorF b) Parameters a float b ColorF Returns ColorF operator ==(ColorF, ColorF) Checks if two colors are equal. public static bool operator ==(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns bool implicit operator Color(ColorF) Converts a ColorF to a System.Drawing.Color. public static implicit operator Color(ColorF color) Parameters color ColorF Returns Color implicit operator ColorF(Color) Converts a System.Drawing.Color to a ColorF. public static implicit operator ColorF(Color color) Parameters color Color Returns ColorF operator !=(ColorF, ColorF) Checks if two colors are not equal. public static bool operator !=(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns bool operator *(ColorF, ColorF) Multiplies two colors component-wise. public static ColorF operator *(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator *(ColorF, float) Multiplies a color by a scalar. public static ColorF operator *(ColorF a, float b) Parameters a ColorF b float Returns ColorF operator *(float, ColorF) Multiplies a scalar by a color. public static ColorF operator *(float a, ColorF b) Parameters a float b ColorF Returns ColorF operator -(ColorF, ColorF) Subtracts two colors component-wise. public static ColorF operator -(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF"
  },
  "docs/OnixRuntime.Api.Maths.Quaternion.html": {
    "href": "docs/OnixRuntime.Api.Maths.Quaternion.html",
    "title": "Struct Quaternion | Onix Plugin Documentation",
    "summary": "Struct Quaternion Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a quaternion for 3D rotations. public struct Quaternion Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Quaternion() Constructs the identity quaternion. public Quaternion() Quaternion(Angles) Constructs a quaternion from Euler angles (Yaw, Pitch). public Quaternion(Angles eulerAngles) Parameters eulerAngles Angles Quaternion(Angles, float) Constructs a quaternion from an axis and angle (degrees). public Quaternion(Angles axis, float angle) Parameters axis Angles angle float Quaternion(Angles3) Constructs a quaternion from Euler angles (Yaw, Pitch, Roll). public Quaternion(Angles3 eulerAngles) Parameters eulerAngles Angles3 Quaternion(Angles3, float) Constructs a quaternion from an axis and angle (degrees). public Quaternion(Angles3 axis, float angle) Parameters axis Angles3 angle float Quaternion(TransformationMatrix) Constructs a quaternion from a transformation matrix. public Quaternion(TransformationMatrix matrix) Parameters matrix TransformationMatrix Quaternion(float, float, float, float) Constructs a quaternion from components. public Quaternion(float x, float y, float z, float w) Parameters x float y float z float w float Fields W W component. public float W Field Value float X X component. public float X Field Value float Y Y component. public float Y Field Value float Z Z component. public float Z Field Value float Properties Conjugated Returns the conjugate of this quaternion. public Quaternion Conjugated { get; } Property Value Quaternion Euler Returns the Euler angles (degrees) representation of this quaternion. public Angles3 Euler { get; } Property Value Angles3 EulerRadians Returns the Euler angles (radians) representation of this quaternion. public Angles3 EulerRadians { get; } Property Value Angles3 Identity The identity quaternion. public static Quaternion Identity { get; } Property Value Quaternion Inversed Returns the inverse of this quaternion. public Quaternion Inversed { get; } Property Value Quaternion IsIdentity Returns true if this is the identity quaternion. public bool IsIdentity { get; } Property Value bool Length The length (magnitude) of the quaternion. public float Length { get; } Property Value float LengthSquared The squared length (magnitude) of the quaternion. public float LengthSquared { get; } Property Value float Matrix Returns the transformation matrix representation of this quaternion. public TransformationMatrix Matrix { get; } Property Value TransformationMatrix Normalized Returns a normalized copy of this quaternion. public Quaternion Normalized { get; } Property Value Quaternion Zero The zero quaternion. public static Quaternion Zero { get; } Property Value Quaternion Methods Dot(Quaternion, Quaternion) Returns the dot product of two quaternions. public static float Dot(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns float Equals(object?) Checks if this quaternion is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool FromAxisAngle(Angles, float) Constructs a quaternion from an axis and angle (degrees). public static Quaternion FromAxisAngle(Angles axis, float angle) Parameters axis Angles angle float Returns Quaternion FromAxisAngle(Angles3, float) Constructs a quaternion from an axis and angle (degrees). public static Quaternion FromAxisAngle(Angles3 axis, float angle) Parameters axis Angles3 angle float Returns Quaternion FromAxisAngle(float, float, float, float) Constructs a quaternion from an axis and angle (degrees). public static Quaternion FromAxisAngle(float x, float y, float z, float angle) Parameters x float y float z float angle float Returns Quaternion FromAxisAngleRadians(Angles, float) Constructs a quaternion from an axis and angle (radians). public static Quaternion FromAxisAngleRadians(Angles axis, float angle) Parameters axis Angles angle float Returns Quaternion FromAxisAngleRadians(Angles3, float) Constructs a quaternion from an axis and angle (radians). public static Quaternion FromAxisAngleRadians(Angles3 axis, float angle) Parameters axis Angles3 angle float Returns Quaternion FromAxisAngleRadians(float, float, float, float) Constructs a quaternion from an axis and angle (radians). public static Quaternion FromAxisAngleRadians(float x, float y, float z, float angle) Parameters x float y float z float angle float Returns Quaternion FromEuler(Angles) Constructs a quaternion from Euler angles (Yaw, Pitch). public static Quaternion FromEuler(Angles eulerAngles) Parameters eulerAngles Angles Returns Quaternion FromEuler(Angles3) Constructs a quaternion from Euler angles (Yaw, Pitch, Roll). public static Quaternion FromEuler(Angles3 eulerAngles) Parameters eulerAngles Angles3 Returns Quaternion FromEuler(float, float, float) Constructs a quaternion from Euler angles (Yaw, Pitch, Roll). public static Quaternion FromEuler(float yaw, float pitch, float roll) Parameters yaw float pitch float roll float Returns Quaternion FromEulerRadians(Angles) Constructs a quaternion from Euler angles (Yaw, Pitch) in radians. public static Quaternion FromEulerRadians(Angles eulerAngles) Parameters eulerAngles Angles Returns Quaternion FromEulerRadians(Angles3) Constructs a quaternion from Euler angles (Yaw, Pitch, Roll) in radians. public static Quaternion FromEulerRadians(Angles3 eulerAngles) Parameters eulerAngles Angles3 Returns Quaternion FromEulerRadians(float, float, float) Constructs a quaternion from Euler angles (Yaw, Pitch, Roll) in radians. public static Quaternion FromEulerRadians(float yaw, float pitch, float roll) Parameters yaw float pitch float roll float Returns Quaternion FromMatrix(TransformationMatrix) Constructs a quaternion from a transformation matrix. public static Quaternion FromMatrix(TransformationMatrix matrix) Parameters matrix TransformationMatrix Returns Quaternion GetHashCode() Returns the hash code for this quaternion. public override int GetHashCode() Returns int Multiply(Quaternion) Multiplies this quaternion by another quaternion. public Quaternion Multiply(Quaternion b) Parameters b Quaternion Returns Quaternion Multiply(TransformationMatrix) Multiplies this quaternion by a transformation matrix. public TransformationMatrix Multiply(TransformationMatrix matrix) Parameters matrix TransformationMatrix Returns TransformationMatrix Multiply(Vec3) Rotates a vector by this quaternion. public Vec3 Multiply(Vec3 vector) Parameters vector Vec3 Returns Vec3 Slerp(Quaternion, Quaternion, float) Spherical linear interpolation between two quaternions. public static Quaternion Slerp(Quaternion a, Quaternion b, float t) Parameters a Quaternion b Quaternion t float Returns Quaternion ToString() Returns a string representation of this quaternion. public override string ToString() Returns string Operators operator ==(Quaternion, Quaternion) Checks if two quaternions are equal. public static bool operator ==(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns bool operator !=(Quaternion, Quaternion) Checks if two quaternions are not equal. public static bool operator !=(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns bool operator *(Quaternion, Quaternion) Multiplies two quaternions. public static Quaternion operator *(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns Quaternion operator *(Quaternion, TransformationMatrix) Multiplies a quaternion by a transformation matrix. public static TransformationMatrix operator *(Quaternion q, TransformationMatrix m) Parameters q Quaternion m TransformationMatrix Returns TransformationMatrix operator *(Quaternion, Vec3) Rotates a vector by a quaternion. public static Vec3 operator *(Quaternion q, Vec3 v) Parameters q Quaternion v Vec3 Returns Vec3"
  },
  "docs/OnixRuntime.Api.Maths.Rect.html": {
    "href": "docs/OnixRuntime.Api.Maths.Rect.html",
    "title": "Struct Rect | Onix Plugin Documentation",
    "summary": "Struct Rect Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a rectangle in 2D space with floating-point coordinates, providing utility methods for geometry, containment, and manipulation. public struct Rect : IEquatable<Rect> Implements IEquatable<Rect> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Rect() Initializes a new instance of the Rect struct with all coordinates set to zero. public Rect() Rect(Vec2, Vec2) Initializes a new instance of the Rect struct from two Vec2 points. public Rect(Vec2 topLeft, Vec2 bottomRight) Parameters topLeft Vec2 bottomRight Vec2 Rect(Vec2, float, float) Initializes a new instance of the Rect struct from a Vec2 top-left and bottom-right coordinates. public Rect(Vec2 topLeft, float bottomRightX, float bottomRightY) Parameters topLeft Vec2 bottomRightX float bottomRightY float Rect(float, float, Vec2) Initializes a new instance of the Rect struct from a top-left coordinate and a Vec2 bottom-right. public Rect(float topLeftX, float topLeftY, Vec2 bottomRight) Parameters topLeftX float topLeftY float bottomRight Vec2 Rect(float, float, float, float) Initializes a new instance of the Rect struct with specified top-left and bottom-right coordinates. public Rect(float topLeftX, float topLeftY, float bottomRightX, float bottomRightY) Parameters topLeftX float topLeftY float bottomRightX float bottomRightY float Fields W The Y coordinate of the bottom-right corner. public float W Field Value float X The X coordinate of the top-left corner. public float X Field Value float Y The Y coordinate of the top-left corner. public float Y Field Value float Z The X coordinate of the bottom-right corner. public float Z Field Value float Properties AspectRatio Gets the aspect ratio (width divided by height). public float AspectRatio { get; } Property Value float BottomLeft Gets the bottom-left corner as a Vec2. public Vec2 BottomLeft { get; } Property Value Vec2 BottomRight Gets the bottom-right corner as a Vec2. public Vec2 BottomRight { get; } Property Value Vec2 Center Gets the center point of the rectangle. public Vec2 Center { get; } Property Value Vec2 FullUV A rectangle representing the full size of normalized coordinates (0,0 to 1,1). public static Rect FullUV { get; } Property Value Rect Height Gets the height of the rectangle. public float Height { get; } Property Value float IsEmpty Gets whether the rectangle is empty (zero or negative width/height). public bool IsEmpty { get; } Property Value bool Size Gets the size of the rectangle as a Vec2. public Vec2 Size { get; } Property Value Vec2 TopLeft Gets the top-left corner as a Vec2. public Vec2 TopLeft { get; } Property Value Vec2 TopRight Gets the top-right corner as a Vec2. public Vec2 TopRight { get; } Property Value Vec2 Width Gets the width of the rectangle. public float Width { get; } Property Value float Methods Absolute(Vec2) Returns the absolute position of a point relative to the rectangle's top-left. public Vec2 Absolute(Vec2 vec) Parameters vec Vec2 Returns Vec2 Absolute(float, float) Returns the absolute position of a point relative to the rectangle's top-left. public Vec2 Absolute(float x, float y) Parameters x float y float Returns Vec2 CenterInside(Rect) Returns a rectangle of the given size centered inside this rectangle. public Rect CenterInside(Rect rect) Parameters rect Rect Returns Rect CenterInside(Vec2) Returns a rectangle of the given size centered inside this rectangle. public Rect CenterInside(Vec2 size) Parameters size Vec2 Returns Rect Contains(Vec2) Determines whether the rectangle contains the specified point. public bool Contains(Vec2 vec) Parameters vec Vec2 Returns bool Contains(float, float) Determines whether the rectangle contains the specified coordinates. public bool Contains(float x, float y) Parameters x float y float Returns bool Equals(Rect) Determines whether this rectangle is equal to another rectangle. public bool Equals(Rect other) Parameters other Rect Returns bool Equals(object?) Determines whether this rectangle is equal to another object. public override bool Equals(object? obj) Parameters obj object Returns bool Expand(Vec2) Returns a rectangle expanded by the given vector in all directions. public Rect Expand(Vec2 vec) Parameters vec Vec2 Returns Rect Expand(float) Returns a rectangle expanded by the given amount in all directions. public Rect Expand(float x) Parameters x float Returns Rect Expand(float, float) Returns a rectangle expanded by the given X and Y amounts in all directions. public Rect Expand(float x, float y) Parameters x float y float Returns Rect FromCenter(Vec2, Vec2) Creates a rectangle centered at a point with a given size. public static Rect FromCenter(Vec2 centerPoint, Vec2 totalSize) Parameters centerPoint Vec2 totalSize Vec2 Returns Rect FromCenter(Vec2, float, float) Creates a rectangle centered at a point with a given width and height. public static Rect FromCenter(Vec2 centerPoint, float totalSizeX, float totalSizeY) Parameters centerPoint Vec2 totalSizeX float totalSizeY float Returns Rect FromCenter(float, float, Vec2) Creates a rectangle centered at a point with a given size. public static Rect FromCenter(float centerX, float centerY, Vec2 totalSize) Parameters centerX float centerY float totalSize Vec2 Returns Rect FromCenter(float, float, float, float) Creates a rectangle centered at a point with a given width and height. public static Rect FromCenter(float centerX, float centerY, float totalSizeX, float totalSizeY) Parameters centerX float centerY float totalSizeX float totalSizeY float Returns Rect FromSize(Vec2, Vec2) Creates a rectangle from a top-left point and a size. public static Rect FromSize(Vec2 topLeft, Vec2 size) Parameters topLeft Vec2 size Vec2 Returns Rect FromSize(Vec2, float, float) Creates a rectangle from a top-left point and width/height. public static Rect FromSize(Vec2 topLeft, float sizeX, float sizeY) Parameters topLeft Vec2 sizeX float sizeY float Returns Rect FromSize(float, float, Vec2) Creates a rectangle from a top-left X/Y and a size Vec2. public static Rect FromSize(float topLeftX, float topLeftY, Vec2 size) Parameters topLeftX float topLeftY float size Vec2 Returns Rect FromSize(float, float, float, float) Creates a rectangle from a top-left X/Y and width/height. public static Rect FromSize(float topLeftX, float topLeftY, float sizeX, float sizeY) Parameters topLeftX float topLeftY float sizeX float sizeY float Returns Rect GetHashCode() Returns the hash code for this rectangle. public override int GetHashCode() Returns int Intersection(Rect) Returns the intersection of this rectangle with another rectangle. public Rect Intersection(Rect rect) Parameters rect Rect Returns Rect MoveBy(Vec2) Returns a rectangle moved by the given vector. public Rect MoveBy(Vec2 amount) Parameters amount Vec2 Returns Rect MoveBy(float, float) Returns a rectangle moved by the given X and Y amounts. public Rect MoveBy(float amountX, float amountY) Parameters amountX float amountY float Returns Rect MoveDown(float) Returns a rectangle moved down by the given amount. public Rect MoveDown(float amount) Parameters amount float Returns Rect MoveLeft(float) Returns a rectangle moved left by the given amount. public Rect MoveLeft(float amount) Parameters amount float Returns Rect MoveRight(float) Returns a rectangle moved right by the given amount. public Rect MoveRight(float amount) Parameters amount float Returns Rect MoveTo(Vec2) Returns a rectangle moved to the specified position. public Rect MoveTo(Vec2 position) Parameters position Vec2 Returns Rect MoveUp(float) Returns a rectangle moved up by the given amount. public Rect MoveUp(float amount) Parameters amount float Returns Rect NormalizeWith(Vec2) Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture. public Rect NormalizeWith(Vec2 size) Parameters size Vec2 The size to normalize with. Returns Rect A rectangle normalized within that size. NormalizeWith(float) Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture. public Rect NormalizeWith(float size) Parameters size float The size to normalize with. Returns Rect A rectangle normalized within that size. NormalizeWith(float, float) Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture. public Rect NormalizeWith(float sizeX, float sizeY) Parameters sizeX float The horizontal size to normalize with. sizeY float The vertical size to normalize with. Returns Rect A rectangle normalized within that size. Overlaps(Rect) Determines whether this rectangle overlaps with another rectangle. public bool Overlaps(Rect rect) Parameters rect Rect Returns bool Relative(Vec2) Returns the position of a point relative to the top-left of the rectangle. public Vec2 Relative(Vec2 vec) Parameters vec Vec2 Returns Vec2 Relative(float, float) Returns the position of a point relative to the top-left of the rectangle. public Vec2 Relative(float x, float y) Parameters x float y float Returns Vec2 ResizeKeepingAspectRatio(Vec2) Returns a new size for this rectangle, keeping the aspect ratio. public Vec2 ResizeKeepingAspectRatio(Vec2 size) Parameters size Vec2 Returns Vec2 Shrink(Vec2) Returns a rectangle shrunk by the given vector in all directions. public Rect Shrink(Vec2 amount) Parameters amount Vec2 Returns Rect Shrink(float) Returns a rectangle shrunk by the given amount in all directions. public Rect Shrink(float amount) Parameters amount float Returns Rect Shrink(float, float) Returns a rectangle shrunk by the given X and Y amounts in all directions. public Rect Shrink(float amountX, float amountY) Parameters amountX float amountY float Returns Rect ToString() Returns a string representation of this rectangle. public override string ToString() Returns string United(Rect) Returns the union of this rectangle with another rectangle. public Rect United(Rect rect) Parameters rect Rect Returns Rect Operators operator ==(Rect, Rect) Checks if two rectangles are equal. public static bool operator ==(Rect left, Rect right) Parameters left Rect right Rect Returns bool implicit operator Rectangle(Rect) Converts this rectangle to a System.Drawing.Rectangle. public static implicit operator Rectangle(Rect rect) Parameters rect Rect Returns Rectangle implicit operator RectangleF(Rect) Converts this rectangle to a System.Drawing.RectangleF. public static implicit operator RectangleF(Rect rect) Parameters rect Rect Returns RectangleF implicit operator Rect(Rectangle) Converts a System.Drawing.Rectangle to a Rect. public static implicit operator Rect(Rectangle rect) Parameters rect Rectangle Returns Rect implicit operator Rect(RectangleF) Converts a System.Drawing.RectangleF to a Rect. public static implicit operator Rect(RectangleF rect) Parameters rect RectangleF Returns Rect operator !=(Rect, Rect) Checks if two rectangles are not equal. public static bool operator !=(Rect left, Rect right) Parameters left Rect right Rect Returns bool"
  },
  "docs/OnixRuntime.Api.Maths.TransformationMatrix.html": {
    "href": "docs/OnixRuntime.Api.Maths.TransformationMatrix.html",
    "title": "Struct TransformationMatrix | Onix Plugin Documentation",
    "summary": "Struct TransformationMatrix Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a 4x4 transformation matrix for 2D/3D graphics, supporting translation, scaling, rotation, and matrix multiplication. public struct TransformationMatrix Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransformationMatrix() Represents a 4x4 transformation matrix for 2D/3D graphics, supporting translation, scaling, rotation, and matrix multiplication. public TransformationMatrix() Methods Identity() Returns the identity transformation matrix. public static TransformationMatrix Identity() Returns TransformationMatrix Multiply(Quaternion) Returns the product of this matrix and a quaternion (applies the quaternion rotation). public TransformationMatrix Multiply(Quaternion rotation) Parameters rotation Quaternion Returns TransformationMatrix Multiply(TransformationMatrix) Returns the product of this matrix and another matrix. public TransformationMatrix Multiply(TransformationMatrix other) Parameters other TransformationMatrix Returns TransformationMatrix MultiplyInplace(Quaternion) Multiplies this matrix by a quaternion in place (applies the quaternion rotation). public TransformationMatrix MultiplyInplace(Quaternion rotation) Parameters rotation Quaternion Returns TransformationMatrix MultiplyInplace(TransformationMatrix) Multiplies this matrix by another matrix in place. public TransformationMatrix MultiplyInplace(TransformationMatrix other) Parameters other TransformationMatrix Returns TransformationMatrix Rotate(float) Returns a rotation matrix for the given angle (degrees) around the Z axis. public static TransformationMatrix Rotate(float angle) Parameters angle float Returns TransformationMatrix Rotate(float, Vec3) Returns a rotation matrix for the given angle (degrees) and axis vector. public static TransformationMatrix Rotate(float angle, Vec3 axis) Parameters angle float axis Vec3 Returns TransformationMatrix Rotate(float, float, float, float) Returns a rotation matrix for the given angle (degrees) and axis. public static TransformationMatrix Rotate(float angle, float axisX, float axisY, float axisZ = 0) Parameters angle float Angle in degrees. axisX float X component of the axis. axisY float Y component of the axis. axisZ float Z component of the axis. Returns TransformationMatrix RotateX(float) Returns a rotation matrix for the given angle (degrees) around the X axis. public static TransformationMatrix RotateX(float angle) Parameters angle float Returns TransformationMatrix RotateY(float) Returns a rotation matrix for the given angle (degrees) around the Y axis. public static TransformationMatrix RotateY(float angle) Parameters angle float Returns TransformationMatrix RotateZ(float) Returns a rotation matrix for the given angle (degrees) around the Z axis. public static TransformationMatrix RotateZ(float angle) Parameters angle float Returns TransformationMatrix Scale(Vec2, float) Returns a scaling matrix for the given 2D scale and optional z value. public static TransformationMatrix Scale(Vec2 scale2D, float z = 1) Parameters scale2D Vec2 z float Returns TransformationMatrix Scale(Vec3) Returns a scaling matrix for the given 3D scale. public static TransformationMatrix Scale(Vec3 scale) Parameters scale Vec3 Returns TransformationMatrix Scale(float) Returns a uniform scaling matrix for the given scale value. public static TransformationMatrix Scale(float scale) Parameters scale float Returns TransformationMatrix Scale(float, float, float) Returns a scaling matrix for the given x, y, z values. public static TransformationMatrix Scale(float x, float y, float z = 1) Parameters x float y float z float Returns TransformationMatrix Transform(Vec2) Transforms a 2D vector by this matrix. public Vec2 Transform(Vec2 position) Parameters position Vec2 Returns Vec2 Transform(Vec3) Transforms a 3D vector by this matrix. public Vec3 Transform(Vec3 position) Parameters position Vec3 Returns Vec3 Transform(float, float) Transforms a 2D point by this matrix. public Vec2 Transform(float x, float y) Parameters x float y float Returns Vec2 Transform(float, float, float) Transforms a 3D point by this matrix. public Vec3 Transform(float x, float y, float z) Parameters x float y float z float Returns Vec3 Translate(Vec2, float) Returns a translation matrix for the given 2D position and optional z value. public static TransformationMatrix Translate(Vec2 position2D, float z = 0) Parameters position2D Vec2 z float Returns TransformationMatrix Translate(Vec3) Returns a translation matrix for the given 3D position. public static TransformationMatrix Translate(Vec3 position) Parameters position Vec3 Returns TransformationMatrix Translate(float, float, float) Returns a translation matrix for the given x, y, z values. public static TransformationMatrix Translate(float x, float y, float z = 0) Parameters x float y float z float Returns TransformationMatrix TranslateWorldPosition(Vec3) Returns a translation matrix for the given x, y, z values in the world. this function adds the inverted origin so you don't have to do it manually. Doing the subtraction before multiplying the matrix fixes the precision error that appear scarily quickly otherwise. To use this you would do all your normal matrix math at the origin as normal and position it by multiplying the result by this matrix. public static TransformationMatrix TranslateWorldPosition(Vec3 position) Parameters position Vec3 Returns TransformationMatrix TranslateWorldPosition(float, float, float) Returns a translation matrix for the given x, y, z values in the world. this function adds the inverted origin so you don't have to do it manually. Doing the subtraction before multiplying the matrix fixes the precision error that appear scarily quickly otherwise. To use this you would do all your normal matrix math at the origin as normal and position it by multiplying the result by this matrix. public static TransformationMatrix TranslateWorldPosition(float x, float y, float z = 0) Parameters x float y float z float Returns TransformationMatrix Operators operator *(TransformationMatrix, Quaternion) Multiplies a transformation matrix by a quaternion. public static TransformationMatrix operator *(TransformationMatrix left, Quaternion right) Parameters left TransformationMatrix right Quaternion Returns TransformationMatrix operator *(TransformationMatrix, TransformationMatrix) Multiplies two transformation matrices. public static TransformationMatrix operator *(TransformationMatrix left, TransformationMatrix right) Parameters left TransformationMatrix right TransformationMatrix Returns TransformationMatrix"
  },
  "docs/OnixRuntime.Api.Maths.Vec2.html": {
    "href": "docs/OnixRuntime.Api.Maths.Vec2.html",
    "title": "Struct Vec2 | Onix Plugin Documentation",
    "summary": "Struct Vec2 Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a 2D vector with floating-point X and Y components, and provides vector operations and utilities. public struct Vec2 : IEquatable<Vec2> Implements IEquatable<Vec2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec2() Initializes a new instance of the Vec2 struct with zero values. public Vec2() Vec2(float) Initializes a new instance of the Vec2 struct with both X and Y set to the same value. public Vec2(float value) Parameters value float The value for both X and Y. Vec2(float, float) Initializes a new instance of the Vec2 struct with the specified X and Y values. public Vec2(float x, float y) Parameters x float The X component. y float The Y component. Fields X The X component of the vector. public float X Field Value float Y The Y component of the vector. public float Y Field Value float Properties Length Gets the Euclidean length of the vector. public float Length { get; } Property Value float Magnitude Gets the magnitude (length) of the vector. public float Magnitude { get; } Property Value float MagnitudeSqr Gets the squared magnitude of the vector. public float MagnitudeSqr { get; } Property Value float Normalized Gets a normalized version of this vector. public Vec2 Normalized { get; } Property Value Vec2 One Gets a Vec2 with both components set to one. public static Vec2 One { get; } Property Value Vec2 Zero Gets a Vec2 with both components set to zero. public static Vec2 Zero { get; } Property Value Vec2 Methods Angle(Vec2) public float Angle(Vec2 vec) Parameters vec Vec2 Returns float Clamp(Vec2, Vec2) public Vec2 Clamp(Vec2 min, Vec2 max) Parameters min Vec2 max Vec2 Returns Vec2 Clamp(float, float) public Vec2 Clamp(float min, float max) Parameters min float max float Returns Vec2 Cross(Vec2) public float Cross(Vec2 vec) Parameters vec Vec2 Returns float Distance(Vec2) public float Distance(Vec2 vec) Parameters vec Vec2 Returns float Dot(Vec2) public float Dot(Vec2 vec) Parameters vec Vec2 Returns float Equals(Vec2) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec2 other) Parameters other Vec2 An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vec2, float) public Vec2 Lerp(Vec2 vec, float t) Parameters vec Vec2 t float Returns Vec2 Max(Vec2) public Vec2 Max(Vec2 vec) Parameters vec Vec2 Returns Vec2 Max(float) public Vec2 Max(float value) Parameters value float Returns Vec2 Min(Vec2) public Vec2 Min(Vec2 vec) Parameters vec Vec2 Returns Vec2 Min(float) public Vec2 Min(float value) Parameters value float Returns Vec2 SetDirection(float) public void SetDirection(float angle) Parameters angle float SetMagnitude(float) public void SetMagnitude(float magnitude) Parameters magnitude float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string, CultureInfo?) public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string formatProvider CultureInfo Returns string Vec2Random() Returns a random Vec2 with X and Y in [0, 1). public static Vec2 Vec2Random() Returns Vec2 Operators operator +(Vec2, Vec2) public static Vec2 operator +(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator +(Vec2, float) public static Vec2 operator +(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator /(Vec2, Vec2) public static Vec2 operator /(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator /(Vec2, float) public static Vec2 operator /(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator /(float, Vec2) public static Vec2 operator /(float a, Vec2 b) Parameters a float b Vec2 Returns Vec2 operator ==(Vec2, Vec2) public static bool operator ==(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator >(Vec2, Vec2) public static bool operator >(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator >=(Vec2, Vec2) public static bool operator >=(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool implicit operator Vector2(Vec2) public static implicit operator Vector2(Vec2 value) Parameters value Vec2 Returns Vector2 implicit operator Vec2(Vector2) public static implicit operator Vec2(Vector2 value) Parameters value Vector2 Returns Vec2 operator !=(Vec2, Vec2) public static bool operator !=(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator <(Vec2, Vec2) public static bool operator <(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator <=(Vec2, Vec2) public static bool operator <=(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator *(Vec2, Vec2) public static Vec2 operator *(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator *(Vec2, float) public static Vec2 operator *(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator *(float, Vec2) public static Vec2 operator *(float a, Vec2 b) Parameters a float b Vec2 Returns Vec2 operator -(Vec2, Vec2) public static Vec2 operator -(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator -(Vec2, float) public static Vec2 operator -(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator -(Vec2) public static Vec2 operator -(Vec2 a) Parameters a Vec2 Returns Vec2"
  },
  "docs/OnixRuntime.Api.Maths.Vec2I.html": {
    "href": "docs/OnixRuntime.Api.Maths.Vec2I.html",
    "title": "Struct Vec2I | Onix Plugin Documentation",
    "summary": "Struct Vec2I Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a 2D vector with integer X and Y components, and provides vector operations and utilities. public struct Vec2I : IEquatable<Vec2I> Implements IEquatable<Vec2I> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec2I() Initializes a new instance of the Vec2I struct with zero values. public Vec2I() Vec2I(int) Initializes a new instance of the Vec2I struct with both X and Y set to the same value. public Vec2I(int value) Parameters value int The value for both X and Y. Vec2I(int, int) Initializes a new instance of the Vec2I struct with the specified X and Y values. public Vec2I(int x, int y) Parameters x int The X component. y int The Y component. Fields X The X component of the vector. public int X Field Value int Y The Y component of the vector. public int Y Field Value int Properties Length Gets the Euclidean length of the vector. public float Length { get; } Property Value float Magnitude Gets the magnitude (length) of the vector. public float Magnitude { get; } Property Value float MagnitudeSqr Gets the squared magnitude of the vector. public int MagnitudeSqr { get; } Property Value int Normalized Gets a normalized version of this vector. public Vec2I Normalized { get; } Property Value Vec2I One Gets a Vec2I with both components set to one. public static Vec2I One { get; } Property Value Vec2I Zero Gets a Vec2I with both components set to zero. public static Vec2I Zero { get; } Property Value Vec2I Methods Angle(Vec2I) public float Angle(Vec2I vec) Parameters vec Vec2I Returns float Clamp(Vec2I, Vec2I) public Vec2I Clamp(Vec2I min, Vec2I max) Parameters min Vec2I max Vec2I Returns Vec2I Clamp(int, int) public Vec2I Clamp(int min, int max) Parameters min int max int Returns Vec2I Cross(Vec2I) public int Cross(Vec2I vec) Parameters vec Vec2I Returns int Distance(Vec2I) public float Distance(Vec2I vec) Parameters vec Vec2I Returns float Dot(Vec2I) public int Dot(Vec2I vec) Parameters vec Vec2I Returns int Equals(Vec2I) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec2I other) Parameters other Vec2I An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vec2I, float) public Vec2I Lerp(Vec2I vec, float t) Parameters vec Vec2I t float Returns Vec2I Max(Vec2I) public Vec2I Max(Vec2I vec) Parameters vec Vec2I Returns Vec2I Max(int) public Vec2I Max(int value) Parameters value int Returns Vec2I Min(Vec2I) public Vec2I Min(Vec2I vec) Parameters vec Vec2I Returns Vec2I Min(int) public Vec2I Min(int value) Parameters value int Returns Vec2I SetDirection(float) public void SetDirection(float angle) Parameters angle float SetMagnitude(float) public void SetMagnitude(float magnitude) Parameters magnitude float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string, CultureInfo?) public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string formatProvider CultureInfo Returns string Vec2Random() Returns a random Vec2I with X and Y in [0, 100). public static Vec2I Vec2Random() Returns Vec2I Operators operator +(Vec2I, Vec2I) public static Vec2I operator +(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns Vec2I operator +(Vec2I, int) public static Vec2I operator +(Vec2I a, int b) Parameters a Vec2I b int Returns Vec2I operator /(Vec2I, Vec2I) public static Vec2I operator /(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns Vec2I operator /(Vec2I, int) public static Vec2I operator /(Vec2I a, int b) Parameters a Vec2I b int Returns Vec2I operator /(int, Vec2I) public static Vec2I operator /(int a, Vec2I b) Parameters a int b Vec2I Returns Vec2I operator ==(Vec2I, Vec2I) public static bool operator ==(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool operator >(Vec2I, Vec2I) public static bool operator >(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool operator >=(Vec2I, Vec2I) public static bool operator >=(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool implicit operator Vector2(Vec2I) public static implicit operator Vector2(Vec2I value) Parameters value Vec2I Returns Vector2 implicit operator Vec2I(Vector2) public static implicit operator Vec2I(Vector2 value) Parameters value Vector2 Returns Vec2I operator !=(Vec2I, Vec2I) public static bool operator !=(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool operator <(Vec2I, Vec2I) public static bool operator <(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool operator <=(Vec2I, Vec2I) public static bool operator <=(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns bool operator *(Vec2I, Vec2I) public static Vec2I operator *(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns Vec2I operator *(Vec2I, int) public static Vec2I operator *(Vec2I a, int b) Parameters a Vec2I b int Returns Vec2I operator *(int, Vec2I) public static Vec2I operator *(int a, Vec2I b) Parameters a int b Vec2I Returns Vec2I operator -(Vec2I, Vec2I) public static Vec2I operator -(Vec2I a, Vec2I b) Parameters a Vec2I b Vec2I Returns Vec2I operator -(Vec2I, int) public static Vec2I operator -(Vec2I a, int b) Parameters a Vec2I b int Returns Vec2I operator -(Vec2I) public static Vec2I operator -(Vec2I a) Parameters a Vec2I Returns Vec2I"
  },
  "docs/OnixRuntime.Api.Maths.Vec3.html": {
    "href": "docs/OnixRuntime.Api.Maths.Vec3.html",
    "title": "Struct Vec3 | Onix Plugin Documentation",
    "summary": "Struct Vec3 Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a 3D vector with floating-point X, Y, and Z components, and provides vector operations and utilities. public struct Vec3 : IEquatable<Vec3> Implements IEquatable<Vec3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec3() Initializes a new instance of the Vec3 struct with zero values. public Vec3() Vec3(BlockPos) Initializes a new instance of the Vec3 struct from a BlockPos. public Vec3(BlockPos blockPos) Parameters blockPos BlockPos The BlockPos to convert. Vec3(Vector2, float) Initializes a new instance of the Vec3 struct from a Vector2 and an optional Z value. public Vec3(Vector2 xy, float z = 0) Parameters xy Vector2 The Vector2 for X and Y. z float The Z component (default 0). Vec3(float) Initializes a new instance of the Vec3 struct with all components set to the same value. public Vec3(float value) Parameters value float The value for X, Y, and Z. Vec3(float, float, float) Initializes a new instance of the Vec3 struct with the specified X, Y, and Z values. public Vec3(float x, float y, float z) Parameters x float The X component. y float The Y component. z float The Z component. Fields X The X component of the vector. public float X Field Value float Y The Y component of the vector. public float Y Field Value float Z The Z component of the vector. public float Z Field Value float Properties Direction Gets the direction of the vector as a Vec2 (yaw, pitch). public Vec2 Direction { get; } Property Value Vec2 Length Gets the Euclidean length of the vector. public float Length { get; } Property Value float Magnitude Gets the magnitude (length) of the vector. public float Magnitude { get; } Property Value float MagnitudeSqr Gets the squared magnitude of the vector. public float MagnitudeSqr { get; } Property Value float Normalized Gets a normalized version of this vector. public Vec3 Normalized { get; } Property Value Vec3 One Gets a Vec3 with all components set to one. public static Vec3 One { get; } Property Value Vec3 Zero Gets a Vec3 with all components set to zero. public static Vec3 Zero { get; } Property Value Vec3 Methods Angle(Vec3) Returns the angle (in radians) between this and another Vec3. public float Angle(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns float Clamp(Vec3, Vec3) Clamps this vector between two Vec3 values. public Vec3 Clamp(Vec3 min, Vec3 max) Parameters min Vec3 The minimum Vec3. max Vec3 The maximum Vec3. Returns Vec3 Clamp(float, float) Clamps this vector between two scalar values. public Vec3 Clamp(float min, float max) Parameters min float The minimum value. max float The maximum value. Returns Vec3 Cross(Vec3) Returns the cross product of this and another Vec3. public Vec3 Cross(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns Vec3 Distance(Vec3) Returns the Euclidean distance to another Vec3. public float Distance(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns float Dot(Vec3) Returns the dot product of this and another Vec3. public float Dot(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns float Equals(Vec3) Determines whether this instance is equal to another Vec3. public bool Equals(Vec3 other) Parameters other Vec3 The other Vec3. Returns bool Equals(object?) Determines whether this instance is equal to a specified object. public override bool Equals(object? obj) Parameters obj object The object to compare with. Returns bool GetHashCode() Returns the hash code for this Vec3. public override int GetHashCode() Returns int Lerp(Vec3, float) Linearly interpolates between this and another Vec3. public Vec3 Lerp(Vec3 vec, float t) Parameters vec Vec3 The target Vec3. t float The interpolation factor (0 to 1). Returns Vec3 Max(Vec3) Returns a Vec3 with the maximum components of this and another Vec3. public Vec3 Max(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns Vec3 Min(Vec3) Returns a Vec3 with the minimum components of this and another Vec3. public Vec3 Min(Vec3 vec) Parameters vec Vec3 The other Vec3. Returns Vec3 Rotate(float, float) Rotates this vector by the given yaw and pitch angles. public Vec3 Rotate(float yaw, float pitch) Parameters yaw float The yaw angle in radians. pitch float The pitch angle in radians. Returns Vec3 SetDirection(Vec2) Sets the direction of this vector, preserving its magnitude. public void SetDirection(Vec2 direction) Parameters direction Vec2 The direction as a Vec2 (yaw, pitch). SetMagnitude(float) Sets the magnitude (length) of this vector. public void SetMagnitude(float magnitude) Parameters magnitude float The new magnitude. ToString() Returns a string representation of this Vec3. public override string ToString() Returns string ToString(string, CultureInfo?) Returns a formatted string representation of this Vec3. public string ToString(string format, CultureInfo? culture = null) Parameters format string The format string. culture CultureInfo The culture to use for formatting. Returns string Operators operator +(Vec3, Vec3) Adds two Vec3 vectors. public static Vec3 operator +(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns Vec3 operator +(Vec3, float) Adds a scalar value to a Vec3. public static Vec3 operator +(Vec3 vec, float value) Parameters vec Vec3 The Vec3. value float The scalar value. Returns Vec3 operator /(Vec3, Vec3) Divides two Vec3 vectors component-wise. public static Vec3 operator /(Vec3 vec, Vec3 scalar) Parameters vec Vec3 The first Vec3. scalar Vec3 The second Vec3. Returns Vec3 operator /(Vec3, float) Divides a Vec3 by a scalar value. public static Vec3 operator /(Vec3 vec, float scalar) Parameters vec Vec3 The Vec3. scalar float The scalar value. Returns Vec3 operator ==(Vec3, Vec3) Determines whether two Vec3 instances are equal. public static bool operator ==(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool operator >(Vec3, Vec3) Determines whether one Vec3 is greater than another. public static bool operator >(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool operator >=(Vec3, Vec3) Determines whether one Vec3 is greater than or equal to another. public static bool operator >=(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool implicit operator Vector3(Vec3) Implicitly converts a Vec3 to a Vector3. public static implicit operator Vector3(Vec3 vec) Parameters vec Vec3 The Vec3. Returns Vector3 implicit operator Vec3(Vector3) Implicitly converts a Vector3 to a Vec3. public static implicit operator Vec3(Vector3 vec) Parameters vec Vector3 The Vector3. Returns Vec3 operator !=(Vec3, Vec3) Determines whether two Vec3 instances are not equal. public static bool operator !=(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool operator <(Vec3, Vec3) Determines whether one Vec3 is less than another. public static bool operator <(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool operator <=(Vec3, Vec3) Determines whether one Vec3 is less than or equal to another. public static bool operator <=(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns bool operator *(Vec3, Vec3) Multiplies two Vec3 vectors component-wise. public static Vec3 operator *(Vec3 vec, Vec3 other) Parameters vec Vec3 The first Vec3. other Vec3 The second Vec3. Returns Vec3 operator *(Vec3, float) Multiplies a Vec3 by a scalar value. public static Vec3 operator *(Vec3 vec, float scalar) Parameters vec Vec3 The Vec3. scalar float The scalar value. Returns Vec3 operator *(float, Vec3) Multiplies a scalar value by a Vec3. public static Vec3 operator *(float scalar, Vec3 vec) Parameters scalar float The scalar value. vec Vec3 The Vec3. Returns Vec3 operator -(Vec3, Vec3) Subtracts one Vec3 from another. public static Vec3 operator -(Vec3 left, Vec3 right) Parameters left Vec3 The left Vec3. right Vec3 The right Vec3. Returns Vec3 operator -(Vec3, float) Subtracts a scalar value from a Vec3. public static Vec3 operator -(Vec3 vec, float value) Parameters vec Vec3 The Vec3. value float The scalar value. Returns Vec3 operator -(Vec3) Negates a Vec3. public static Vec3 operator -(Vec3 vec) Parameters vec Vec3 The Vec3 to negate. Returns Vec3"
  },
  "docs/OnixRuntime.Api.Maths.Vec4.html": {
    "href": "docs/OnixRuntime.Api.Maths.Vec4.html",
    "title": "Struct Vec4 | Onix Plugin Documentation",
    "summary": "Struct Vec4 Namespace OnixRuntime.Api.Maths Assembly OnixRuntime.dll Represents a 4D vector with floating-point X, Y, Z, and W components, and provides conversions to and from System.Numerics.Vector4. public struct Vec4 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec4() Initializes a new instance of the Vec4 struct with all components set to zero. public Vec4() Vec4(Vec3, float) Initializes a new instance of the Vec4 struct from a Vec3 and a W component. public Vec4(Vec3 xyz, float w = 1) Parameters xyz Vec3 The Vec3 for X, Y, and Z. w float The W component (default 1). Vec4(float, float, float, float) Initializes a new instance of the Vec4 struct with the specified X, Y, Z, and W values. public Vec4(float x, float y, float z, float w) Parameters x float The X component. y float The Y component. z float The Z component. w float The W component. Fields W The W component of the vector. public float W Field Value float X The X component of the vector. public float X Field Value float Y The Y component of the vector. public float Y Field Value float Z The Z component of the vector. public float Z Field Value float Operators implicit operator Vector4(Vec4) Implicitly converts a Vec4 to a Vector4. public static implicit operator Vector4(Vec4 vec) Parameters vec Vec4 The Vec4 to convert. Returns Vector4 implicit operator Vec4(Vector4) Implicitly converts a Vector4 to a Vec4. public static implicit operator Vec4(Vector4 vec) Parameters vec Vector4 The Vector4 to convert. Returns Vec4"
  },
  "docs/OnixRuntime.Api.Maths.html": {
    "href": "docs/OnixRuntime.Api.Maths.html",
    "title": "Namespace OnixRuntime.Api.Maths | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Maths Structs Angles Represents a pair of angles (Yaw, Pitch) and provides vector-like operations and utilities for angle manipulation. Angles3 Represents a set of three angles (Yaw, Pitch, Roll) in 3D space, with various utility methods for manipulation and comparison. BlockPos Represents a block position in 3D integer coordinates, with vector-like operations and utilities. BoundingBox Represents an axis-aligned bounding box (AABB) in 3D space, with utility methods for containment, intersection, and manipulation. ChunkPos Represents a chunk position in 2D integer coordinates (X, Y), with utilities for conversion from world/block positions and chunk-relative calculations. ColorF Represents a color with floating-point RGBA components and provides utility methods for color manipulation and conversion. Quaternion Represents a quaternion for 3D rotations. Rect Represents a rectangle in 2D space with floating-point coordinates, providing utility methods for geometry, containment, and manipulation. TransformationMatrix Represents a 4x4 transformation matrix for 2D/3D graphics, supporting translation, scaling, rotation, and matrix multiplication. Vec2 Represents a 2D vector with floating-point X and Y components, and provides vector operations and utilities. Vec2I Represents a 2D vector with integer X and Y components, and provides vector operations and utilities. Vec3 Represents a 3D vector with floating-point X, Y, and Z components, and provides vector operations and utilities. Vec4 Represents a 4D vector with floating-point X, Y, Z, and W components, and provides conversions to and from System.Numerics.Vector4."
  },
  "docs/OnixRuntime.Api.NBT.ArrayListTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.ArrayListTag.html",
    "title": "Class ArrayListTag | Onix Plugin Documentation",
    "summary": "Class ArrayListTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a list of NBT tags, enforcing that all contained tags are of the same type. public class ArrayListTag : NbtTag, IEnumerable<NbtTag>, IEnumerable Inheritance object NbtTag ArrayListTag Implements IEnumerable<NbtTag> IEnumerable Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayListTag() Initializes a new instance of the ArrayListTag class with an empty list. public ArrayListTag() ArrayListTag(List<NbtTag>) Initializes a new instance of the ArrayListTag class with the specified list of tags. public ArrayListTag(List<NbtTag> value) Parameters value List<NbtTag> The list of NBT tags. Properties TagType Gets the tag type for this tag (ArrayList). public override NbtTagType TagType { get; } Property Value NbtTagType Value The list of NBT tags contained in this ArrayListTag. public List<NbtTag> Value { get; set; } Property Value List<NbtTag> ValueTagType Gets the type of tags contained in the list, or End if the list is empty. public NbtTagType ValueTagType { get; } Property Value NbtTagType Methods Add(NbtTag) Adds a tag to the list, enforcing type consistency. public void Add(NbtTag tag) Parameters tag NbtTag The NBT tag to add. Exceptions ArrayTypeMismatchException Thrown if the tag type does not match the existing type in the list. GetEnumerator() Returns an enumerator that iterates through the list of tags. public IEnumerator<NbtTag> GetEnumerator() Returns IEnumerator<NbtTag>"
  },
  "docs/OnixRuntime.Api.NBT.ByteArrayTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.ByteArrayTag.html",
    "title": "Class ByteArrayTag | Onix Plugin Documentation",
    "summary": "Class ByteArrayTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a byte array value for NBT serialization. public class ByteArrayTag : NbtTag Inheritance object NbtTag ByteArrayTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ByteArrayTag() Initializes a new instance of the ByteArrayTag class with an empty array. public ByteArrayTag() ByteArrayTag(byte[]) Initializes a new instance of the ByteArrayTag class with the specified byte array. public ByteArrayTag(byte[] value) Parameters value byte[] The byte array value. Properties TagType Gets the tag type for this tag (ByteArray). public override NbtTagType TagType { get; } Property Value NbtTagType Value The byte array value of this tag. public byte[] Value { get; set; } Property Value byte[]"
  },
  "docs/OnixRuntime.Api.NBT.ByteTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.ByteTag.html",
    "title": "Class ByteTag | Onix Plugin Documentation",
    "summary": "Class ByteTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a signed byte value for NBT serialization. public class ByteTag : NbtTag Inheritance object NbtTag ByteTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ByteTag() Initializes a new instance of the ByteTag class with a value of 0. public ByteTag() ByteTag(byte) Initializes a new instance of the ByteTag class from a byte value. public ByteTag(byte value) Parameters value byte The byte value. ByteTag(sbyte) Initializes a new instance of the ByteTag class from a signed byte value. public ByteTag(sbyte value) Parameters value sbyte The signed byte value. Properties TagType Gets the tag type for this tag (Byte). public override NbtTagType TagType { get; } Property Value NbtTagType Value The signed byte value of this tag. public sbyte Value { get; set; } Property Value sbyte"
  },
  "docs/OnixRuntime.Api.NBT.DoubleTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.DoubleTag.html",
    "title": "Class DoubleTag | Onix Plugin Documentation",
    "summary": "Class DoubleTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a double-precision floating-point value for NBT serialization. public class DoubleTag : NbtTag Inheritance object NbtTag DoubleTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DoubleTag() Initializes a new instance of the DoubleTag class with a value of 0. public DoubleTag() DoubleTag(double) Initializes a new instance of the DoubleTag class with the specified value. public DoubleTag(double value) Parameters value double The double value. Properties TagType Gets the tag type for this tag (Double). public override NbtTagType TagType { get; } Property Value NbtTagType Value The double-precision floating-point value of this tag. public double Value { get; set; } Property Value double"
  },
  "docs/OnixRuntime.Api.NBT.FloatTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.FloatTag.html",
    "title": "Class FloatTag | Onix Plugin Documentation",
    "summary": "Class FloatTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a single-precision floating-point value for NBT serialization. public class FloatTag : NbtTag Inheritance object NbtTag FloatTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloatTag() Initializes a new instance of the FloatTag class with a value of 0. public FloatTag() FloatTag(float) Initializes a new instance of the FloatTag class with the specified value. public FloatTag(float value) Parameters value float The float value. Properties TagType Gets the tag type for this tag (Float). public override NbtTagType TagType { get; } Property Value NbtTagType Value The single-precision floating-point value of this tag. public float Value { get; set; } Property Value float"
  },
  "docs/OnixRuntime.Api.NBT.IntArrayTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.IntArrayTag.html",
    "title": "Class IntArrayTag | Onix Plugin Documentation",
    "summary": "Class IntArrayTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing an array of 32-bit integers for NBT serialization. public class IntArrayTag : NbtTag Inheritance object NbtTag IntArrayTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntArrayTag() Initializes a new instance of the IntArrayTag class with an empty array. public IntArrayTag() IntArrayTag(int[]) Initializes a new instance of the IntArrayTag class with the specified integer array. public IntArrayTag(int[] value) Parameters value int[] The array of 32-bit integers. Properties TagType Gets the tag type for this tag (IntArray). public override NbtTagType TagType { get; } Property Value NbtTagType Value The array of 32-bit integer values of this tag. public int[] Value { get; set; } Property Value int[]"
  },
  "docs/OnixRuntime.Api.NBT.IntTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.IntTag.html",
    "title": "Class IntTag | Onix Plugin Documentation",
    "summary": "Class IntTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a 32-bit integer value for NBT serialization. public class IntTag : NbtTag Inheritance object NbtTag IntTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntTag() Initializes a new instance of the IntTag class with a value of 0. public IntTag() IntTag(int) Initializes a new instance of the IntTag class with the specified value. public IntTag(int value) Parameters value int The 32-bit integer value. Properties TagType Gets the tag type for this tag (Int). public override NbtTagType TagType { get; } Property Value NbtTagType Value The 32-bit integer value of this tag. public int Value { get; set; } Property Value int"
  },
  "docs/OnixRuntime.Api.NBT.LongTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.LongTag.html",
    "title": "Class LongTag | Onix Plugin Documentation",
    "summary": "Class LongTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a 64-bit integer value for NBT serialization. public class LongTag : NbtTag Inheritance object NbtTag LongTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LongTag() Initializes a new instance of the LongTag class with a value of 0. public LongTag() LongTag(long) Initializes a new instance of the LongTag class with the specified value. public LongTag(long value) Parameters value long The 64-bit integer value. Properties TagType Gets the tag type for this tag (Long). public override NbtTagType TagType { get; } Property Value NbtTagType Value The 64-bit integer value of this tag. public long Value { get; set; } Property Value long"
  },
  "docs/OnixRuntime.Api.NBT.NbtSerializer.html": {
    "href": "docs/OnixRuntime.Api.NBT.NbtSerializer.html",
    "title": "Class NbtSerializer | Onix Plugin Documentation",
    "summary": "Class NbtSerializer Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Provides static methods for serializing and deserializing NBT tags to and from binary and JSON formats. public static class NbtSerializer Inheritance object NbtSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeserializeBinaryTag(byte[]) Deserializes an NBT tag from a byte array. public static NbtTag DeserializeBinaryTag(byte[] data) Parameters data byte[] The byte array containing the serialized tag. Returns NbtTag The deserialized NBT tag. DeserializeBinaryTag(BinaryReader) Deserializes an NBT tag from a binary reader. public static NbtTag DeserializeBinaryTag(BinaryReader br) Parameters br BinaryReader The binary reader to read from. Returns NbtTag The deserialized NBT tag. DeserializeBinaryTag(Stream) Deserializes an NBT tag from a stream. public static NbtTag DeserializeBinaryTag(Stream stream) Parameters stream Stream The stream to read from. Returns NbtTag The deserialized NBT tag. DeserializeJsonTag(string) Deserializes an NBT tag from a JSON string. public static NbtTag DeserializeJsonTag(string tagText) Parameters tagText string The JSON string representing the tag. Returns NbtTag The deserialized NBT tag. SerializeBinaryTag(NbtTag) Serializes an NBT tag to a binary format. public static byte[] SerializeBinaryTag(NbtTag tag) Parameters tag NbtTag The NBT tag to serialize. Returns byte[] A byte array containing the serialized tag. SerializeJsonTag(NbtTag, bool) Serializes an NBT tag to a JSON string. public static string SerializeJsonTag(NbtTag tag, bool pretty = false) Parameters tag NbtTag The NBT tag to serialize. pretty bool Whether to format the JSON output for readability. Returns string A JSON string representing the tag."
  },
  "docs/OnixRuntime.Api.NBT.NbtTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.NbtTag.html",
    "title": "Class NbtTag | Onix Plugin Documentation",
    "summary": "Class NbtTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents the base class for all NBT tags, providing serialization and deserialization methods and a tag type property. public abstract class NbtTag Inheritance object NbtTag Derived ArrayListTag ByteArrayTag ByteTag DoubleTag FloatTag IntArrayTag IntTag LongTag ObjectTag ShortTag StringTag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TagType Gets the type of this NBT tag. public abstract NbtTagType TagType { get; } Property Value NbtTagType Methods CreateTag(NbtTagType) Creates a new NbtTag instance of the specified type. public static NbtTag CreateTag(NbtTagType type) Parameters type NbtTagType The NBT tag type. Returns NbtTag A new NbtTag instance of the specified type. Exceptions ArgumentOutOfRangeException Thrown if the type is not a valid NbtTagType."
  },
  "docs/OnixRuntime.Api.NBT.NbtTagType.html": {
    "href": "docs/OnixRuntime.Api.NBT.NbtTagType.html",
    "title": "Enum NbtTagType | Onix Plugin Documentation",
    "summary": "Enum NbtTagType Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Specifies the type of an NBT tag. public enum NbtTagType Fields ArrayList = 9 Byte = 1 ByteArray = 7 Double = 6 End = 0 Float = 5 Int = 3 IntArray = 11 Long = 4 Object = 10 Short = 2 String = 8"
  },
  "docs/OnixRuntime.Api.NBT.ObjectTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.ObjectTag.html",
    "title": "Class ObjectTag | Onix Plugin Documentation",
    "summary": "Class ObjectTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a collection of named NBT tags, similar to a compound object in NBT serialization. public class ObjectTag : NbtTag Inheritance object NbtTag ObjectTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectTag() Initializes a new instance of the ObjectTag class with an empty dictionary. public ObjectTag() ObjectTag(Dictionary<string, NbtTag>) Initializes a new instance of the ObjectTag class with the specified dictionary of tags. public ObjectTag(Dictionary<string, NbtTag> value) Parameters value Dictionary<string, NbtTag> The dictionary of named NBT tags. Properties TagType Gets the tag type for this tag (Object). public override NbtTagType TagType { get; } Property Value NbtTagType Value The dictionary of named NBT tags contained in this ObjectTag. public Dictionary<string, NbtTag> Value { get; set; } Property Value Dictionary<string, NbtTag>"
  },
  "docs/OnixRuntime.Api.NBT.ShortTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.ShortTag.html",
    "title": "Class ShortTag | Onix Plugin Documentation",
    "summary": "Class ShortTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a 16-bit signed integer value for NBT serialization. public class ShortTag : NbtTag Inheritance object NbtTag ShortTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShortTag() Initializes a new instance of the ShortTag class with a value of 0. public ShortTag() ShortTag(short) Initializes a new instance of the ShortTag class with the specified value. public ShortTag(short value) Parameters value short The 16-bit signed integer value. Properties TagType Gets the tag type for this tag (Short). public override NbtTagType TagType { get; } Property Value NbtTagType Value The 16-bit signed integer value of this tag. public short Value { get; set; } Property Value short"
  },
  "docs/OnixRuntime.Api.NBT.StringTag.html": {
    "href": "docs/OnixRuntime.Api.NBT.StringTag.html",
    "title": "Class StringTag | Onix Plugin Documentation",
    "summary": "Class StringTag Namespace OnixRuntime.Api.NBT Assembly OnixRuntime.dll Represents a tag containing a string value for NBT serialization. public class StringTag : NbtTag Inheritance object NbtTag StringTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StringTag() Initializes a new instance of the StringTag class with an empty string. public StringTag() StringTag(string) Initializes a new instance of the StringTag class with the specified string value. public StringTag(string value) Parameters value string The string value. Properties TagType Gets the tag type for this tag (String). public override NbtTagType TagType { get; } Property Value NbtTagType Value The string value of this tag. public string Value { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.NBT.html": {
    "href": "docs/OnixRuntime.Api.NBT.html",
    "title": "Namespace OnixRuntime.Api.NBT | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.NBT Classes ArrayListTag Represents a tag containing a list of NBT tags, enforcing that all contained tags are of the same type. ByteArrayTag Represents a tag containing a byte array value for NBT serialization. ByteTag Represents a tag containing a signed byte value for NBT serialization. DoubleTag Represents a tag containing a double-precision floating-point value for NBT serialization. FloatTag Represents a tag containing a single-precision floating-point value for NBT serialization. IntArrayTag Represents a tag containing an array of 32-bit integers for NBT serialization. IntTag Represents a tag containing a 32-bit integer value for NBT serialization. LongTag Represents a tag containing a 64-bit integer value for NBT serialization. NbtSerializer Provides static methods for serializing and deserializing NBT tags to and from binary and JSON formats. NbtTag Represents the base class for all NBT tags, providing serialization and deserialization methods and a tag type property. ObjectTag Represents a tag containing a collection of named NBT tags, similar to a compound object in NBT serialization. ShortTag Represents a tag containing a 16-bit signed integer value for NBT serialization. StringTag Represents a tag containing a string value for NBT serialization. Enums NbtTagType Specifies the type of an NBT tag."
  },
  "docs/OnixRuntime.Api.Onix.html": {
    "href": "docs/OnixRuntime.Api.Onix.html",
    "title": "Class Onix | Onix Plugin Documentation",
    "summary": "Class Onix Namespace OnixRuntime.Api Assembly OnixRuntime.dll Provides static access to core Onix runtime components, such as game, events, player, world, input, server, connection, rendering, client, and GUI. public class Onix Inheritance object Onix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Client Gets the Onix client things instance. public static OnixClientThings Client { get; } Property Value OnixClientThings ConnectionInfo Gets the connection info. public static ConnectionInfo ConnectionInfo { get; } Property Value ConnectionInfo Dimension Gets the current dimension if available. public static Dimension? Dimension { get; } Property Value Dimension Events Gets the Onix events instance. public static OnixEvents Events { get; } Property Value OnixEvents Game Gets the Onix game instance. public static OnixGame Game { get; } Property Value OnixGame Gui Gets the game GUI info. public static GameGuiInfo Gui { get; } Property Value GameGuiInfo Input Gets the game input handler. public static GameInputHandler Input { get; } Property Value GameInputHandler LocalPlayer Gets the local player, or null if not available. public static LocalPlayer? LocalPlayer { get; } Property Value LocalPlayer LocalServer Gets the local game server, or null if not available. public static LocalGameServer? LocalServer { get; } Property Value LocalGameServer Region Gets the current region which allows you to get blocks if available. public static WorldBlocks? Region { get; } Property Value WorldBlocks Render Gets the render contexts. public static RenderContexes Render { get; } Property Value RenderContexes World Gets the runtime world for the local player, or null if not available. public static RuntimeWorld? World { get; } Property Value RuntimeWorld"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixClientScreen.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixClientScreen.html",
    "title": "Class OnixClientScreen | Onix Plugin Documentation",
    "summary": "Class OnixClientScreen Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixClientScreen : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixClientScreen Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixClientScreen(string, bool, bool) Creates a new ClientScreen instance. This allows you to open it and it acts like other client screens. It hides the screen below it and the hud elements like fps counter. public OnixClientScreen(string name, bool blur = true, bool isFullscreen = true) Parameters name string The name of your script. Only one screen can have that name in this plugin. blur bool If true, the background will be blurred for you. isFullscreen bool If true, it will hide screens below it, the color picker is an example of a screen that is not full screen. Exceptions OnixRuntimeException When the name is already taken by another instance in this plugin. Properties ClickInput Gets the last click since the last time HandleAllInputs() was called. public InputKey.ClickType ClickInput { get; } Property Value InputKey.ClickType IsFullscreen Gets or sets whether the screen is in fullscreen mode. Fullscreen mode hides the screen below it and the hud elements like fps counter. public bool IsFullscreen { get; set; } Property Value bool Position The position you should render the content of your screen at. public Vec2 Position { get; set; } Property Value Vec2 RenderArea Your screen's render area, you should do all rendering within that rectangle. public Rect RenderArea { get; set; } Property Value Rect ScreenName public string ScreenName { get; } Property Value string ScrollCount How many scrolls have been made on this screen since the last time HandleAllInputs() was called. public int ScrollCount { get; } Property Value int Size The size of your screen. Try not to render past Position + Size! public Vec2 Size { get; set; } Property Value Vec2 Methods CloseScreen() Closes the screen now if it's not already closed. public bool CloseScreen() Returns bool Whether the screen was closed or not. Dispose() public void Dispose() ForceDirect2D() Force the use of Direct2D for rendering OnRender(RendererTwoDimentional) and OnRenderClosing(RendererTwoDimentional). public virtual bool ForceDirect2D() Returns bool GetCloseAnimationDuration() How long in seconds is this screen's close animation. Will switch to OnRenderClosing(RendererTwoDimentional) and OnRenderGameClosing(RendererGame) and then call OnCloseFinished() when the time is over. public virtual float GetCloseAnimationDuration() Returns float The duration in question. HandleAllInputs() Handles all inputs for this screen. This will reset the ClickInput and ScrollCount values. public void HandleAllInputs() OnCloseFinished() Called when the screen is finished closing. If you use onix settings and know nothing below you uses settings, you should call SettingsMenuClosed() here. base.OnCloseFinished(); will do that for you. public virtual void OnCloseFinished() OnClosed() Called when the screen has been requested to close, if you return true it will cancel the closing. This is for when you have submenus and want to close just those before closing the main screen. public virtual bool OnClosed() Returns bool true to not close the screen. OnGameWindowResized(Vec2) Called whenever the game's window is resized, allowing you to resize your screen or have custom resize logic. public virtual void OnGameWindowResized(Vec2 windowSize) Parameters windowSize Vec2 The new size of the window. OnInput(InputKey, bool) Called when there is a new input event happening on your screen. Returning true will prevent the screens and game below from receiving it. public virtual bool OnInput(InputKey key, bool isDown) Parameters key InputKey The key that was pressed. isDown bool If it was it getting clicked or not. Returns bool true to mention you handled it and hide it from the screens and game below. OnOpened() Called when the screen is opened. public virtual void OnOpened() OnRender(RendererTwoDimentional) Called when you should render your screen. This could be RednererDirect2D or RendererGame, depending on user preference or ForceDirect2D() public virtual void OnRender(RendererTwoDimentional gfx) Parameters gfx RendererTwoDimentional OnRenderClosing(RendererTwoDimentional) Called when you should render your screen's closing animation. This could be RednererDirect2D or RendererGame, depending on user preference or ForceDirect2D() public virtual void OnRenderClosing(RendererTwoDimentional gfx) Parameters gfx RendererTwoDimentional OnRenderGame(RendererGame) Called when the game is being rendered and your screen is closing. This is useful for getting data from the game since OnRender(RendererTwoDimentional) may be Direct2D. You should use OnRenderClosing(RendererTwoDimentional) to actually render the content. public virtual void OnRenderGame(RendererGame gfx) Parameters gfx RendererGame OnRenderGameClosing(RendererGame) Called when the game is being rendered. This is useful for getting data from the game since OnRenderClosing(RendererTwoDimentional) may be Direct2D. You should use OnRenderClosing(RendererTwoDimentional) to actually render the content. public virtual void OnRenderGameClosing(RendererGame gfx) Parameters gfx RendererGame OnRenderWorld(RendererWorld) Called when the world is being rendered. public virtual void OnRenderWorld(RendererWorld gfx) Parameters gfx RendererWorld OpenScreen() Opens the screen now if it's not already opened. public bool OpenScreen() Returns bool Whether the screen was opened or not. ShouldPreventInputs() Used to tell if the screen should prevent inputs from going to the game or screens below. public virtual bool ShouldPreventInputs() Returns bool"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixClientThemeV3.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixClientThemeV3.html",
    "title": "Class OnixClientThemeV3 | Onix Plugin Documentation",
    "summary": "Class OnixClientThemeV3 Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixClientThemeV3 Inheritance object OnixClientThemeV3 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Accent [JsonPropertyName(\"enabled\")] public OnixSettingColor.ValueType Accent { get; set; } Property Value OnixSettingColor.ValueType Blocked [JsonPropertyName(\"blocked\")] public OnixSettingColor.ValueType Blocked { get; set; } Property Value OnixSettingColor.ValueType Button Most buttons inside the ui use Accent [JsonPropertyName(\"button\")] public OnixSettingColor.ValueType Button { get; set; } Property Value OnixSettingColor.ValueType Disabled [JsonPropertyName(\"disabled\")] public OnixSettingColor.ValueType Disabled { get; set; } Property Value OnixSettingColor.ValueType Highlight [JsonPropertyName(\"highlight\")] public OnixSettingColor.ValueType Highlight { get; set; } Property Value OnixSettingColor.ValueType Outline [JsonPropertyName(\"outline\")] public OnixSettingColor.ValueType Outline { get; set; } Property Value OnixSettingColor.ValueType Scrollbar [JsonPropertyName(\"scrollbar\")] public OnixSettingColor.ValueType Scrollbar { get; set; } Property Value OnixSettingColor.ValueType Text [JsonPropertyName(\"text\")] public OnixSettingColor.ValueType Text { get; set; } Property Value OnixSettingColor.ValueType WindowBackground [JsonPropertyName(\"window_background\")] public OnixSettingColor.ValueType WindowBackground { get; set; } Property Value OnixSettingColor.ValueType"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.html",
    "title": "Enum OnixModule.SettingInsertionPosition | Onix Plugin Documentation",
    "summary": "Enum OnixModule.SettingInsertionPosition Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll The position to insert a setting in the settings list. public enum OnixModule.SettingInsertionPosition Fields After = 3 Adds the setting after the index in the list. Before = 2 Inserts the setting at a specific index in the list. End = 0 Inserts the setting at the end of the list. Start = 1 Inserts the setting at the start of the list."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModule.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModule.html",
    "title": "Class OnixModule | Onix Plugin Documentation",
    "summary": "Class OnixModule Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll A module in the onix client. public class OnixModule : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixModule Implements IDisposable Derived OnixModuleVisual Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixModule(string, string, bool, bool) Creates a new module. public OnixModule(string name, string description, bool includeToggleKey = true, bool register = true) Parameters name string The visual name of the module. description string A description for the module. includeToggleKey bool If the module should have a key to toggle it on and off. register bool If you want to register the module in the client. Exceptions OnixRuntimeException OnixModule(string, string, string, bool, bool) Creates a new module. public OnixModule(string name, string description, string saveName, bool includeToggleKey = true, bool register = true) Parameters name string The visual name of the module. description string A description for the module. saveName string The save name of the module, it will be saved under this name. includeToggleKey bool If the module should have a key to toggle it on and off. register bool If you want to register the module in the client. Exceptions OnixRuntimeException Properties Description The description of the module. public string Description { get; set; } Property Value string Enabled If the module is enabled or not. public bool Enabled { get; set; } Property Value bool IsBlocked public bool IsBlocked { get; } Property Value bool IsFavorite If the module is in the favorites or not. public bool IsFavorite { get; set; } Property Value bool IsHidden If the module is hidden in the UI or not. public bool IsHidden { get; set; } Property Value bool IsToggle Whether the module is a toggle module. If true it means you can enable the mod and it stays on. If false it means you have to hold the key for it to remain on. public bool IsToggle { get; set; } Property Value bool ModuleType The type of module this is. public OnixModuleType ModuleType { get; } Property Value OnixModuleType Name public string Name { get; } Property Value string PluginUuid The UUID of the plugin that created this module or nil if it is not a plugin module. public string? PluginUuid { get; } Property Value string SaveName The name used to save the module. public string SaveName { get; } Property Value string Settings The settings of the module. public OnixSettingsList Settings { get; } Property Value OnixSettingsList ToggleKey The keybind used to toggle the module on and off. public InputKey ToggleKey { get; set; } Property Value InputKey UsesLegacyRenderer Gets or sets whether the visual module uses the legacy rendering system. This property can only be set for C# modules. public bool UsesLegacyRenderer { get; set; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() InsertSetting(OnixSetting, OnixSetting, SettingInsertionPosition, bool) Inserts a setting into a module. public void InsertSetting(OnixSetting setting, OnixSetting settingToUseAsIndex, OnixModule.SettingInsertionPosition mode = SettingInsertionPosition.After, bool correctCategory = true) Parameters setting OnixSetting The setting to add. settingToUseAsIndex OnixSetting A setting that will be your index, only works with before or after modes. mode OnixModule.SettingInsertionPosition Insert it before or after the setting. Any other value is invalid and will default to an index of 0 or 1. correctCategory bool If categories should be corrected to include your setting if they would have. Exceptions SettingAlreadyHasAParentException When the setting already has a parent. ArgumentOutOfRangeException When the setting is inserted at an invalid position. InsertSetting(OnixSetting, int, SettingInsertionPosition, bool) Inserts a setting into a module. Make sure that the setting does not have any parents or it will throw an exception. public void InsertSetting(OnixSetting setting, int index = 0, OnixModule.SettingInsertionPosition mode = SettingInsertionPosition.End, bool correctCategory = true) Parameters setting OnixSetting The setting to insert. index int The index of where you want the setting to be added (depends on mode). mode OnixModule.SettingInsertionPosition How do you want the setting to be inserted. correctCategory bool If categories should be corrected to include your setting if they would have. Exceptions SettingAlreadyHasAParentException When the setting already has a parent. ArgumentOutOfRangeException When the setting is inserted at an invalid position. Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public virtual void Load(JsonNode root) Parameters root JsonNode The json you last saved. LoadFromJson(string) Loads the module from a JSON string. public void LoadFromJson(string json) Parameters json string RefreshSettingsInUI() Refreshes the settings list in the user interface. This is only useful if you edit the settings list while the module's page is opened. public void RefreshSettingsInUI() Save() Saves the setting to json for persistent storage. public virtual JsonNode? Save() Returns JsonNode The json or null if there is nothing to save. SaveAsJson() Gets the serialized JSON of the module. public string SaveAsJson() Returns string The JSON of the module. StopLastCategoryHere() Makes a category stop considering settings that are added after this function was called. public void StopLastCategoryHere()"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleList.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleList.html",
    "title": "Class OnixModuleList | Onix Plugin Documentation",
    "summary": "Class OnixModuleList Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleList : IEnumerable<OnixModule>, IEnumerable Inheritance object OnixModuleList Implements IEnumerable<OnixModule> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixModuleList(IReadOnlyList<OnixModule>, IReadOnlyList<OnixModule>) public OnixModuleList(IReadOnlyList<OnixModule> clientMods, IReadOnlyList<OnixModule> legacyScriptingMods) Parameters clientMods IReadOnlyList<OnixModule> legacyScriptingMods IReadOnlyList<OnixModule> Properties this[int] public OnixModule this[int index] { get; } Parameters index int Property Value OnixModule Length public int Length { get; } Property Value int Size public int Size { get; } Property Value int Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<OnixModule> GetEnumerator() Returns IEnumerator<OnixModule> An enumerator that can be used to iterate through the collection. GetModule(string) Gets a module by its save name. public OnixModule? GetModule(string saveName) Parameters saveName string The save name to search for. Returns OnixModule The module or null if not found."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute.html",
    "title": "Class OnixModuleSettingRedirector.AirAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.AirAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.AirAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.AirAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AirAttribute(float) public AirAttribute(float height) Parameters height float Properties Height public float Height { get; } Property Value float"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute.html",
    "title": "Class OnixModuleSettingRedirector.ButtonAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.ButtonAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.ButtonAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.ButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonAttribute(string, string) public ButtonAttribute(string functionNameInClass, string buttonName) Parameters functionNameInClass string buttonName string Properties ButtonName public string ButtonName { get; } Property Value string FunctionName public string FunctionName { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute.html",
    "title": "Class OnixModuleSettingRedirector.CategoryAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.CategoryAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.CategoryAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.CategoryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CategoryAttribute(string) public CategoryAttribute(string category) Parameters category string Properties Category public string Category { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryStopAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryStopAttribute.html",
    "title": "Class OnixModuleSettingRedirector.CategoryStopAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.CategoryStopAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.CategoryStopAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.CategoryStopAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ChangeCallbackAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ChangeCallbackAttribute.html",
    "title": "Class OnixModuleSettingRedirector.ChangeCallbackAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.ChangeCallbackAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.ChangeCallbackAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.ChangeCallbackAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChangeCallbackAttribute(string) public ChangeCallbackAttribute(string functionNameInClass) Parameters functionNameInClass string Properties FunctionName public string FunctionName { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute.html",
    "title": "Class OnixModuleSettingRedirector.GapAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.GapAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.GapAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.GapAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GapAttribute(float) public GapAttribute(float height) Parameters height float Properties Height public float Height { get; } Property Value float"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.Hidden.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.Hidden.html",
    "title": "Class OnixModuleSettingRedirector.Hidden | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.Hidden Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.Hidden : Attribute Inheritance object Attribute OnixModuleSettingRedirector.Hidden Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.HideColorOpacityAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.HideColorOpacityAttribute.html",
    "title": "Class OnixModuleSettingRedirector.HideColorOpacityAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.HideColorOpacityAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.HideColorOpacityAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.HideColorOpacityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.html",
    "title": "Class OnixModuleSettingRedirector.MaxAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.MaxAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.MaxAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.MaxAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MaxAttribute(int) public MaxAttribute(int max) Parameters max int MaxAttribute(int, int, int) public MaxAttribute(int x, int y, int z) Parameters x int y int z int MaxAttribute(object) public MaxAttribute(object max) Parameters max object MaxAttribute(float) public MaxAttribute(float max) Parameters max float MaxAttribute(float, float) public MaxAttribute(float x, float y) Parameters x float y float MaxAttribute(float, float, float) public MaxAttribute(float x, float y, float z) Parameters x float y float z float Properties Max public object Max { get; } Property Value object"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.html",
    "title": "Class OnixModuleSettingRedirector.MinAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.MinAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.MinAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.MinAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MinAttribute(int) public MinAttribute(int min) Parameters min int MinAttribute(int, int, int) public MinAttribute(int x, int y, int z) Parameters x int y int z int MinAttribute(object) public MinAttribute(object min) Parameters min object MinAttribute(float) public MinAttribute(float min) Parameters min float MinAttribute(float, float) public MinAttribute(float x, float y) Parameters x float y float MinAttribute(float, float, float) public MinAttribute(float x, float y, float z) Parameters x float y float z float Properties Min public object Min { get; } Property Value object"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.html",
    "title": "Class OnixModuleSettingRedirector.MinMaxAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.MinMaxAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.MinMaxAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.MinMaxAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MinMaxAttribute(int, int) public MinMaxAttribute(int min, int max) Parameters min int max int MinMaxAttribute(int, int, int, int, int, int) public MinMaxAttribute(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) Parameters minX int minY int minZ int maxX int maxY int maxZ int MinMaxAttribute(object, object) public MinMaxAttribute(object min, object max) Parameters min object max object MinMaxAttribute(float, float) public MinMaxAttribute(float min, float max) Parameters min float max float MinMaxAttribute(float, float, float, float) public MinMaxAttribute(float minX, float minY, float maxX, float maxY) Parameters minX float minY float maxX float maxY float MinMaxAttribute(float, float, float, float, float, float) public MinMaxAttribute(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) Parameters minX float minY float minZ float maxX float maxY float maxZ float Properties Max public object Max { get; } Property Value object Min public object Min { get; } Property Value object"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.html",
    "title": "Class OnixModuleSettingRedirector.NameAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.NameAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.NameAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.NameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameAttribute(string, string, string?) public NameAttribute(string name, string description, string? saveName = null) Parameters name string description string saveName string Properties Description public string Description { get; } Property Value string Name public string Name { get; } Property Value string SaveName public string? SaveName { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ScaleAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ScaleAttribute.html",
    "title": "Class OnixModuleSettingRedirector.ScaleAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.ScaleAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.ScaleAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.ScaleAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ScaleAttribute(float) public ScaleAttribute(float scale) Parameters scale float Properties Scale public float Scale { get; } Property Value float"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.html",
    "title": "Class OnixModuleSettingRedirector.ValueAttribute | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector.ValueAttribute Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector.ValueAttribute : Attribute Inheritance object Attribute OnixModuleSettingRedirector.ValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValueAttribute(params GamepadInputType[]) public ValueAttribute(params InputKey.GamepadInputType[] value) Parameters value GamepadInputType[] ValueAttribute(Type) public ValueAttribute(InputKey.Type value) Parameters value InputKey.Type ValueAttribute(OnixTextbox) public ValueAttribute(OnixTextbox value) Parameters value OnixTextbox ValueAttribute(bool) public ValueAttribute(bool value) Parameters value bool ValueAttribute(int) public ValueAttribute(int value) Parameters value int ValueAttribute(int, int, int) public ValueAttribute(int x, int y, int z) Parameters x int y int z int ValueAttribute(int, int, int, int) public ValueAttribute(int r, int g, int b, int a) Parameters r int g int b int a int ValueAttribute(object?) public ValueAttribute(object? value) Parameters value object ValueAttribute(float) public ValueAttribute(float value) Parameters value float ValueAttribute(float, float) public ValueAttribute(float x, float y) Parameters x float y float ValueAttribute(float, float, float) public ValueAttribute(float x, float y, float z) Parameters x float y float z float ValueAttribute(float, float, float, float) public ValueAttribute(float r, float g, float b, float a) Parameters r float g float b float a float ValueAttribute(string) public ValueAttribute(string value) Parameters value string Properties Value public object? Value { get; } Property Value object"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.html",
    "title": "Class OnixModuleSettingRedirector | Onix Plugin Documentation",
    "summary": "Class OnixModuleSettingRedirector Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixModuleSettingRedirector Inheritance object OnixModuleSettingRedirector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixModuleSettingRedirector() protected OnixModuleSettingRedirector() OnixModuleSettingRedirector(OnixModule) protected OnixModuleSettingRedirector(OnixModule currentModule) Parameters currentModule OnixModule OnixModuleSettingRedirector(string, string, string, bool) protected OnixModuleSettingRedirector(string name, string description, string saveName, bool register = false) Parameters name string description string saveName string register bool Properties CurrentModule public OnixModule CurrentModule { get; } Property Value OnixModule Methods ConvertModuleToRedirectorClass(OnixModule, string, string, bool, bool) public static string ConvertModuleToRedirectorClass(OnixModule mod, string className, string desiredNamespace, bool includeHidden = true, bool useSaveName = false) Parameters mod OnixModule className string desiredNamespace string includeHidden bool useSaveName bool Returns string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleTextual.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleTextual.html",
    "title": "Class OnixModuleTextual | Onix Plugin Documentation",
    "summary": "Class OnixModuleTextual Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Represents a textual module for the Onix client. public class OnixModuleTextual : OnixModuleVisual, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixModule OnixModuleVisual OnixModuleTextual Implements IDisposable Inherited Members OnixModuleVisual.Position OnixModuleVisual.Size OnixModuleVisual.RelativePosition OnixModuleVisual.AnchorSetting OnixModuleVisual.Anchor OnixModuleVisual.ExpandDirectionSetting OnixModuleVisual.ExpandDirection OnixModuleVisual.ShouldHideInHudEditor OnixModule.Dispose() OnixModule.PluginUuid OnixModule.Name OnixModule.SaveName OnixModule.Description OnixModule.Enabled OnixModule.IsBlocked OnixModule.ToggleKey OnixModule.IsToggle OnixModule.IsFavorite OnixModule.IsHidden OnixModule.UsesLegacyRenderer OnixModule.ModuleType OnixModule.Settings OnixModule.SaveAsJson() OnixModule.LoadFromJson(string) OnixModule.RefreshSettingsInUI() OnixModule.InsertSetting(OnixSetting, int, OnixModule.SettingInsertionPosition, bool) OnixModule.InsertSetting(OnixSetting, OnixSetting, OnixModule.SettingInsertionPosition, bool) OnixModule.StopLastCategoryHere() OnixModule.Save() OnixModule.Load(JsonNode) MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixModuleTextual(string, string, Vec2, VisualAnchor, Vec2, string, bool) Creates a new visual module for your plugin. public OnixModuleTextual(string name, string description, Vec2 position, OnixModuleVisual.VisualAnchor visualAnchor, Vec2 initialSize, string saveName, bool register = true) Parameters name string The display name of the module. description string A description of the module's functionality. position Vec2 The initial position of the module on screen. visualAnchor OnixModuleVisual.VisualAnchor The anchoring position for the module. initialSize Vec2 The initial size of the module. saveName string The name used to save module settings. register bool Indicates whether to register this module with the plugin system. Default is true. Properties Text Gets the text of the module. You may only get the text on the client thread as some mods need to access game data. Sets the text of the module only if it is a C# module. public string Text { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleType.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleType.html",
    "title": "Enum OnixModuleType | Onix Plugin Documentation",
    "summary": "Enum OnixModuleType Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll The type of module this is. public enum OnixModuleType Extension Methods OnixModuleTypeExtensions.IsCSharp(OnixModuleType) OnixModuleTypeExtensions.IsLegacyScript(OnixModuleType) OnixModuleTypeExtensions.IsNative(OnixModuleType) OnixModuleTypeExtensions.IsNormal(OnixModuleType) OnixModuleTypeExtensions.IsTextual(OnixModuleType) OnixModuleTypeExtensions.IsVisual(OnixModuleType) Fields CSharp = 6 A module that is created with a C# plugin. CSharpTextualVisual = 8 Same as TextualVisual but created with C#. CSharpVisual = 7 A module that is created with a C# plugin and is rendering a visual ui element and can be moved around. LegacyScripting = 2 A module that is created with legacy scripting. LegacyScriptingVisual = 3 A module that is created with legacy scripting and is rendering a visual ui element and can be moved around. Module = 0 A normal built in module that isn't rendering a visual ui element. TextualVisual = 4 A built-in specialization of the visual module that handles most things. They have an extra text property and render a visual ui element that is a label with a potential icon. Visual = 1 A built-in module that is rendering a visual ui element and can be moved around."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.html",
    "title": "Class OnixModuleTypeExtensions | Onix Plugin Documentation",
    "summary": "Class OnixModuleTypeExtensions Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Extension methods for the OnixModuleType enum providing helper methods to check module type characteristics. public static class OnixModuleTypeExtensions Inheritance object OnixModuleTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsCSharp(OnixModuleType) Determines if the module type is CSharp in some way. public static bool IsCSharp(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is CSharp-based; otherwise, false. IsLegacyScript(OnixModuleType) Determines if the module type is legacy scripting in some way. public static bool IsLegacyScript(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is based on legacy scripting; otherwise, false. IsNative(OnixModuleType) Determines if the module type is native to the client and not an extension. public static bool IsNative(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is native to the client; otherwise, false. IsNormal(OnixModuleType) Determines if the module type is not visual or textual. public static bool IsNormal(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is considered normal (not specialized); otherwise, false. IsTextual(OnixModuleType) Determines if the module type is textual in some way (that makes it have a Text property). public static bool IsTextual(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is considered textual; otherwise, false. IsVisual(OnixModuleType) Determines if the module type is visual in some way (that makes it have a position, size, anchor etc.). public static bool IsVisual(this OnixModuleType type) Parameters type OnixModuleType The OnixModuleType to check. Returns bool True if the module type is considered visual; otherwise, false."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.html",
    "title": "Enum OnixModuleVisual.ModuleExpandDirection | Onix Plugin Documentation",
    "summary": "Enum OnixModuleVisual.ModuleExpandDirection Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Defines the directions in which a module can expand. public enum OnixModuleVisual.ModuleExpandDirection Fields Automatic = 0 Automatically determines the expansion direction. BottomCenter = 7 Expands from the bottom-center outward. BottomLeft = 3 Expands towards the bottom-left direction. BottomRight = 4 Expands towards the bottom-right direction. Center = 5 Expands from the center outward. CenterLeft = 8 Expands from the center-left outward. CenterRight = 9 Expands from the center-right outward. TopCenter = 6 Expands from the top-center outward. TopLeft = 1 Expands towards the top-left direction. TopRight = 2 Expands towards the top-right direction."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.html",
    "title": "Enum OnixModuleVisual.VisualAnchor | Onix Plugin Documentation",
    "summary": "Enum OnixModuleVisual.VisualAnchor Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Defines the anchoring positions for visual modules. public enum OnixModuleVisual.VisualAnchor Fields Automatic = 0 Automatically determines the anchor position. BottomCenter = 7 Anchors the module to the bottom-center of the screen. BottomLeft = 3 Anchors the module to the bottom-left corner. BottomRight = 4 Anchors the module to the bottom-right corner. Center = 5 Anchors the module to the center of the screen. CenterLeft = 8 Anchors the module to the center-left of the screen. CenterRight = 9 Anchors the module to the center-right of the screen. TopCenter = 6 Anchors the module to the top-center of the screen. TopLeft = 1 Anchors the module to the top-left corner. TopRight = 2 Anchors the module to the top-right corner."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixModuleVisual.html",
    "title": "Class OnixModuleVisual | Onix Plugin Documentation",
    "summary": "Class OnixModuleVisual Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Represents a visual module for the Onix client. public class OnixModuleVisual : OnixModule, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixModule OnixModuleVisual Implements IDisposable Derived OnixModuleTextual Inherited Members OnixModule.Dispose() OnixModule.PluginUuid OnixModule.Name OnixModule.SaveName OnixModule.Description OnixModule.Enabled OnixModule.IsBlocked OnixModule.ToggleKey OnixModule.IsToggle OnixModule.IsFavorite OnixModule.IsHidden OnixModule.UsesLegacyRenderer OnixModule.ModuleType OnixModule.Settings OnixModule.SaveAsJson() OnixModule.LoadFromJson(string) OnixModule.RefreshSettingsInUI() OnixModule.InsertSetting(OnixSetting, int, OnixModule.SettingInsertionPosition, bool) OnixModule.InsertSetting(OnixSetting, OnixSetting, OnixModule.SettingInsertionPosition, bool) OnixModule.StopLastCategoryHere() OnixModule.Save() OnixModule.Load(JsonNode) MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixModuleVisual(string, string, Vec2, VisualAnchor, Vec2, string, bool) Creates a new visual module for your plugin. public OnixModuleVisual(string name, string description, Vec2 position, OnixModuleVisual.VisualAnchor visualAnchor, Vec2 initialSize, string saveName, bool register = true) Parameters name string The display name of the module. description string A description of the module's functionality. position Vec2 The initial position of the module on screen. visualAnchor OnixModuleVisual.VisualAnchor The anchoring position for the module. initialSize Vec2 The initial size of the module. saveName string The name used to save module settings. register bool Indicates whether to register this module with the plugin system. Default is true. Properties Anchor Gets or sets the current active anchor point for the visual module. This represents the actual anchor being used for positioning. public OnixModuleVisual.VisualAnchor Anchor { get; set; } Property Value OnixModuleVisual.VisualAnchor AnchorSetting Gets or sets the configured anchor point setting for the visual module. This determines which part of the screen the module is attached to. public OnixModuleVisual.VisualAnchor AnchorSetting { get; set; } Property Value OnixModuleVisual.VisualAnchor ExpandDirection Gets or sets the current active expansion direction for the visual module. This represents the actual direction being used for expansion. public OnixModuleVisual.ModuleExpandDirection ExpandDirection { get; set; } Property Value OnixModuleVisual.ModuleExpandDirection ExpandDirectionSetting Gets or sets the configured expansion direction setting for the visual module. This determines which way the module expands when its content changes size. public OnixModuleVisual.ModuleExpandDirection ExpandDirectionSetting { get; set; } Property Value OnixModuleVisual.ModuleExpandDirection Position Gets or sets the absolute position of the visual module on the screen. public Vec2 Position { get; set; } Property Value Vec2 RelativePosition Gets or sets the position of the module relative to its anchor point. public Vec2 RelativePosition { get; set; } Property Value Vec2 ShouldHideInHudEditor Gets whether the visual module should be hidden when the HUD editor is active. public bool ShouldHideInHudEditor { get; } Property Value bool Size Gets or sets the size/dimensions of the visual module. public Vec2 Size { get; set; } Property Value Vec2"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate.html",
    "title": "Delegate OnixSetting.SettingChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixSetting.SettingChangedDelegate Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Delegate for handling setting change events. public delegate void OnixSetting.SettingChangedDelegate(OnixModule mod, OnixSetting setting, bool isInit) Parameters mod OnixModule The module that owns this setting. setting OnixSetting The setting that was changed. isInit bool Indicates whether this is the initial value being set from config."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSetting.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSetting.html",
    "title": "Class OnixSetting | Onix Plugin Documentation",
    "summary": "Class OnixSetting Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Represents a base setting for an Onix module. public class OnixSetting : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting Implements IDisposable Derived OnixSettingAir OnixSettingBool OnixSettingButton OnixSettingCategory OnixSettingColor OnixSettingCustom OnixSettingEnum OnixSettingFloat OnixSettingGamepadKeybind OnixSettingInfo OnixSettingInt OnixSettingKeybind OnixSettingLocalizedInfo OnixSettingModuleHeader OnixSettingTextbox OnixSettingVec2 Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _pluginUuid protected string? _pluginUuid Field Value string Properties Description Gets or sets the description of the setting. public string Description { get; set; } Property Value string IsHidden Gets if the setting should be hidden in the ui. public bool IsHidden { get; set; } Property Value bool IsLocked Gets if the setting is locked, that means the value cannot be changed. public bool IsLocked { get; } Property Value bool Name Gets or sets the display name of the setting. public string Name { get; set; } Property Value string ParentModule Gets the module that owns this setting. public OnixModule? ParentModule { get; } Property Value OnixModule SaveName Gets the name used when saving this setting to persistent storage. public string SaveName { get; } Property Value string Type Gets the type of this setting. public OnixSettingType Type { get; } Property Value OnixSettingType Methods ConvertNameToSaveName(string) Converts a normal name to a save name. Essentially removes invalid characters and replaces spaces with underscores, all lowercase. This is useful for custom settings, allowing the user to not provide a save name if they like to live in the edge. protected static string ConvertNameToSaveName(string name) Parameters name string The name to convert. Returns string The save name of the setting. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public virtual void Load(JsonNode root) Parameters root JsonNode The json you last saved. RemoveFromParent(bool) Removes this setting from its parent module. public void RemoveFromParent(bool correctCategory = true) Parameters correctCategory bool Save() Saves the setting to json for persistent storage. public virtual JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingListRenderer.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingListRenderer.html",
    "title": "Class OnixSettingListRenderer | Onix Plugin Documentation",
    "summary": "Class OnixSettingListRenderer Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Represents a renderer for a list of Onix settings, allowing configuration and rendering of settings in a UI. public class OnixSettingListRenderer : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSettingListRenderer Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingListRenderer() Initializes a new instance of the OnixSettingListRenderer class. public OnixSettingListRenderer() Properties ModuleSource Gets or sets the module source for the settings in this renderer. public OnixModule? ModuleSource { get; set; } Property Value OnixModule Padding Gets or sets the padding between settings in the renderer. public float Padding { get; set; } Property Value float Methods GetSettings() Gets the list of settings in this renderer. Note that while this is a List, until you call SetSettings(IReadOnlyList<OnixSetting>) no changes will be made. It is provided as a List so you don't need to create a new list every time you want to add or remove a setting. public List<OnixSetting> GetSettings() Returns List<OnixSetting> The list of the settings in this renderer. Render(Rect, ClickType, int) Renders the settings list at the specified position, handling input and scroll. public void Render(Rect position, InputKey.ClickType click, int scrollCount) Parameters position Rect The position and size to render at. click InputKey.ClickType The click type input. scrollCount int The scroll count input. ResetAnimation() Resets the animation state of the renderer. public void ResetAnimation() ResetScroll() Resets the scroll position of the renderer. public void ResetScroll() SetSettings(IReadOnlyList<OnixSetting>) Sets the list of settings to be rendered. public void SetSettings(IReadOnlyList<OnixSetting> settings) Parameters settings IReadOnlyList<OnixSetting> The settings to render."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingRegistry.OnSettingMenuClosedDelegate.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingRegistry.OnSettingMenuClosedDelegate.html",
    "title": "Delegate OnixSettingRegistry.OnSettingMenuClosedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixSettingRegistry.OnSettingMenuClosedDelegate Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Delegate for handling the closing of the settings menu. public delegate void OnixSettingRegistry.OnSettingMenuClosedDelegate()"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingRegistry.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingRegistry.html",
    "title": "Class OnixSettingRegistry | Onix Plugin Documentation",
    "summary": "Class OnixSettingRegistry Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Provides registration and management of custom Onix settings and their renderers. public class OnixSettingRegistry Inheritance object OnixSettingRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCSharpSetting(OnixSetting) public OnixSetting GetCSharpSetting(OnixSetting setting) Parameters setting OnixSetting Returns OnixSetting GetCSharpSetting(nint) public OnixSetting GetCSharpSetting(nint setting) Parameters setting nint Returns OnixSetting GetCustomSettingType(string) Gets the full custom setting type key for a given name within the current plugin context. public string GetCustomSettingType(string name) Parameters name string The name of the setting type. Returns string The full custom setting type key. GetSettingId(string) Gets the integer ID for a registered setting type. public int GetSettingId(string registeredSettingType) Parameters registeredSettingType string The string key of the registered setting type. Returns int The integer ID of the setting type. Exceptions ArgumentException Thrown if the setting type is not registered. IsValidCustomSetting(string) Determines whether a custom setting type is valid and registered. public bool IsValidCustomSetting(string customSettingType) Parameters customSettingType string The custom setting type key. Returns bool True if the setting type is registered; otherwise, false. RegisterSettingRendererForName<SettingRendererT>(string) Registers a renderer override for a setting type by its name within the current plugin context. public void RegisterSettingRendererForName<SettingRendererT>(string name) where SettingRendererT : OnixSettingRenderer Parameters name string The name of the setting type. Type Parameters SettingRendererT The renderer type to associate. RegisterSettingRendererForType<SettingRendererT>(OnixSettingType) Registers a renderer override for a specific setting type. public void RegisterSettingRendererForType<SettingRendererT>(OnixSettingType settingType) where SettingRendererT : OnixSettingRenderer Parameters settingType OnixSettingType The setting type as an enum value. Type Parameters SettingRendererT The renderer type to associate. RegisterSettingRendererForType<SettingRendererT>(int) Registers a renderer override for a specific setting type ID. public void RegisterSettingRendererForType<SettingRendererT>(int settingType) where SettingRendererT : OnixSettingRenderer Parameters settingType int The integer ID of the setting type. Type Parameters SettingRendererT The renderer type to associate. RegisterSettingRendererForType<SettingRendererT>(string) Registers a renderer override for a setting type by its full string key. public void RegisterSettingRendererForType<SettingRendererT>(string fullSettingType) where SettingRendererT : OnixSettingRenderer Parameters fullSettingType string The full string key of the setting type. Type Parameters SettingRendererT The renderer type to associate. RegisterSettingType<SettingRendererT>(string) Registers a new custom setting type with the specified name and associates it with a renderer type. public string RegisterSettingType<SettingRendererT>(string name) where SettingRendererT : OnixSettingRenderer Parameters name string The name of the setting type. Returns string The unique key for the registered setting type. Type Parameters SettingRendererT The renderer type for the setting. SettingsMenuClosed() Call this when you close a menu/ui that uses setting rendering. public void SettingsMenuClosed() Events OnSettingMenuClosed Event raised when the settings menu is closed. public event OnixSettingRegistry.OnSettingMenuClosedDelegate? OnSettingMenuClosed Event Type OnixSettingRegistry.OnSettingMenuClosedDelegate"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingRenderer.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingRenderer.html",
    "title": "Class OnixSettingRenderer | Onix Plugin Documentation",
    "summary": "Class OnixSettingRenderer Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll This is the base class for all setting renderers. You must create a class that inherits from this and implement the Render and GetHeight function. public class OnixSettingRenderer : IDisposable Inheritance object OnixSettingRenderer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingRenderer(OnixSetting) Initializes a new instance of the OnixSettingRenderer class. protected OnixSettingRenderer(OnixSetting setting) Parameters setting OnixSetting The setting this renderer will be rendering. Fields Setting The setting this renderer is responsible for rendering. public OnixSetting Setting Field Value OnixSetting Methods Dispose() Disposes resources used by the renderer. public void Dispose() GetGlobalPosition(Vec2) Gets the global position of the setting renderer based on the mouse position. public Vec2 GetGlobalPosition(Vec2 mousePosition) Parameters mousePosition Vec2 The local mouse position within the setting. Returns Vec2 The global position as a Vec2. GetHeight(RendererDirect2D) Gets the height of the setting for layout purposes. public virtual float GetHeight(RendererDirect2D gfx) Parameters gfx RendererDirect2D The graphics renderer, used for measuring text or other layout calculations. Returns float The height of the setting in pixels. GetHighlightAdditionalOpacity(Rect, Vec2, int) Returns the additional highlight opacity based on whether the mouse is inside a given region. This animates smoothly, matching the client's highlight behavior. public float GetHighlightAdditionalOpacity(Rect region, Vec2 mousePosition, int id = 0) Parameters region Rect The region to test against. mousePosition Vec2 The current mouse position. id int An optional ID to track multiple highlight regions independently. Returns float Additional opacity to add to your highlight. GetHighlightAdditionalOpacity(Vec2, Vec2, int) Returns the additional highlight opacity based on whether the mouse is within a region defined by size starting at (0,0). This animates smoothly, matching the client's highlight behavior. public float GetHighlightAdditionalOpacity(Vec2 size, Vec2 mousePosition, int id = 0) Parameters size Vec2 The size of the region (assumed to start at origin). mousePosition Vec2 The current mouse position. id int An optional ID to track multiple highlight regions independently. Returns float Additional opacity to add to your highlight. GetHighlightAdditionalOpacity(bool, int) Returns the additional highlight opacity based on whether the mouse is inside a region. This animates smoothly, matching the client's highlight behavior. public float GetHighlightAdditionalOpacity(bool mouseInside, int id = 0) Parameters mouseInside bool True if the mouse is currently inside the region. id int An optional ID to track multiple highlight regions independently. Returns float Additional opacity to add to your highlight. GetHighlightColor(Rect, Vec2, int, OnixClientThemeV3?) Returns the highlight color based on whether the mouse is inside a specified region. This animates smoothly, matching the client's highlight behavior. public OnixSettingColor.ValueType GetHighlightColor(Rect region, Vec2 mousePosition, int id = 0, OnixClientThemeV3? cachedTheme = null) Parameters region Rect The region to test against. mousePosition Vec2 The current mouse position. id int An optional ID to track multiple highlight regions independently. cachedTheme OnixClientThemeV3 Optional cached theme to avoid repeated access to the global theme. Returns OnixSettingColor.ValueType The adjusted highlight color. GetHighlightColor(Vec2, Vec2, int, OnixClientThemeV3?) Returns the highlight color based on whether the mouse is inside a region defined by a size starting at (0,0). This animates smoothly, matching the client's highlight behavior. public OnixSettingColor.ValueType GetHighlightColor(Vec2 size, Vec2 mousePosition, int id = 0, OnixClientThemeV3? cachedTheme = null) Parameters size Vec2 The size of the region (assumed to start at origin). mousePosition Vec2 The current mouse position. id int An optional ID to track multiple highlight regions independently. cachedTheme OnixClientThemeV3 Optional cached theme to avoid repeated access to the global theme. Returns OnixSettingColor.ValueType The adjusted highlight color. GetHighlightColor(bool, int, OnixClientThemeV3?) Returns a highlight color adjusted by the animated opacity effect. This animates smoothly, matching the client's highlight behavior. public OnixSettingColor.ValueType GetHighlightColor(bool mouseInside, int id = 0, OnixClientThemeV3? cachedTheme = null) Parameters mouseInside bool True if the mouse is currently inside the region. id int An optional ID to track multiple highlight regions independently. cachedTheme OnixClientThemeV3 Optional cached theme to avoid repeated access to the global theme. Returns OnixSettingColor.ValueType The adjusted highlight color. GetHighlightLinear(Rect, Vec2, float, int, bool) Gets the linear highlight opacity based on whether the mouse is inside a specified region. This overload checks if the mouse position is within the given rectangle and animates the highlight accordingly. public float GetHighlightLinear(Rect region, Vec2 mousePosition, float animationTime, int id = 0, bool restartSmoothly = false) Parameters region Rect The region to test against. mousePosition Vec2 The current mouse position. animationTime float The time in seconds for the animation to complete. id int An optional ID to track multiple highlight regions independently. restartSmoothly bool If true, the animation will restart smoothly when the mouse enters or exits before the animation is over. Returns float The linear highlight value between 0 and 1. GetHighlightLinear(Vec2, Vec2, float, int, bool) Gets the linear highlight opacity based on whether the mouse is inside a region defined by a size starting at (0,0). public float GetHighlightLinear(Vec2 size, Vec2 mousePosition, float animationTime, int id = 0, bool restartSmoothly = false) Parameters size Vec2 The size of the region (assumed to start at origin). mousePosition Vec2 The current mouse position. animationTime float The time in seconds for the animation to complete. id int An optional ID to track multiple highlight regions independently. restartSmoothly bool If true, the animation will restart smoothly when the mouse enters or exits before the animation is over. Returns float The linear highlight value between 0 and 1. GetHighlightLinear(bool, float, int, bool) Gets the linear highlight opacity based on whether the mouse is inside a given region identified with its id. public float GetHighlightLinear(bool mouseInside, float animationTime, int id = 0, bool restartSmoothly = true) Parameters mouseInside bool True if the mouse is currently inside the region. animationTime float The time in seconds for the animation to complete. id int An optional ID to track multiple highlight regions independently. restartSmoothly bool If true, the animation will restart smoothly when the mouse enters or exits before the animation is over. Returns float The linear highlight value between 0 and 1. HandleNameCopy(Vec2, Vec2, ref ClickType) Handles the developer options name copy shortcuts on your setting renderer. public bool HandleNameCopy(Vec2 size, Vec2 mousePosition, ref InputKey.ClickType click) Parameters size Vec2 The size of the area given to you. mousePosition Vec2 The position of the mouse given to you. click InputKey.ClickType The click input given to you. Returns bool True when the click has been handled here. PreDispose(RendererDirect2D?) Called right before the setting is disposed, on the Direct2D thread, so you can do any cleanup you need to do. public virtual void PreDispose(RendererDirect2D? gfx) Parameters gfx RendererDirect2D The graphics renderer if needed to dispose of some things. Render(RendererDirect2D, Vec2, Vec2, ClickType, bool, bool, bool) Renders the setting. public virtual bool Render(RendererDirect2D gfx, Vec2 size, Vec2 mousePosition, InputKey.ClickType click, bool mouseInside, bool lmbDown, bool rmbDown) Parameters gfx RendererDirect2D The graphics renderer. Use this to render the setting's content. size Vec2 The size of the current setting. mousePosition Vec2 The position of the mouse within that setting. click InputKey.ClickType The click input that was done this frame. mouseInside bool If the mouse is inside the bounds of this setting. lmbDown bool If the left mouse button is held down at this time. Can be used for implementing sliders. rmbDown bool If the right mouse button is held down at this time. Returns bool True if the click was handled; otherwise, false. SetTooltip(string, Rect, Vec2) Sets the tooltip text if the mouse is within the bounds of the specified region. public void SetTooltip(string text, Rect region, Vec2 mousePosition) Parameters text string The text of the tooltip. region Rect The region the tooltip shows up in. mousePosition Vec2 The position of the mouse the Render function gave you. SetTooltip(string, Vec2, Vec2) Sets the tooltip text if the mouse is within the bounds of the setting. public void SetTooltip(string text, Vec2 size, Vec2 mousePosition) Parameters text string The text of the tooltip. size Vec2 The size the Render function gave you. mousePosition Vec2 The position of the mouse the Render function gave you."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingType.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingType.html",
    "title": "Enum OnixSettingType | Onix Plugin Documentation",
    "summary": "Enum OnixSettingType Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Defines the type of a setting in the Onix client. public enum OnixSettingType Extension Methods OnixSettingTypeExtensions.IsCustom(OnixSettingType) OnixSettingTypeExtensions.IsInfo(OnixSettingType) OnixSettingTypeExtensions.IsVisual(OnixSettingType) Fields Air = 100 A setting that represents an empty space of changeable height. Bool = 1 A boolean (true/false) setting. Button = 102 A button setting that can be clicked by the user. Category = 104 A category setting for organizational purposes. Color = 7 A color setting. This allows the user to enter a color. Custom = 150 A custom setting type for specialized functionality. Note that values above 150 are also custom settings. You should use .IsCustom to check for a custom setting's presence. Enum = 10 An enumeration setting. A list of options to choose from that translate to an int. Float = 3 A floating-point number setting. GamepadKeybind = 11 A collection of keybinds for gamepad input. don't have non gamepad keys in this setting. Info = 101 A setting that displays textual information to the user. Essentially a label. Int = 2 An integer number setting. Keybind = 4 A keyboard/mouse/gamepad key binding setting. LocalizedInfo = 105 A setting that displays localized text information to the user. Essentially a label. ModuleHeader = 103 A header for a module section. This should be the first setting in a module and is used internally to generalize rendering. Textbox = 9 A text input setting. This is a textbox that allows the user to enter text. Vec2 = 5 A 2D vector setting. (An x and y float slider.)"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions.html",
    "title": "Class OnixSettingTypeExtensions | Onix Plugin Documentation",
    "summary": "Class OnixSettingTypeExtensions Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public static class OnixSettingTypeExtensions Inheritance object OnixSettingTypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsCustom(OnixSettingType) Checks if the setting type is a custom setting type. Those are used to implement unique looking settings generally per module. Like the crosshair selector in Custom Crosshair module in onix. public static bool IsCustom(this OnixSettingType type) Parameters type OnixSettingType The OnixSettingType to check Returns bool True if the setting type is custom (has a value >= 150), otherwise false IsInfo(OnixSettingType) Checks if the setting type is an info setting or a localized info setting. These types are used for displaying information to the user without storing data. public static bool IsInfo(this OnixSettingType type) Parameters type OnixSettingType The OnixSettingType to check Returns bool True if the setting type is Info or LocalizedInfo, otherwise false IsVisual(OnixSettingType) Checks if the setting type is a visual only type. This means it does not store any persistent data. Custom settings are also included in that category. public static bool IsVisual(this OnixSettingType type) Parameters type OnixSettingType The OnixSettingType to check Returns bool True if the setting type is visual only (has a value >= 100), otherwise false"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.html",
    "title": "Class OnixSettingValueAdapter.SettingNameInfo | Onix Plugin Documentation",
    "summary": "Class OnixSettingValueAdapter.SettingNameInfo Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll protected record OnixSettingValueAdapter.SettingNameInfo : IEquatable<OnixSettingValueAdapter.SettingNameInfo> Inheritance object OnixSettingValueAdapter.SettingNameInfo Implements IEquatable<OnixSettingValueAdapter.SettingNameInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingNameInfo(string, string, string) public SettingNameInfo(string Name, string Description, string SaveName) Parameters Name string Description string SaveName string Properties Description public string Description { get; init; } Property Value string Name public string Name { get; init; } Property Value string SaveName public string SaveName { get; init; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.html",
    "title": "Class OnixSettingValueAdapter | Onix Plugin Documentation",
    "summary": "Class OnixSettingValueAdapter Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public abstract class OnixSettingValueAdapter Inheritance object OnixSettingValueAdapter Derived OnixSettingValueAdapterEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingValueAdapter() public OnixSettingValueAdapter() Properties Redirector public OnixModuleSettingRedirector Redirector { get; protected set; } Property Value OnixModuleSettingRedirector Setting public OnixSetting Setting { get; protected set; } Property Value OnixSetting ValueType public abstract Type ValueType { get; } Property Value Type Methods GetChangeCallback(PropertyInfo) protected OnixSetting.SettingChangedDelegate? GetChangeCallback(PropertyInfo property) Parameters property PropertyInfo Returns OnixSetting.SettingChangedDelegate GetMax<T>(PropertyInfo) protected T GetMax<T>(PropertyInfo property) Parameters property PropertyInfo Returns T Type Parameters T GetMinMax<T>(PropertyInfo) protected (T Min, T Max) GetMinMax<T>(PropertyInfo property) Parameters property PropertyInfo Returns (T Min, T Max) Type Parameters T GetMin<T>(PropertyInfo) protected T GetMin<T>(PropertyInfo property) Parameters property PropertyInfo Returns T Type Parameters T GetName(PropertyInfo) protected OnixSettingValueAdapter.SettingNameInfo GetName(PropertyInfo property) Parameters property PropertyInfo Returns OnixSettingValueAdapter.SettingNameInfo GetValue() public abstract object? GetValue() Returns object GetValue<T>(PropertyInfo) protected T? GetValue<T>(PropertyInfo property) Parameters property PropertyInfo Returns T Type Parameters T HandleAirAndProperties(OnixModule, PropertyInfo, out SettingNameInfo) protected bool HandleAirAndProperties(OnixModule mod, PropertyInfo property, out OnixSettingValueAdapter.SettingNameInfo nameInfo) Parameters mod OnixModule property PropertyInfo nameInfo OnixSettingValueAdapter.SettingNameInfo Returns bool HandlePostProcessing(PropertyInfo) protected void HandlePostProcessing(PropertyInfo property) Parameters property PropertyInfo Initialize(OnixModule, PropertyInfo) public abstract void Initialize(OnixModule mod, PropertyInfo property) Parameters mod OnixModule property PropertyInfo SetValue(object?) public abstract void SetValue(object? value) Parameters value object"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapterRegistry.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingValueAdapterRegistry.html",
    "title": "Class OnixSettingValueAdapterRegistry | Onix Plugin Documentation",
    "summary": "Class OnixSettingValueAdapterRegistry Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public static class OnixSettingValueAdapterRegistry Inheritance object OnixSettingValueAdapterRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAdapter(Type) Gets the adapter for a specific type. public static OnixSettingValueAdapter GetAdapter(Type type) Parameters type Type The type to get an adapter for. Returns OnixSettingValueAdapter The setting adapter or throws. Exceptions NotImplementedException When there is not value adapter for a value type. GetAdapter<T>() Gets the adapter for a specific type. public static OnixSettingValueAdapter GetAdapter<T>() Returns OnixSettingValueAdapter The setting adapter or throws. Type Parameters T he type to get an adapter for. Exceptions NotImplementedException When there is not value adapter for a value type."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixSettingsList.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixSettingsList.html",
    "title": "Class OnixSettingsList | Onix Plugin Documentation",
    "summary": "Class OnixSettingsList Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixSettingsList : IEnumerable<OnixSetting>, IEnumerable Inheritance object OnixSettingsList Implements IEnumerable<OnixSetting> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingsList(IReadOnlyList<OnixSetting>) Creates a new settings list, no reason for you to do this. public OnixSettingsList(IReadOnlyList<OnixSetting> settings) Parameters settings IReadOnlyList<OnixSetting> Fields Settings The actual list of settings, no real reason to use this. public IReadOnlyList<OnixSetting> Settings Field Value IReadOnlyList<OnixSetting> Properties Count The amount of settings in the list. public int Count { get; } Property Value int Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<OnixSetting> GetEnumerator() Returns IEnumerator<OnixSetting> An enumerator that can be used to iterate through the collection. GetSetting(string) Tries to get a setting by its save name or null. public OnixSetting? GetSetting(string saveName) Parameters saveName string the save name of the setting to get. Returns OnixSetting The setting by that name or null. GetSetting<T>(string) Tries to get a setting by its save name or null. public T? GetSetting<T>(string saveName) where T : OnixSetting Parameters saveName string the save name of the setting to get. Returns T The setting by that name or null. Type Parameters T The setting type to get."
  },
  "docs/OnixRuntime.Api.OnixClient.OnixWaypoint.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixWaypoint.html",
    "title": "Class OnixWaypoint | Onix Plugin Documentation",
    "summary": "Class OnixWaypoint Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll Represents a waypoint in the onix client. public class OnixWaypoint Inheritance object OnixWaypoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixWaypoint(string, BlockPos, DimensionType) Creates a new OnixWaypoint with the given name, position and dimension. This will NOT add it to the waypoint manager. You still need to call Add(OnixWaypoint). public OnixWaypoint(string name, BlockPos position, DimensionType dimension = DimensionType.Overworld) Parameters name string The name of the new waypoint position BlockPos The position of the new waypoint dimension DimensionType Properties AlwaysShowAcrossDimensions [JsonPropertyName(\"always_show_across_dimensions\")] public bool AlwaysShowAcrossDimensions { get; set; } Property Value bool AutomaticallyUpdateWaypointWhenChanged Whether the waypoint should automatically update in the client when you change any of the properties of the waypoint. [JsonIgnore] public bool AutomaticallyUpdateWaypointWhenChanged { get; set; } Property Value bool Color The color of the waypoint. This is not implemented right now in the client. It will be part of a future waypoint update. [JsonPropertyName(\"color\")] public OnixSettingColor.ValueType Color { get; set; } Property Value OnixSettingColor.ValueType Dimension The dimension of the waypoint. [JsonPropertyName(\"dimension_id\")] public DimensionType Dimension { get; set; } Property Value DimensionType Id The unique ID of the waypoint. [JsonInclude] [JsonPropertyName(\"id\")] public ulong Id { get; } Property Value ulong Name The name of the waypoint. [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Position The position of the waypoint in its dimension. [JsonIgnore] public BlockPos Position { get; set; } Property Value BlockPos RemoveOnArrival Whether the waypoint should be removed when the player arrives near it. [JsonPropertyName(\"remove_on_arrival\")] public bool RemoveOnArrival { get; set; } Property Value bool ShowBeam Whether the waypoint should show a beam in the world. This is not implemented right now in the client. It will be part of a future waypoint update. [JsonPropertyName(\"show_beam\")] public bool ShowBeam { get; set; } Property Value bool ShowCircle Whether the waypoint should show a circle in the world. This is not implemented right now in the client. It will be part of a future waypoint update. [JsonPropertyName(\"show_circle\")] public bool ShowCircle { get; set; } Property Value bool ShowText Whether the waypoint should show text in the world. [JsonPropertyName(\"show_text\")] public bool ShowText { get; set; } Property Value bool Temporary [JsonPropertyName(\"remove_on_world_closed\")] public bool Temporary { get; set; } Property Value bool TranslatePosition Whether the waypoint should be translated to the player's current dimension coordinates. This does nothing unless AlwaysShowAcrossDimensions is true. [JsonPropertyName(\"translate_position\")] public bool TranslatePosition { get; set; } Property Value bool Visible [JsonPropertyName(\"visible\")] public bool Visible { get; set; } Property Value bool X The X position of the waypoint in its dimension. [JsonPropertyName(\"x\")] public int X { get; set; } Property Value int Y The Y position of the waypoint in its dimension. [JsonPropertyName(\"y\")] public int Y { get; set; } Property Value int Z The Z position of the waypoint in its dimension. [JsonPropertyName(\"z\")] public int Z { get; set; } Property Value int Methods Create() Creates a brand new OnixWaypoint. You should probably use Create(string, BlockPos, DimensionType) instead of this. If you don't make sure to set at least the name, position and dimension. This will NOT add it to the waypoint manager. You still need to call Add(OnixWaypoint). public static OnixWaypoint Create() Returns OnixWaypoint The created waypoint. Create(string, BlockPos, DimensionType) Creates a new OnixWaypoint with the given name, position and dimension. This will NOT add it to the waypoint manager. You still need to call Add(OnixWaypoint). public static OnixWaypoint Create(string name, BlockPos position, DimensionType dimension = DimensionType.Overworld) Parameters name string The name of the new waypoint position BlockPos The position of the new waypoint dimension DimensionType Returns OnixWaypoint The brand-new waypoint, fresh from the oven. Delete() Deletes the waypoint from the waypoint manager. public void Delete() Exceptions WaypointsNotEnabledException"
  },
  "docs/OnixRuntime.Api.OnixClient.OnixWaypointManager.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.OnixWaypointManager.html",
    "title": "Class OnixWaypointManager | Onix Plugin Documentation",
    "summary": "Class OnixWaypointManager Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class OnixWaypointManager : IEnumerable<OnixWaypoint>, IEnumerable Inheritance object OnixWaypointManager Implements IEnumerable<OnixWaypoint> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Enabled Checks if the waypoint mod is enabled, you can also force it on by setting this to true. If waypoints is not the primary purpose of your mod you should probably not force it on. You should probably check if it's enabled and maybe show a little warning to the user. public bool Enabled { get; set; } Property Value bool Waypoints The list of all waypoints. Note that you can make your for loop on the waypoint manager, no need to do Waypoints.Waypoints foreach (var waypoint in Onix.Client.Waypoints) { // ... } You can iterate over this list even when the waypoint mod is off, it is the only exception. When it is disabled you will get an empty list. public IReadOnlyList<OnixWaypoint> Waypoints { get; } Property Value IReadOnlyList<OnixWaypoint> Methods Add(OnixWaypoint) Adds a waypoint, this will always add a new waypoint unless Enabled is false. public void Add(OnixWaypoint waypoint) Parameters waypoint OnixWaypoint Exceptions WaypointsNotEnabledException AddOrUpdate(OnixWaypoint) Adds or updates a waypoint. Note that if your waypoint does not have an ID, it will be added as a new waypoint always. If you use an existing waypoint that has an ID, you do not need to call this method when AutomaticallyUpdateWaypointWhenChanged is true. If making a lot of changes/updates, you should set that to false and call this method manually. public void AddOrUpdate(OnixWaypoint waypoint) Parameters waypoint OnixWaypoint The waypoint to add or update Exceptions WaypointsNotEnabledException Clear() Removes all waypoints. public void Clear() Exceptions WaypointsNotEnabledException Find(string) Finds a waypoint by its exact case-sensitive name. This will give you the first one that matches that name. If you want all of them you can call FindAll(string, bool) or FindAll(Func<OnixWaypoint, bool>). public OnixWaypoint? Find(string name) Parameters name string The name to look for. Returns OnixWaypoint The waypoint or null. Exceptions WaypointsNotEnabledException FindAll(Func<OnixWaypoint, bool>) Finds all waypoints that match the predicate. public IEnumerable<OnixWaypoint> FindAll(Func<OnixWaypoint, bool> match) Parameters match Func<OnixWaypoint, bool> The predicate to test against. Returns IEnumerable<OnixWaypoint> Exceptions WaypointsNotEnabledException FindAll(string, bool) Finds all waypoints that match the name. You can make use contains instead of == but it will remain case-sensitive. If you want more control you should use FindAll(Func<OnixWaypoint, bool>). public IReadOnlyList<OnixWaypoint> FindAll(string name, bool useContains = false) Parameters name string The name of the waypoints to try to find. useContains bool If it should use .Contains() instead of == for comparison. Returns IReadOnlyList<OnixWaypoint> A list of every waypoint that were found. Exceptions WaypointsNotEnabledException FirstOrDefault(Func<OnixWaypoint, bool>) Finds a waypoint by using a predicate. This will return the first waypoint that matches the predicate. If nothing matches the predicate, you get null. If you want all the waypoints that match the predicate, you can call FindAll(Func<OnixWaypoint, bool>). public OnixWaypoint? FirstOrDefault(Func<OnixWaypoint, bool> match) Parameters match Func<OnixWaypoint, bool> The predicate to test against. Returns OnixWaypoint Exceptions WaypointsNotEnabledException GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<OnixWaypoint> GetEnumerator() Returns IEnumerator<OnixWaypoint> An enumerator that can be used to iterate through the collection. GetWaypoint(ulong) Gets a waypoint by its ID. public OnixWaypoint? GetWaypoint(ulong id) Parameters id ulong The id of the waypoint to try to get. Returns OnixWaypoint The waypoint or null when it no longer exists. Exceptions WaypointsNotEnabledException Remove(OnixWaypoint) Removes a waypoint. public bool Remove(OnixWaypoint waypoint) Parameters waypoint OnixWaypoint The waypoint to remove. Returns bool True when the was removed successfully. Remove(string, bool, bool) Removes a waypoint or multiple waypoints by their name. public bool Remove(string name, bool all = true, bool useContains = false) Parameters name string The case-sensitive name of the waypoint to delete. all bool If all waypoints matching that name should be deleted or just the first one. useContains bool If it should use .Contains() instead of == for comparison. Returns bool Exceptions WaypointsNotEnabledException Remove(ulong) Removes a waypoint by its ID. public bool Remove(ulong id) Parameters id ulong The id of the waypoint to remove. Returns bool True if the waypoint was removed successfully. Exceptions WaypointsNotEnabledException RemoveAll(Predicate<OnixWaypoint>) Removes all waypoints that match a predicate. public bool RemoveAll(Predicate<OnixWaypoint> match) Parameters match Predicate<OnixWaypoint> The predicate to try to match. Returns bool True when at least one waypoint was removed. Exceptions WaypointsNotEnabledException Save() Forces a save of the waypoints, you don't really need to call this ever as any change you make should internally call this. public void Save() Exceptions WaypointsNotEnabledException SetCustomWorldName(string) If you provide an empty string, this will load waypoints from the normal location for the current world. If you provide a custom world name, this will load waypoints from the custom location of that name. This is the equivalent of \".waypoint setworld worldName\" in the client public void SetCustomWorldName(string worldName) Parameters worldName string The custom world name to load from. Exceptions WaypointsNotEnabledException Make sure that Enabled is true before you call this!"
  },
  "docs/OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException.html",
    "title": "Class SettingAlreadyHasAParentException | Onix Plugin Documentation",
    "summary": "Class SettingAlreadyHasAParentException Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class SettingAlreadyHasAParentException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException SettingAlreadyHasAParentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingAlreadyHasAParentException(string) public SettingAlreadyHasAParentException(string message) Parameters message string"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException.html",
    "title": "Class InvalidOnixEnumValueException | Onix Plugin Documentation",
    "summary": "Class InvalidOnixEnumValueException Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Exception thrown when an invalid value is set for an Onix enum setting. public class InvalidOnixEnumValueException : Exception, ISerializable Inheritance object Exception InvalidOnixEnumValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidOnixEnumValueException() Initializes a new instance of the InvalidOnixEnumValueException class. public InvalidOnixEnumValueException() InvalidOnixEnumValueException(string) Initializes a new instance of the InvalidOnixEnumValueException class with a specified error message. public InvalidOnixEnumValueException(string message) Parameters message string The error message. InvalidOnixEnumValueException(string, Exception) Initializes a new instance of the InvalidOnixEnumValueException class with a specified error message and inner exception. public InvalidOnixEnumValueException(string message, Exception inner) Parameters message string The error message. inner Exception The inner exception."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingAir.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingAir.html",
    "title": "Class OnixSettingAir | Onix Plugin Documentation",
    "summary": "Class OnixSettingAir Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an Onix setting for air, allowing getting and setting the air value for a module. public sealed class OnixSettingAir : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingAir Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingAir(OnixModule?, float) Initializes a new instance of the OnixSettingAir class with the specified module and air value. public OnixSettingAir(OnixModule? mod, float air) Parameters mod OnixModule The Onix module. air float The air value. Properties Air Gets or sets the air value for this setting. public float Air { get; set; } Property Value float"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.html",
    "title": "Class OnixSettingBool | Onix Plugin Documentation",
    "summary": "Class OnixSettingBool Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an Onix setting for a boolean value, allowing getting and setting the value and default for a module. public sealed class OnixSettingBool : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingBool Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingBool(OnixModule?, string, bool, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingBool class with the specified module, name, default value, description, and change callback. public OnixSettingBool(OnixModule? mod, string name, bool defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue bool The default boolean value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingBool(OnixModule?, string, string, bool, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingBool class with the specified module, name, default value, description, and change callback. public OnixSettingBool(OnixModule? mod, string name, string saveName, bool defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue bool The default boolean value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default boolean value for this setting. public bool Default { get; set; } Property Value bool Value Gets or sets the current boolean value for this setting. public bool Value { get; set; } Property Value bool ValueInit Gets or sets the current boolean value for this setting. This variant will call the on setting changed with the isInit flag set to true. public bool ValueInit { get; set; } Property Value bool Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.html",
    "title": "Class OnixSettingButton | Onix Plugin Documentation",
    "summary": "Class OnixSettingButton Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an Onix setting for a button, allowing configuration of button text and click behavior for a module. public sealed class OnixSettingButton : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingButton Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingButton(OnixModule?, string, string, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingButton class with the specified module, name, button text, description, and change callback. public OnixSettingButton(OnixModule? mod, string name, string buttonText, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. buttonText string The text displayed on the button. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the button is clicked. Properties ButtonText Gets or sets the text displayed on the button. public string ButtonText { get; set; } Property Value string Methods Click() Invokes the button's click action, triggering the change callback. public void Click()"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.html",
    "title": "Class OnixSettingCategory | Onix Plugin Documentation",
    "summary": "Class OnixSettingCategory Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an Onix setting category, allowing grouping of settings with control over included count and open state. public sealed class OnixSettingCategory : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingCategory Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingCategory(OnixModule?, string, string, int, bool) Initializes a new instance of the OnixSettingCategory class with the specified parent module, name, description, included count, and open state. public OnixSettingCategory(OnixModule? parentModule, string name, string description = \"\", int included = 2147483647, bool isOpen = true) Parameters parentModule OnixModule The parent Onix module. name string The name of the category. description string The description of the category. included int The number of settings included in this category. isOpen bool Whether the category is open by default. Properties IncludedCount Gets or sets the number of settings included in this category. public int IncludedCount { get; set; } Property Value int IncludesEverytingUntilNextCategory Gets a value indicating whether this category includes everything until the next category. public bool IncludesEverytingUntilNextCategory { get; } Property Value bool IsOpen Gets or sets a value indicating whether the category is open. public bool IsOpen { get; set; } Property Value bool"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.html",
    "title": "Class OnixSettingColor.ValueType | Onix Plugin Documentation",
    "summary": "Class OnixSettingColor.ValueType Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents the value type for a color setting, including color, opacity, rainbow, and chroma options. public class OnixSettingColor.ValueType Inheritance object OnixSettingColor.ValueType Derived OnixSettingColor.ValueTypeMutable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValueType(ColorF, bool, bool, bool) Initializes a new instance of the OnixSettingColor.ValueType class. public ValueType(ColorF color, bool showOpacity = true, bool isRainbow = false, bool isChroma = false) Parameters color ColorF The color value. showOpacity bool Whether to show opacity. isRainbow bool Whether the color is a rainbow effect. isChroma bool Whether the color is a chroma effect. Fields Color The color value. public readonly ColorF Color Field Value ColorF IsChroma Indicates if the color is a chroma effect. public readonly bool IsChroma Field Value bool IsRainbow Indicates if the color is a rainbow effect. public readonly bool IsRainbow Field Value bool ShowOpacity Indicates if opacity is shown. public readonly bool ShowOpacity Field Value bool Methods FromJson(JsonNode) Creates a new value type from json. public static OnixSettingColor.ValueType FromJson(JsonNode json) Parameters json JsonNode The json node to read from. Returns OnixSettingColor.ValueType The new value type. ToJson() Converts the value to json. public JsonNode ToJson() Returns JsonNode A json node for this class. WithColor(ColorF) Creates an identical value type but with a different color. public OnixSettingColor.ValueType WithColor(ColorF value) Parameters value ColorF The new color to make a copy with. Returns OnixSettingColor.ValueType The new color with the other settings intact. WithOpacity(ColorF) Creates an identical value type but with a different color. public OnixSettingColor.ValueType WithOpacity(ColorF value) Parameters value ColorF The new color to make a copy with. Returns OnixSettingColor.ValueType The new color with the other settings intact. Operators implicit operator ValueType(ColorF) public static implicit operator OnixSettingColor.ValueType(ColorF color) Parameters color ColorF Returns OnixSettingColor.ValueType implicit operator ColorF(ValueType) public static implicit operator ColorF(OnixSettingColor.ValueType color) Parameters color OnixSettingColor.ValueType Returns ColorF"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.html",
    "title": "Class OnixSettingColor.ValueTypeMutable | Onix Plugin Documentation",
    "summary": "Class OnixSettingColor.ValueTypeMutable Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents the value type for a color setting, including color, opacity, rainbow, and chroma options. public class OnixSettingColor.ValueTypeMutable : OnixSettingColor.ValueType Inheritance object OnixSettingColor.ValueType OnixSettingColor.ValueTypeMutable Inherited Members OnixSettingColor.ValueType.WithColor(ColorF) OnixSettingColor.ValueType.WithOpacity(ColorF) OnixSettingColor.ValueType.ToJson() OnixSettingColor.ValueType.FromJson(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValueTypeMutable(ColorF, bool, bool, bool) Initializes a new instance of the OnixSettingColor.ValueType class. public ValueTypeMutable(ColorF color, bool showOpacity = true, bool isRainbow = false, bool isChroma = false) Parameters color ColorF The color value. showOpacity bool Whether to show opacity. isRainbow bool Whether the color is a rainbow effect. isChroma bool Whether the color is a chroma effect. Fields Color The color value. public ColorF Color Field Value ColorF IsChroma Indicates if the color is a chroma effect. public bool IsChroma Field Value bool IsRainbow Indicates if the color is a rainbow effect. public bool IsRainbow Field Value bool ShowOpacity Indicates if opacity is shown. public bool ShowOpacity Field Value bool"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.html",
    "title": "Class OnixSettingColor | Onix Plugin Documentation",
    "summary": "Class OnixSettingColor Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an Onix setting for a color value, supporting advanced options like opacity, rainbow, and chroma effects. public sealed class OnixSettingColor : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingColor Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingColor(OnixModule?, string, ColorF, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingColor class with a ColorF default value. public OnixSettingColor(OnixModule? mod, string name, ColorF defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue ColorF The default color value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingColor(OnixModule?, string, ValueType, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingColor class with a ValueType default value. public OnixSettingColor(OnixModule? mod, string name, OnixSettingColor.ValueType defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue OnixSettingColor.ValueType The default color value type. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingColor(OnixModule?, string, string, ColorF, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingColor class with a ColorF default value. public OnixSettingColor(OnixModule? mod, string name, string saveName, ColorF defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue ColorF The default color value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingColor(OnixModule?, string, string, ValueType, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingColor class with a ValueType default value. public OnixSettingColor(OnixModule? mod, string name, string saveName, OnixSettingColor.ValueType defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue OnixSettingColor.ValueType The default color value type. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default color value type for this setting. public OnixSettingColor.ValueType Default { get; set; } Property Value OnixSettingColor.ValueType DefaultColor Gets or sets the default color value. public ColorF DefaultColor { get; set; } Property Value ColorF DefaultIsChroma Gets or sets whether the default value is a chroma effect. public bool DefaultIsChroma { get; set; } Property Value bool DefaultIsRainbow Gets or sets whether the default value is a rainbow effect. public bool DefaultIsRainbow { get; set; } Property Value bool DefaultShowOpacity Gets or sets whether opacity is shown for the default value. public bool DefaultShowOpacity { get; set; } Property Value bool RainbowColor The rainbow color the client uses, this one can be changed by the user in Color Options. public static ColorF RainbowColor { get; } Property Value ColorF RainbowPastel A rainbow color that changes over time of the pastel variety. public static ColorF RainbowPastel { get; } Property Value ColorF Value Gets or sets the current color value type for this setting. public OnixSettingColor.ValueType Value { get; set; } Property Value OnixSettingColor.ValueType ValueColor Gets or sets the color value of the current setting. public ColorF ValueColor { get; set; } Property Value ColorF ValueInit Gets or sets the current color value type for this setting. This variant will call the on setting changed with the isInit flag set to true. public OnixSettingColor.ValueType ValueInit { get; set; } Property Value OnixSettingColor.ValueType ValueIsChroma Gets or sets whether the current value is a chroma effect. public bool ValueIsChroma { get; set; } Property Value bool ValueIsRainbow Gets or sets whether the current value is a rainbow effect. public bool ValueIsRainbow { get; set; } Property Value bool ValueShowOpacity Gets or sets whether opacity is shown for the current value. public bool ValueShowOpacity { get; set; } Property Value bool Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor_ValueTypeConverter.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor_ValueTypeConverter.html",
    "title": "Class OnixSettingColor_ValueTypeConverter | Onix Plugin Documentation",
    "summary": "Class OnixSettingColor_ValueTypeConverter Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll public class OnixSettingColor_ValueTypeConverter : JsonConverter<OnixSettingColor.ValueType> Inheritance object JsonConverter JsonConverter<OnixSettingColor.ValueType> OnixSettingColor_ValueTypeConverter Inherited Members JsonConverter<OnixSettingColor.ValueType>.CanConvert(Type) JsonConverter<OnixSettingColor.ValueType>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<OnixSettingColor.ValueType>.WriteAsPropertyName(Utf8JsonWriter, OnixSettingColor.ValueType, JsonSerializerOptions) JsonConverter<OnixSettingColor.ValueType>.HandleNull JsonConverter<OnixSettingColor.ValueType>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type OnixSettingColor.ValueType. public override OnixSettingColor.ValueType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns OnixSettingColor.ValueType The converted value. Write(Utf8JsonWriter, ValueType, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, OnixSettingColor.ValueType value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value OnixSettingColor.ValueType The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor_ValueTypeMutableConverter.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingColor_ValueTypeMutableConverter.html",
    "title": "Class OnixSettingColor_ValueTypeMutableConverter | Onix Plugin Documentation",
    "summary": "Class OnixSettingColor_ValueTypeMutableConverter Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll public class OnixSettingColor_ValueTypeMutableConverter : JsonConverter<OnixSettingColor.ValueTypeMutable> Inheritance object JsonConverter JsonConverter<OnixSettingColor.ValueTypeMutable> OnixSettingColor_ValueTypeMutableConverter Inherited Members JsonConverter<OnixSettingColor.ValueTypeMutable>.CanConvert(Type) JsonConverter<OnixSettingColor.ValueTypeMutable>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<OnixSettingColor.ValueTypeMutable>.WriteAsPropertyName(Utf8JsonWriter, OnixSettingColor.ValueTypeMutable, JsonSerializerOptions) JsonConverter<OnixSettingColor.ValueTypeMutable>.HandleNull JsonConverter<OnixSettingColor.ValueTypeMutable>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type OnixSettingColor.ValueTypeMutable. public override OnixSettingColor.ValueTypeMutable? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns OnixSettingColor.ValueTypeMutable The converted value. ReadStatic(ref Utf8JsonReader, Type, JsonSerializerOptions) public static OnixSettingColor.ValueTypeMutable? ReadStatic(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns OnixSettingColor.ValueTypeMutable Write(Utf8JsonWriter, ValueTypeMutable, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, OnixSettingColor.ValueTypeMutable value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value OnixSettingColor.ValueTypeMutable The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use. WriteStatic(Utf8JsonWriter, ValueType, JsonSerializerOptions) public static void WriteStatic(Utf8JsonWriter writer, OnixSettingColor.ValueType value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value OnixSettingColor.ValueType options JsonSerializerOptions"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.html",
    "title": "Class OnixSettingCustom | Onix Plugin Documentation",
    "summary": "Class OnixSettingCustom Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a custom Onix setting, allowing creation of settings with user-defined types registered in the setting registry. public class OnixSettingCustom : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingCustom Implements IDisposable Inherited Members OnixSetting._pluginUuid OnixSetting.Dispose() OnixSetting.ConvertNameToSaveName(string) OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingCustom(OnixModule?, string, bool, SettingChangedDelegate?) Initializes a new instance of the OnixSettingCustom class with the specified module, registered setting type, type name mode, and change callback. public OnixSettingCustom(OnixModule? mod, string registeredSettingType, bool isJustName = true, OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. registeredSettingType string The registered custom setting type name. isJustName bool If true, prepends the plugin UUID to the type name. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingCustom(OnixModule?, string, string, string, string, SettingChangedDelegate?, bool) Initializes a new instance of the OnixSettingCustom class with the specified module, registered setting type, name, description, change callback, and type name mode. public OnixSettingCustom(OnixModule? mod, string registeredSettingType, string saveName, string name = \"\", string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null, bool isJustName = true) Parameters mod OnixModule The Onix module. registeredSettingType string The registered custom setting type name. saveName string The save name of the setting, this allows the name to change without losing user settings. For this setting only, a \"\" value will force it to only use name. name string The name of the setting. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. isJustName bool If true, prepends the plugin UUID to the type name. Exceptions ArgumentException Thrown if the setting type is not registered. Methods CallValueChangedCallback(bool) Calls the value changed callback for this setting. You should call this on Load(JsonNode) with isInit set to true. isInit should be true when it loads the value and it isn't a user's change. public void CallValueChangedCallback(bool isInit = false) Parameters isInit bool Is this from initial config read or did the user change it?"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.html",
    "title": "Class OnixSettingEnum.EnumEntries | Onix Plugin Documentation",
    "summary": "Class OnixSettingEnum.EnumEntries Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a collection of enum entries, adding some convenience function. public class OnixSettingEnum.EnumEntries : IEnumerable<OnixSettingEnum.EnumEntry>, IEnumerable Inheritance object OnixSettingEnum.EnumEntries Implements IEnumerable<OnixSettingEnum.EnumEntry> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnumEntries() Creates a new enum entries collection with an empty list. public EnumEntries() EnumEntries(List<EnumEntry>?) Creates a new enum entries collection with a list of entries. If values is null it will default to an empty list. public EnumEntries(List<OnixSettingEnum.EnumEntry>? values) Parameters values List<OnixSettingEnum.EnumEntry> The entries of this enum. Properties Count How many options there are. public int Count { get; } Property Value int Values The actual list of enum entries. public List<OnixSettingEnum.EnumEntry> Values { get; } Property Value List<OnixSettingEnum.EnumEntry> Methods Add(string, int) Adds a new entry to the list. public void Add(string name, int value) Parameters name string The name of the value for the new entry. value int The value for the new entry. Add<T>(string, T) Adds a new entry to the list. public void Add<T>(string name, T value) where T : Enum Parameters name string The name of the value for the new entry. value T The value for the new entry. Type Parameters T FromEnum(Type) Creates a new enum entries collection from a C# enum. public static OnixSettingEnum.EnumEntries FromEnum(Type type) Parameters type Type The type of the enum. Returns OnixSettingEnum.EnumEntries The new entries generated from that enum. Exceptions ArgumentException Thrown when the type is not an enum! FromEnum<T>() Creates a new enum entries collection from a C# enum. public static OnixSettingEnum.EnumEntries FromEnum<T>() where T : Enum Returns OnixSettingEnum.EnumEntries The new entries generated from that enum. Type Parameters T The type of the enum. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<OnixSettingEnum.EnumEntry> GetEnumerator() Returns IEnumerator<OnixSettingEnum.EnumEntry> An enumerator that can be used to iterate through the collection. GetNameForValue(int) Gets the name of a specific value in this enum. public string? GetNameForValue(int value) Parameters value int The value to get the name of. Returns string The name of the value or nil if it could not be found GetNameForValue<T>(T) Gets the name of a specific value in this enum. public string? GetNameForValue<T>(T value) where T : Enum Parameters value T The value to get the name of. Returns string The name of the value or nil if it could not be found Type Parameters T The enum type to interpret it as. GetValueForName(string) Gets the value of a specific name in this enum if found. public int? GetValueForName(string name) Parameters name string The name of the value to find. Returns int? The value or null. GetValueForName<T>(string) Gets the value of a specific name in this enum if found as a C# enum. public T? GetValueForName<T>(string name) where T : Enum Parameters name string The name of the value to find. Returns T The value or null. Type Parameters T The enum type to interpret it as."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.html",
    "title": "Class OnixSettingEnum.EnumEntry | Onix Plugin Documentation",
    "summary": "Class OnixSettingEnum.EnumEntry Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an entry in an enum setting. public class OnixSettingEnum.EnumEntry Inheritance object OnixSettingEnum.EnumEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnumEntry(int, string) Creates a new enum entry. public EnumEntry(int value, string name) Parameters value int The value for the entry. name string The name of the value for this entry. Properties Name The name for this enum entry's value. [JsonPropertyName(\"name\")] public string Name { get; } Property Value string Value The actual value of this enum entry. [JsonPropertyName(\"value\")] public int Value { get; } Property Value int Methods As<T>() Convenience function to convert this enum entry's value to a specific C# enum type. public T As<T>() where T : Enum Returns T The value as that enum Type Parameters T The type of the C# Enum."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.html",
    "title": "Class OnixSettingEnum | Onix Plugin Documentation",
    "summary": "Class OnixSettingEnum Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an enum setting. public sealed class OnixSettingEnum : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingEnum Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingEnum(OnixModule?, string, int, EnumEntries, string, SettingChangedDelegate?) Creates a new enum setting. public OnixSettingEnum(OnixModule? mod, string name, int defaultValue, OnixSettingEnum.EnumEntries options, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The mod to add this setting to or null. name string The name of this setting in the ui. defaultValue int The default value of the setting. options OnixSettingEnum.EnumEntries All possible options that can be chosen. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate A function to call whenever the setting is changed or null. OnixSettingEnum(OnixModule?, string, string, int, EnumEntries, string, SettingChangedDelegate?) Creates a new enum setting. public OnixSettingEnum(OnixModule? mod, string name, string saveName, int defaultValue, OnixSettingEnum.EnumEntries options, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The mod to add this setting to or null. name string The name of this setting in the ui. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue int The default value of the setting. options OnixSettingEnum.EnumEntries All possible options that can be chosen. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate A function to call whenever the setting is changed or null. Properties Default The default value of the setting. public int Default { get; set; } Property Value int Exceptions InvalidOnixEnumValueException Throws if the value you set is not in the enum's options. Options The options for this enum setting. public OnixSettingEnum.EnumEntries Options { get; set; } Property Value OnixSettingEnum.EnumEntries Value The value of the setting. public int Value { get; set; } Property Value int Exceptions InvalidOnixEnumValueException Throws if the value you set is not in the enum's options. ValueInit The value of the setting. This variant will call the on setting changed with the isInit flag set to true. public int ValueInit { get; set; } Property Value int Exceptions InvalidOnixEnumValueException Throws if the value you set is not in the enum's options. Methods DefaultAs<T>() Gets the default value of the setting as a C# enum. public T DefaultAs<T>() where T : Enum Returns T The default value as the desired C# enum. Type Parameters T The type of the enum. DefaultAs<T>(T) Sets the default value of the setting from a C# enum. public void DefaultAs<T>(T value) where T : Enum Parameters value T Type Parameters T The type of the enum. Exceptions InvalidOnixEnumValueException Throws if the value you set is not in the enum's options. Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save. ValueAsInit<T>(T) Sets the value of the setting from a C# enum. This variant will call the on setting changed with the isInit flag set to true. public void ValueAsInit<T>(T value) where T : Enum Parameters value T The new value. Type Parameters T The type of the enum. Exceptions InvalidOnixEnumValueException Throws if the value is not in the enum's options. ValueAs<T>() Gets the value of the setting as a C# enum. public T ValueAs<T>() where T : Enum Returns T The value as the desired C# enum. Type Parameters T The type of the enum. ValueAs<T>(T) Sets the value of the setting from a C# enum. public void ValueAs<T>(T value) where T : Enum Parameters value T The new value. Type Parameters T The type of the enum. Exceptions InvalidOnixEnumValueException Throws if the value is not in the enum's options."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.html",
    "title": "Class OnixSettingFloat | Onix Plugin Documentation",
    "summary": "Class OnixSettingFloat Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a float setting in Onix, allowing configuration of value, default, min, and max. public sealed class OnixSettingFloat : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingFloat Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingFloat(OnixModule?, string, float, float, float, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingFloat class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingFloat(OnixModule? mod, string name, float defaultValue, float min, float max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue float The default float value. min float The minimum allowed value. max float The maximum allowed value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingFloat(OnixModule?, string, string, float, float, float, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingFloat class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingFloat(OnixModule? mod, string name, string saveName, float defaultValue, float min, float max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue float The default float value. min float The minimum allowed value. max float The maximum allowed value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default value of the setting. public float Default { get; set; } Property Value float Max Gets or sets the maximum allowed value for the setting. public float Max { get; set; } Property Value float Min Gets or sets the minimum allowed value for the setting. public float Min { get; set; } Property Value float Value Gets or sets the current value of the setting. public float Value { get; set; } Property Value float ValueInit Gets or sets the current value of the setting. This variant will call the on setting changed with the isInit flag set to true. public float ValueInit { get; set; } Property Value float Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.html",
    "title": "Class OnixSettingGamepadKeybind.ValueType | Onix Plugin Documentation",
    "summary": "Class OnixSettingGamepadKeybind.ValueType Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll public class OnixSettingGamepadKeybind.ValueType : IReadOnlyList<InputKey>, IReadOnlyCollection<InputKey>, IEnumerable<InputKey>, IEnumerable Inheritance object OnixSettingGamepadKeybind.ValueType Implements IReadOnlyList<InputKey> IReadOnlyCollection<InputKey> IEnumerable<InputKey> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValueType(IReadOnlyList<InputKey>) public ValueType(IReadOnlyList<InputKey> value) Parameters value IReadOnlyList<InputKey> Fields Value public IReadOnlyList<InputKey> Value Field Value IReadOnlyList<InputKey> Properties Count Gets the number of elements in the collection. public int Count { get; } Property Value int The number of elements in the collection. this[int] Gets the element at the specified index in the read-only list. public InputKey this[int index] { get; } Parameters index int The zero-based index of the element to get. Property Value InputKey The element at the specified index in the read-only list. Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<InputKey> GetEnumerator() Returns IEnumerator<InputKey> An enumerator that can be used to iterate through the collection."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.html",
    "title": "Class OnixSettingGamepadKeybind | Onix Plugin Documentation",
    "summary": "Class OnixSettingGamepadKeybind Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a setting containing a list of gamepad keys in Onix. public sealed class OnixSettingGamepadKeybind : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingGamepadKeybind Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingGamepadKeybind(OnixModule?, string, ValueType, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingGamepadKeybind class with the specified module, name, default value, description, and change callback. public OnixSettingGamepadKeybind(OnixModule? mod, string name, OnixSettingGamepadKeybind.ValueType defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The module that will receive this setting or null. name string The name of the setting. defaultValue OnixSettingGamepadKeybind.ValueType The default value of this setting. description string The description for this setting. changeCallback OnixSetting.SettingChangedDelegate A function to call when the setting is changed. OnixSettingGamepadKeybind(OnixModule?, string, ReadOnlySpan<InputKey>, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingGamepadKeybind class with the specified module, name, default value, description, and change callback. public OnixSettingGamepadKeybind(OnixModule? mod, string name, ReadOnlySpan<InputKey> defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The module that will receive this setting or null. name string The name of the setting. defaultValue ReadOnlySpan<InputKey> The default value of this setting. description string The description for this setting. changeCallback OnixSetting.SettingChangedDelegate A function to call when the setting is changed. OnixSettingGamepadKeybind(OnixModule?, string, string, ValueType, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingGamepadKeybind class with the specified module, name, default value, description, and change callback. public OnixSettingGamepadKeybind(OnixModule? mod, string name, string saveName, OnixSettingGamepadKeybind.ValueType defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The module that will receive this setting or null. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue OnixSettingGamepadKeybind.ValueType The default value of this setting. description string The description for this setting. changeCallback OnixSetting.SettingChangedDelegate A function to call when the setting is changed. OnixSettingGamepadKeybind(OnixModule?, string, string, ReadOnlySpan<InputKey>, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingGamepadKeybind class with the specified module, name, default value, description, and change callback. public OnixSettingGamepadKeybind(OnixModule? mod, string name, string saveName, ReadOnlySpan<InputKey> defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The module that will receive this setting or null. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue ReadOnlySpan<InputKey> The default value of this setting. description string The description for this setting. changeCallback OnixSetting.SettingChangedDelegate A function to call when the setting is changed. Properties Default Gets or sets the default keybinds that are bound to this setting. Only gamepad inputs should be included. If you change the list, assign it back to apply the changes. public OnixSettingGamepadKeybind.ValueType Default { get; set; } Property Value OnixSettingGamepadKeybind.ValueType Value Gets or sets the keybinds that are bound to this setting. Only gamepad inputs should be included. If you change the list, assign it back to apply the changes. public OnixSettingGamepadKeybind.ValueType Value { get; set; } Property Value OnixSettingGamepadKeybind.ValueType ValueInit Gets or sets the keybinds that are bound to this setting. Only gamepad inputs should be included. If you change the list, assign it back to apply the changes. This variant will call the on setting changed with the isInit flag set to true. public OnixSettingGamepadKeybind.ValueType ValueInit { get; set; } Property Value OnixSettingGamepadKeybind.ValueType Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.html",
    "title": "Class OnixSettingInfo | Onix Plugin Documentation",
    "summary": "Class OnixSettingInfo Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Adds basically text as a setting. public sealed class OnixSettingInfo : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingInfo Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingInfo(OnixModule?, string, string, float, SettingChangedDelegate?) Creates a new setting info. public OnixSettingInfo(OnixModule? parentModule, string name, string description = \"\", float scale = 0.7, OnixSetting.SettingChangedDelegate? onSettingChanged = null) Parameters parentModule OnixModule The module to add this setting to or null. name string The text of the setting. description string The text that shows when you hover the setting. scale float onSettingChanged OnixSetting.SettingChangedDelegate Gets called before rendering, you could use this to update the text before the user sees it, keep in mind it is a Direct2D thread calling this. Properties Scale How large that setting is. public float Scale { get; set; } Property Value float Text The text of the setting. public string Text { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.html",
    "title": "Class OnixSettingInt | Onix Plugin Documentation",
    "summary": "Class OnixSettingInt Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents an integer setting in Onix, allowing configuration of value, default, min, and max. public sealed class OnixSettingInt : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingInt Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingInt(OnixModule?, string, int, int, int, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingInt class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingInt(OnixModule? mod, string name, int defaultValue, int min, int max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue int The default integer value. min int The minimum allowed value. max int The maximum allowed value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingInt(OnixModule?, string, string, int, int, int, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingInt class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingInt(OnixModule? mod, string name, string saveName, int defaultValue, int min, int max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue int The default integer value. min int The minimum allowed value. max int The maximum allowed value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default value of the setting. public int Default { get; set; } Property Value int Max Gets or sets the maximum allowed value for the setting. public int Max { get; set; } Property Value int Min Gets or sets the minimum allowed value for the setting. public int Min { get; set; } Property Value int Value Gets or sets the current value of the setting. public int Value { get; set; } Property Value int ValueInit Gets or sets the current value of the setting. This variant will call the on setting changed with the isInit flag set to true. public int ValueInit { get; set; } Property Value int Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.html",
    "title": "Class OnixSettingKeybind | Onix Plugin Documentation",
    "summary": "Class OnixSettingKeybind Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a keybind setting in Onix, allowing configuration of a single key value and its default. public sealed class OnixSettingKeybind : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingKeybind Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingKeybind(OnixModule?, string, InputKey, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingKeybind class with the specified module, name, default key, description, and change callback. public OnixSettingKeybind(OnixModule? mod, string name, InputKey defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue InputKey The default key value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingKeybind(OnixModule?, string, Type, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingKeybind class with the specified module, name, default key type, description, and change callback. public OnixSettingKeybind(OnixModule? mod, string name, InputKey.Type defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue InputKey.Type The default key type value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingKeybind(OnixModule?, string, string, InputKey, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingKeybind class with the specified module, name, default key, description, and change callback. public OnixSettingKeybind(OnixModule? mod, string name, string saveName, InputKey defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue InputKey The default key value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingKeybind(OnixModule?, string, string, Type, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingKeybind class with the specified module, name, default key type, description, and change callback. public OnixSettingKeybind(OnixModule? mod, string name, string saveName, InputKey.Type defaultValue, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue InputKey.Type The default key type value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default key value of the setting. public InputKey Default { get; set; } Property Value InputKey Value Gets or sets the current key value of the setting. public InputKey Value { get; set; } Property Value InputKey ValueInit Gets or sets the current key value of the setting. This variant will call the on setting changed with the isInit flag set to true. public InputKey ValueInit { get; set; } Property Value InputKey Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.html",
    "title": "Class OnixSettingLocalizedInfo | Onix Plugin Documentation",
    "summary": "Class OnixSettingLocalizedInfo Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll This is mainly so you can read the text from the settings, there is no benefit from C# in using this one over OnixSettingInfo. public sealed class OnixSettingLocalizedInfo : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingLocalizedInfo Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingLocalizedInfo(OnixModule?, string, string, float, SettingChangedDelegate?) Creates a new setting info. public OnixSettingLocalizedInfo(OnixModule? parentModule, string name, string description = \"\", float scale = 0.7, OnixSetting.SettingChangedDelegate? onSettingChanged = null) Parameters parentModule OnixModule The module to add this setting to or null. name string The text of the setting. description string The text that shows when you hover the setting. scale float onSettingChanged OnixSetting.SettingChangedDelegate Gets called before rendering, you could use this to update the text before the user sees it, keep in mind it is a Direct2D thread calling this. Properties Scale How large that setting is. public float Scale { get; set; } Property Value float Text The text of the setting. public string Text { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingModuleHeader.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingModuleHeader.html",
    "title": "Class OnixSettingModuleHeader | Onix Plugin Documentation",
    "summary": "Class OnixSettingModuleHeader Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll This is just used internally to show the header. Use the ParentModule to get the module. Modules come with one by default so you should never need to create one. public class OnixSettingModuleHeader : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingModuleHeader Implements IDisposable Inherited Members OnixSetting._pluginUuid OnixSetting.Dispose() OnixSetting.ConvertNameToSaveName(string) OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) OnixSetting.Save() OnixSetting.Load(JsonNode) MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingModuleHeader(OnixModule?) Creates a new module header. You should never need to do that. public OnixSettingModuleHeader(OnixModule? parentModule) Parameters parentModule OnixModule The module to add it to or null."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.html",
    "title": "Class OnixSettingTextbox | Onix Plugin Documentation",
    "summary": "Class OnixSettingTextbox Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a textbox setting in Onix, allowing configuration of text value, default, and maximum length. public sealed class OnixSettingTextbox : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingTextbox Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingTextbox(OnixModule?, string, string, int, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingTextbox class with the specified module, name, default value, maximum length, description, and change callback. public OnixSettingTextbox(OnixModule? mod, string name, string defaultValue, int maxLength, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue string The default text value. maxLength int The maximum allowed length of the text. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingTextbox(OnixModule?, string, string, string, int, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingTextbox class with the specified module, name, default value, maximum length, description, and change callback. public OnixSettingTextbox(OnixModule? mod, string name, string saveName, string defaultValue, int maxLength, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue string The default text value. maxLength int The maximum allowed length of the text. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties DefaultText Gets or sets the default text value of the setting. public string DefaultText { get; set; } Property Value string Value Gets the OnixTextbox object representing the current value of the setting. public OnixTextbox Value { get; } Property Value OnixTextbox ValueText Gets or sets the current text value of the setting. public string ValueText { get; set; } Property Value string ValueTextInit Gets or sets the current text value of the setting. public string ValueTextInit { get; set; } Property Value string Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingValueAdapterEnum.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingValueAdapterEnum.html",
    "title": "Class OnixSettingValueAdapterEnum | Onix Plugin Documentation",
    "summary": "Class OnixSettingValueAdapterEnum Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll public class OnixSettingValueAdapterEnum : OnixSettingValueAdapter Inheritance object OnixSettingValueAdapter OnixSettingValueAdapterEnum Inherited Members OnixSettingValueAdapter.Setting OnixSettingValueAdapter.Redirector OnixSettingValueAdapter.GetName(PropertyInfo) OnixSettingValueAdapter.GetValue<T>(PropertyInfo) OnixSettingValueAdapter.HandleAirAndProperties(OnixModule, PropertyInfo, out OnixSettingValueAdapter.SettingNameInfo) OnixSettingValueAdapter.HandlePostProcessing(PropertyInfo) OnixSettingValueAdapter.GetChangeCallback(PropertyInfo) OnixSettingValueAdapter.GetMinMax<T>(PropertyInfo) OnixSettingValueAdapter.GetMin<T>(PropertyInfo) OnixSettingValueAdapter.GetMax<T>(PropertyInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultEnumValue public object? DefaultEnumValue Field Value object Properties ValueType public override Type ValueType { get; } Property Value Type Methods GetValue() public override object? GetValue() Returns object Initialize(OnixModule, PropertyInfo) public override void Initialize(OnixModule mod, PropertyInfo property) Parameters mod OnixModule property PropertyInfo SetValue(object?) public override void SetValue(object? value) Parameters value object"
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.html",
    "title": "Class OnixSettingVec2 | Onix Plugin Documentation",
    "summary": "Class OnixSettingVec2 Namespace OnixRuntime.Api.OnixClient.Settings Assembly OnixRuntime.dll Represents a Vec2 setting in Onix, allowing configuration of value, default, min, and max. public sealed class OnixSettingVec2 : OnixSetting, IDisposable Inheritance object MightOwnMemoryAddressContainer OnixSetting OnixSettingVec2 Implements IDisposable Inherited Members OnixSetting.Dispose() OnixSetting.Name OnixSetting.SaveName OnixSetting.Description OnixSetting.Type OnixSetting.ParentModule OnixSetting.IsHidden OnixSetting.IsLocked OnixSetting.RemoveFromParent(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OnixSettingVec2(OnixModule?, string, Vec2, Vec2, Vec2, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingVec2 class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingVec2(OnixModule? mod, string name, Vec2 defaultValue, Vec2 min, Vec2 max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. defaultValue Vec2 The default Vec2 value. min Vec2 The minimum allowed Vec2 value. max Vec2 The maximum allowed Vec2 value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. OnixSettingVec2(OnixModule?, string, string, Vec2, Vec2, Vec2, string, SettingChangedDelegate?) Initializes a new instance of the OnixSettingVec2 class with the specified module, name, default value, min, max, description, and change callback. public OnixSettingVec2(OnixModule? mod, string name, string saveName, Vec2 defaultValue, Vec2 min, Vec2 max, string description = \"\", OnixSetting.SettingChangedDelegate? changeCallback = null) Parameters mod OnixModule The Onix module. name string The name of the setting. saveName string The save name of the setting, this allows the name to change without losing user settings. defaultValue Vec2 The default Vec2 value. min Vec2 The minimum allowed Vec2 value. max Vec2 The maximum allowed Vec2 value. description string The description of the setting. changeCallback OnixSetting.SettingChangedDelegate The callback to invoke when the setting changes. Properties Default Gets or sets the default value of the setting. public Vec2 Default { get; set; } Property Value Vec2 Max Gets or sets the maximum allowed value for the setting. public Vec2 Max { get; set; } Property Value Vec2 Min Gets or sets the minimum allowed value for the setting. public Vec2 Min { get; set; } Property Value Vec2 Value Gets or sets the current value of the setting. public Vec2 Value { get; set; } Property Value Vec2 ValueInit Gets or sets the current value of the setting. This variant will call the on setting changed with the isInit flag set to true. public Vec2 ValueInit { get; set; } Property Value Vec2 Methods Load(JsonNode) Loads the setting from json. If the value was null this will not get called so what you're getting is whatever the last value you returned in Save() was. Read it lazily like there is no tomorrow, every setting is in its own try-catch. If you change what you save make sure to have migration code in place. public override void Load(JsonNode root) Parameters root JsonNode The json you last saved. Save() Saves the setting to json for persistent storage. public override JsonNode? Save() Returns JsonNode The json or null if there is nothing to save."
  },
  "docs/OnixRuntime.Api.OnixClient.Settings.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.Settings.html",
    "title": "Namespace OnixRuntime.Api.OnixClient.Settings | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.OnixClient.Settings Classes InvalidOnixEnumValueException Exception thrown when an invalid value is set for an Onix enum setting. OnixSettingAir Represents an Onix setting for air, allowing getting and setting the air value for a module. OnixSettingBool Represents an Onix setting for a boolean value, allowing getting and setting the value and default for a module. OnixSettingButton Represents an Onix setting for a button, allowing configuration of button text and click behavior for a module. OnixSettingCategory Represents an Onix setting category, allowing grouping of settings with control over included count and open state. OnixSettingColor Represents an Onix setting for a color value, supporting advanced options like opacity, rainbow, and chroma effects. OnixSettingColor.ValueType Represents the value type for a color setting, including color, opacity, rainbow, and chroma options. OnixSettingColor.ValueTypeMutable Represents the value type for a color setting, including color, opacity, rainbow, and chroma options. OnixSettingColor_ValueTypeConverter OnixSettingColor_ValueTypeMutableConverter OnixSettingCustom Represents a custom Onix setting, allowing creation of settings with user-defined types registered in the setting registry. OnixSettingEnum Represents an enum setting. OnixSettingEnum.EnumEntries Represents a collection of enum entries, adding some convenience function. OnixSettingEnum.EnumEntry Represents an entry in an enum setting. OnixSettingFloat Represents a float setting in Onix, allowing configuration of value, default, min, and max. OnixSettingGamepadKeybind Represents a setting containing a list of gamepad keys in Onix. OnixSettingGamepadKeybind.ValueType OnixSettingInfo Adds basically text as a setting. OnixSettingInt Represents an integer setting in Onix, allowing configuration of value, default, min, and max. OnixSettingKeybind Represents a keybind setting in Onix, allowing configuration of a single key value and its default. OnixSettingLocalizedInfo This is mainly so you can read the text from the settings, there is no benefit from C# in using this one over OnixSettingInfo. OnixSettingModuleHeader This is just used internally to show the header. Use the ParentModule to get the module. Modules come with one by default so you should never need to create one. OnixSettingTextbox Represents a textbox setting in Onix, allowing configuration of text value, default, and maximum length. OnixSettingValueAdapterEnum OnixSettingVec2 Represents a Vec2 setting in Onix, allowing configuration of value, default, min, and max."
  },
  "docs/OnixRuntime.Api.OnixClient.WaypointsNotEnabledException.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.WaypointsNotEnabledException.html",
    "title": "Class WaypointsNotEnabledException | Onix Plugin Documentation",
    "summary": "Class WaypointsNotEnabledException Namespace OnixRuntime.Api.OnixClient Assembly OnixRuntime.dll public class WaypointsNotEnabledException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException WaypointsNotEnabledException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WaypointsNotEnabledException() public WaypointsNotEnabledException()"
  },
  "docs/OnixRuntime.Api.OnixClient.html": {
    "href": "docs/OnixRuntime.Api.OnixClient.html",
    "title": "Namespace OnixRuntime.Api.OnixClient | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.OnixClient Classes OnixClientScreen OnixClientThemeV3 OnixModule A module in the onix client. OnixModuleList OnixModuleSettingRedirector OnixModuleSettingRedirector.AirAttribute OnixModuleSettingRedirector.ButtonAttribute OnixModuleSettingRedirector.CategoryAttribute OnixModuleSettingRedirector.CategoryStopAttribute OnixModuleSettingRedirector.ChangeCallbackAttribute OnixModuleSettingRedirector.GapAttribute OnixModuleSettingRedirector.Hidden OnixModuleSettingRedirector.HideColorOpacityAttribute OnixModuleSettingRedirector.MaxAttribute OnixModuleSettingRedirector.MinAttribute OnixModuleSettingRedirector.MinMaxAttribute OnixModuleSettingRedirector.NameAttribute OnixModuleSettingRedirector.ScaleAttribute OnixModuleSettingRedirector.ValueAttribute OnixModuleTextual Represents a textual module for the Onix client. OnixModuleTypeExtensions Extension methods for the OnixModuleType enum providing helper methods to check module type characteristics. OnixModuleVisual Represents a visual module for the Onix client. OnixSetting Represents a base setting for an Onix module. OnixSettingListRenderer Represents a renderer for a list of Onix settings, allowing configuration and rendering of settings in a UI. OnixSettingRegistry Provides registration and management of custom Onix settings and their renderers. OnixSettingRenderer This is the base class for all setting renderers. You must create a class that inherits from this and implement the Render and GetHeight function. OnixSettingTypeExtensions OnixSettingValueAdapter OnixSettingValueAdapter.SettingNameInfo OnixSettingValueAdapterRegistry OnixSettingsList OnixWaypoint Represents a waypoint in the onix client. OnixWaypointManager SettingAlreadyHasAParentException WaypointsNotEnabledException Enums OnixModule.SettingInsertionPosition The position to insert a setting in the settings list. OnixModuleType The type of module this is. OnixModuleVisual.ModuleExpandDirection Defines the directions in which a module can expand. OnixModuleVisual.VisualAnchor Defines the anchoring positions for visual modules. OnixSettingType Defines the type of a setting in the Onix client. Delegates OnixSetting.SettingChangedDelegate Delegate for handling setting change events. OnixSettingRegistry.OnSettingMenuClosedDelegate Delegate for handling the closing of the settings menu."
  },
  "docs/OnixRuntime.Api.OnixClientThings.html": {
    "href": "docs/OnixRuntime.Api.OnixClientThings.html",
    "title": "Class OnixClientThings | Onix Plugin Documentation",
    "summary": "Class OnixClientThings Namespace OnixRuntime.Api Assembly OnixRuntime.dll Provides access to Onix client-specific features such as notifications, tooltips, modules, and settings. public class OnixClientThings Inheritance object OnixClientThings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandPrefix Gets the command prefix used by the client. public string CommandPrefix { get; } Property Value string Modules Gets the list of Onix modules. public OnixModuleList Modules { get; } Property Value OnixModuleList SettingRegistry Gets or sets the Onix setting registry. public OnixSettingRegistry SettingRegistry { get; init; } Property Value OnixSettingRegistry ThemeV3 public OnixClientThemeV3 ThemeV3 { get; } Property Value OnixClientThemeV3 Waypoints Gets the onix waypoint manager, letting you manipulate waypoints. Make sure you check Enabled before doing anything! public OnixWaypointManager Waypoints { get; init; } Property Value OnixWaypointManager Methods ExecuteCommand(string, bool) Executes a client command (don't include the prefix!). public void ExecuteCommand(string command, bool silenceChat = true) Parameters command string The command with its arguments to execute without the prefix. silenceChat bool Set to true if you don't want the output to show up in chat. Notify(string, string, float, ClientNotificationType, bool) Shows a notification to the user. public void Notify(string title, string message = \"\", float duration = 5, ClientNotificationType type = ClientNotificationType.Banner, bool mute = false) Parameters title string The title of the notification. message string The message of the notification. duration float The duration in seconds for the notification. type ClientNotificationType The type of notification. mute bool Whether to mute the notification sound. NotifyBanner(string, string, float, bool) Shows a banner notification to the user. public void NotifyBanner(string title, string message = \"\", float duration = 5, bool mute = false) Parameters title string The title of the notification. message string The message of the notification. duration float The duration in seconds for the notification. mute bool Whether to mute the notification sound. NotifyTray(string, string, float, bool) Shows a tray notification to the user. public void NotifyTray(string title, string message = \"\", float duration = 5, bool mute = false) Parameters title string The title of the notification. message string The message of the notification. duration float The duration in seconds for the notification. mute bool Whether to mute the notification sound. OpenDirectory(string) Opens the specified directory in the file explorer. public void OpenDirectory(string path) Parameters path string The directory path to open. OpenFile(string) Opens the specified file in the default application. public void OpenFile(string path) Parameters path string The file path to open. OpenUrl(string) Opens the specified URL in the user's browser. public void OpenUrl(string url) Parameters url string The URL to open. SetTooltipText(string) Sets the tooltip text at the given point. The open point will be the mouse's position. You should only call this if the user's mouse is within the desired area of the tooltip. The tooltip will be displayed by the client based on the user's preferences. This has text wrapping support so you don't need to \\n your text. public void SetTooltipText(string text) Parameters text string The text in the tooltip. SetTooltipText(string, Vec2) Sets the tooltip text at the given point. The point should probably be the mouse position. You should only call this if the user's mouse is within the desired area of the tooltip. The tooltip will be displayed by the client based on the user's preferences. This has text wrapping support so you don't need to \\n your text. public void SetTooltipText(string text, Vec2 openPoint) Parameters text string The text in the tooltip. openPoint Vec2 The point on which the user is hovering. ShowColorPicker(OnixSetting, Vec2, float) Shows a color picker for the given setting. You should open this in the center of your button, it will pick whether it goes up or down. public void ShowColorPicker(OnixSetting setting, Vec2 openPoint, float yOffset = 10) Parameters setting OnixSetting The setting to open the picker for. openPoint Vec2 Where to open from. yOffset float The y offset from the open point. ShowKeyPicker(OnixSetting) Shows a color picker for the given setting. public void ShowKeyPicker(OnixSetting setting) Parameters setting OnixSetting The setting to open a keybind picker for."
  },
  "docs/OnixRuntime.Api.OnixGame.html": {
    "href": "docs/OnixRuntime.Api.OnixGame.html",
    "title": "Class OnixGame | Onix Plugin Documentation",
    "summary": "Class OnixGame Namespace OnixRuntime.Api Assembly OnixRuntime.dll Provides access to core Onix game features, including version, pack managers, chat, commands, and language code. public class OnixGame Inheritance object OnixGame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AudioEngine Gets the audio engine of the game. This allows you to play game sounds as well as stop them. public GameAudioEngine AudioEngine { get; } Property Value GameAudioEngine LanguageCode Gets the current language code of the game. public string LanguageCode { get; } Property Value string PackManager The pack manager of the client, this is the one you will/should use most of the time. It includes global packs, world packs, treatment packs and whatever else is active! public PackManager PackManager { get; } Property Value PackManager PackManagerBehavior The pack manager, mainly for behavior packs like vanilla behavior packs. This is the client one so there won't be much in there. public PackManager PackManagerBehavior { get; } Property Value PackManager Version Gets the Onix game version. public PluginSemVersion Version { get; } Property Value PluginSemVersion Methods ExecuteCommand(string) Executes a command in the game. public void ExecuteCommand(string command) Parameters command string The command to execute. GetTranslatedMessage(string, IEnumerable<string>) Gets a translated message from the game. This lets you get game text in the user's game language. public string GetTranslatedMessage(string message, IEnumerable<string> arguments) Parameters message string The translation key as found in the default pack's en_US.lang or any other lang file. arguments IEnumerable<string> The parameters this key uses, like player names or things like that. Returns string The translated message or the same as what came in. GetTranslatedMessage(string, params string[]) Gets a translated message from the game. This lets you get game text in the user's game language. public string GetTranslatedMessage(string message, params string[] arguments) Parameters message string The translation key as found in the default pack's en_US.lang or any other lang file. arguments string[] The parameters this key uses, like player names or things like that. Returns string The translated message or the same as what came in. SendChatMessage(string) Sends a chat message to the game. public void SendChatMessage(string message) Parameters message string The message to send."
  },
  "docs/OnixRuntime.Api.Rendering.FontType.html": {
    "href": "docs/OnixRuntime.Api.Rendering.FontType.html",
    "title": "Enum FontType | Onix Plugin Documentation",
    "summary": "Enum FontType Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll The type of the font. public enum FontType Fields Mojangles = 2 The blocky font used by the game. Smooth = 1 Either the game's smooth font or the client's smooth font. UserPreference = 0 Whatever the user chose for this use case."
  },
  "docs/OnixRuntime.Api.Rendering.FontUsage.html": {
    "href": "docs/OnixRuntime.Api.Rendering.FontUsage.html",
    "title": "Enum FontUsage | Onix Plugin Documentation",
    "summary": "Enum FontUsage Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll What scenario is the font used for? public enum FontUsage Fields Hud = 1 This font will be used on HUD elements. UserInterface = 0 This font will be used to render user interface elements."
  },
  "docs/OnixRuntime.Api.Rendering.GameMesh.html": {
    "href": "docs/OnixRuntime.Api.Rendering.GameMesh.html",
    "title": "Class GameMesh | Onix Plugin Documentation",
    "summary": "Class GameMesh Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll public class GameMesh : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer GameMesh Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.html": {
    "href": "docs/OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.html",
    "title": "Struct GameMeshBuilder.GameMeshBuilderSession | Onix Plugin Documentation",
    "summary": "Struct GameMeshBuilder.GameMeshBuilderSession Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a session for building a mesh, automatically rendering on dispose. public struct GameMeshBuilder.GameMeshBuilderSession : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GameMeshBuilderSession(GameMeshBuilder, MeshBuilderPrimitiveType, ColorF?, TexturePath?, bool) Initializes a new mesh builder session. public GameMeshBuilderSession(GameMeshBuilder builder, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null, bool applyReverseOriginOffsetIf3D = true) Parameters builder GameMeshBuilder The mesh builder instance. primitiveType MeshBuilderPrimitiveType Primitive type to use. color ColorF? Optional color. texture TexturePath Optional texture path. applyReverseOriginOffsetIf3D bool GameMeshBuilderSession(GameMeshBuilder, TexturePath?, MeshBuilderPrimitiveType, ColorF?, bool) Initializes a new mesh builder session. public GameMeshBuilderSession(GameMeshBuilder builder, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, bool applyReverseOriginOffsetIf3D = true) Parameters builder GameMeshBuilder The mesh builder instance. texture TexturePath Optional texture path. primitiveType MeshBuilderPrimitiveType Primitive type to use. color ColorF? Optional color. applyReverseOriginOffsetIf3D bool GameMeshBuilderSession(GameMeshBuilder, ColorF?, MeshBuilderPrimitiveType, TexturePath?, bool) Initializes a new mesh builder session. public GameMeshBuilderSession(GameMeshBuilder builder, ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null, bool applyReverseOriginOffsetIf3D = true) Parameters builder GameMeshBuilder The mesh builder instance. color ColorF? Optional color. primitiveType MeshBuilderPrimitiveType Primitive type to use. texture TexturePath Optional texture path. applyReverseOriginOffsetIf3D bool GameMeshBuilderSession(GameMeshBuilder, ColorF?, TexturePath?, MeshBuilderPrimitiveType, bool) Initializes a new mesh builder session. public GameMeshBuilderSession(GameMeshBuilder builder, ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, bool applyReverseOriginOffsetIf3D = true) Parameters builder GameMeshBuilder The mesh builder instance. color ColorF? Optional color. texture TexturePath Optional texture path. primitiveType MeshBuilderPrimitiveType Primitive type to use. applyReverseOriginOffsetIf3D bool Properties Builder Gets the mesh builder associated with this session. public GameMeshBuilder Builder { get; } Property Value GameMeshBuilder Methods Dispose() Renders the mesh and ends the session. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.GameMeshBuilder.html": {
    "href": "docs/OnixRuntime.Api.Rendering.GameMeshBuilder.html",
    "title": "Class GameMeshBuilder | Onix Plugin Documentation",
    "summary": "Class GameMeshBuilder Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides methods to build and render meshes at runtime. public class GameMeshBuilder : MemoryAddressContainer Inheritance object MemoryAddressContainer GameMeshBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasStarted Gets a value indicating whether the mesh builder has started. public bool HasStarted { get; } Property Value bool PostScaleOffset Gets or sets the post-scale offset for the mesh builder. This will essentially be Vertex * Scale + Offset. public Vec3 PostScaleOffset { get; set; } Property Value Vec3 PostTransformOffset Gets or sets the post-transform offset for the mesh builder. This will essentially be Vertex * Scale + Offset. public Vec3 PostTransformOffset { get; set; } Property Value Vec3 PrimitiveType Gets the primitive type of the mesh builder. public MeshBuilderPrimitiveType PrimitiveType { get; } Property Value MeshBuilderPrimitiveType Methods AddBoundingBoxVertices(BoundingBox, PerBlockFaceFaceData<bool>, bool, bool) Adds vertices for a bounding box. public void AddBoundingBoxVertices(BoundingBox box, PerBlockFaceFaceData<bool> renderFace, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. renderFace PerBlockFaceFaceData<bool> Whcih faces should be rendered (does not work with lines). backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVertices(BoundingBox, bool, bool) Adds vertices for a bounding box. public void AddBoundingBoxVertices(BoundingBox box, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesForFace(BoundingBox, BlockFace, bool, bool) Adds vertices for a bounding box. public void AddBoundingBoxVerticesForFace(BoundingBox box, BlockFace face, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. face BlockFace The face of the bounding box to render. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesForFaceUv(BoundingBox, BlockFace, BlockFaceUvRotation, bool, bool) Adds vertices for a bounding box with uvs, it will use FullUV (0,0,1,1) as its uv. public void AddBoundingBoxVerticesForFaceUv(BoundingBox box, BlockFace face, BlockFaceUvRotation blockFaceUvRotation = BlockFaceUvRotation.NoRotation, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. face BlockFace The face of the bounding box to render. blockFaceUvRotation BlockFaceUvRotation The rotation to apply to the UV coordinates. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesForFaceUv(BoundingBox, BlockFace, Rect, BlockFaceUvRotation, bool, bool) Adds vertices for a bounding box with uv coordinates. public void AddBoundingBoxVerticesForFaceUv(BoundingBox box, BlockFace face, Rect uv, BlockFaceUvRotation blockFaceUvRotation = BlockFaceUvRotation.NoRotation, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. face BlockFace The face of the bounding box to render. uv Rect The UV coordinates to use for that face. blockFaceUvRotation BlockFaceUvRotation The rotation to apply to the UV coordinates. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesUv(BoundingBox, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<BlockFaceUvRotation>, bool, bool) Adds vertices for a bounding box with uvs, it will use FullUV (0,0,1,1) as its uv. public void AddBoundingBoxVerticesUv(BoundingBox box, PerBlockFaceFaceData<bool> renderFace, PerBlockFaceFaceData<BlockFaceUvRotation> faceUvRotation, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. renderFace PerBlockFaceFaceData<bool> Which faces should be rendered. faceUvRotation PerBlockFaceFaceData<BlockFaceUvRotation> The rotation to apply to the UV coordinates. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesUv(BoundingBox, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<Rect>, PerBlockFaceFaceData<BlockFaceUvRotation>, bool, bool) Adds vertices for a bounding box with uv coordinates. public void AddBoundingBoxVerticesUv(BoundingBox box, PerBlockFaceFaceData<bool> renderFace, PerBlockFaceFaceData<Rect> faceUv, PerBlockFaceFaceData<BlockFaceUvRotation> faceUvRotation, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. renderFace PerBlockFaceFaceData<bool> Which faces should be rendered. faceUv PerBlockFaceFaceData<Rect> The uv coordinates of each face. faceUvRotation PerBlockFaceFaceData<BlockFaceUvRotation> The rotation to apply to the UV coordinates. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesUv(BoundingBox, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<Rect>, bool, bool) Adds vertices for a bounding box with uv coordinates and no rotation. public void AddBoundingBoxVerticesUv(BoundingBox box, PerBlockFaceFaceData<bool> renderFace, PerBlockFaceFaceData<Rect> faceUv, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. renderFace PerBlockFaceFaceData<bool> Which faces should be rendered. faceUv PerBlockFaceFaceData<Rect> The uv coordinates of each face. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesUv(BoundingBox, PerBlockFaceFaceData<bool>, bool, bool) Adds vertices for a bounding box with uvs, it will use FullUV (0,0,1,1) as its uv with no rotation. public void AddBoundingBoxVerticesUv(BoundingBox box, PerBlockFaceFaceData<bool> renderFace, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. renderFace PerBlockFaceFaceData<bool> Which faces should be rendered. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddBoundingBoxVerticesUv(BoundingBox, bool, bool) Adds vertices for a complete bounding box with uvs, it will use FullUV (0,0,1,1) as its uv with no rotation. public void AddBoundingBoxVerticesUv(BoundingBox box, bool backFace = false, bool frontFace = true) Parameters box BoundingBox The bounding box. backFace bool If true, adds the back face vertices. frontFace bool If true, adds the front face vertices. AddCircleOutlineVertices(Vec2, float, float, int) Adds vertices for a circle outline. public void AddCircleOutlineVertices(Vec2 centerPosition, float radius, float lineWidth, int iterations) Parameters centerPosition Vec2 The center position of the circle. radius float The radius of the circle. lineWidth float The width of the outline. iterations int The number of iterations for the circle. AddCircleOutlineVertices(float, float, float, float, int) Adds vertices for a circle outline. public void AddCircleOutlineVertices(float x, float y, float radius, float lineWidth, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radius float The radius of the circle. lineWidth float The width of the outline. iterations int The number of iterations for the circle. AddCircleVertices(Vec2, float, int) Adds vertices for a circle. public void AddCircleVertices(Vec2 centerPosition, float radius, int iterations) Parameters centerPosition Vec2 The center position of the circle. radius float The radius of the circle. iterations int The number of iterations for the circle. AddCircleVertices(float, float, float, int) Adds vertices for a circle. public void AddCircleVertices(float x, float y, float radius, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radius float The radius of the circle. iterations int The number of iterations for the circle. AddEllipseOutlineVertices(Vec2, Vec2, float, int) Adds vertices for an ellipse outline. public void AddEllipseOutlineVertices(Vec2 centerPosition, Vec2 radius, float lineWidth, int iterations) Parameters centerPosition Vec2 The center position of the ellipse. radius Vec2 The radius of the ellipse. lineWidth float The width of the outline. iterations int The number of iterations for the ellipse. AddEllipseOutlineVertices(Vec2, float, float, float, int) Adds vertices for an ellipse outline. public void AddEllipseOutlineVertices(Vec2 centerPosition, float radiusX, float radiusY, float lineWidth, int iterations) Parameters centerPosition Vec2 The center position of the ellipse. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. lineWidth float The width of the outline. iterations int The number of iterations for the ellipse. AddEllipseOutlineVertices(float, float, Vec2, float, int) Adds vertices for an ellipse outline. public void AddEllipseOutlineVertices(float x, float y, Vec2 radius, float lineWidth, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radius Vec2 The radius of the ellipse. lineWidth float The width of the outline. iterations int The number of iterations for the ellipse. AddEllipseOutlineVertices(float, float, float, float, float, int) Adds vertices for an ellipse outline. public void AddEllipseOutlineVertices(float x, float y, float radiusX, float radiusY, float lineWidth, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. lineWidth float The width of the outline. iterations int The number of iterations for the ellipse. AddEllipseVertices(Vec2, Vec2, int) Adds vertices for an ellipse. public void AddEllipseVertices(Vec2 centerPosition, Vec2 radius, int iterations) Parameters centerPosition Vec2 The center position of the ellipse. radius Vec2 The radius of the ellipse. iterations int The number of iterations for the ellipse. AddEllipseVertices(Vec2, float, float, int) Adds vertices for an ellipse. public void AddEllipseVertices(Vec2 centerPosition, float radiusX, float radiusY, int iterations) Parameters centerPosition Vec2 The center position of the ellipse. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. iterations int The number of iterations for the ellipse. AddEllipseVertices(float, float, Vec2, int) Adds vertices for an ellipse. public void AddEllipseVertices(float x, float y, Vec2 radius, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radius Vec2 The radius of the ellipse. iterations int The number of iterations for the ellipse. AddEllipseVertices(float, float, float, float, int) Adds vertices for an ellipse. public void AddEllipseVertices(float x, float y, float radiusX, float radiusY, int iterations) Parameters x float The x-coordinate of the center position. y float The y-coordinate of the center position. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. iterations int The number of iterations for the ellipse. AddQuadGradientVertices(Vec2, ColorF, Vec2, ColorF, Vec2, ColorF, Vec2, ColorF) Adds vertices for a quad with gradient colors. public void AddQuadGradientVertices(Vec2 TopLeft, ColorF TopLeftColor, Vec2 TopRight, ColorF TopRightColor, Vec2 BottomLeft, ColorF BottomLeftcolor, Vec2 BottomRight, ColorF BottomRightColor) Parameters TopLeft Vec2 The top-left vertex. TopLeftColor ColorF The color of the top-left vertex. TopRight Vec2 The top-right vertex. TopRightColor ColorF The color of the top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomLeftcolor ColorF The color of the bottom-left vertex. BottomRight Vec2 The bottom-right vertex. BottomRightColor ColorF The color of the bottom-right vertex. AddQuadGradientVertices(Vec2, uint, Vec2, uint, Vec2, uint, Vec2, uint) Adds vertices for a quad with gradient colors. public void AddQuadGradientVertices(Vec2 TopLeft, uint TopLeftColor, Vec2 TopRight, uint TopRightColor, Vec2 BottomLeft, uint BottomLeftcolor, Vec2 BottomRight, uint BottomRightColor) Parameters TopLeft Vec2 The top-left vertex. TopLeftColor uint The color of the top-left vertex. TopRight Vec2 The top-right vertex. TopRightColor uint The color of the top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomLeftcolor uint The color of the bottom-left vertex. BottomRight Vec2 The bottom-right vertex. BottomRightColor uint The color of the bottom-right vertex. AddQuadGradientVertices(Vec3, ColorF, Vec3, ColorF, Vec3, ColorF, Vec3, ColorF) Adds vertices for a quad with gradient colors. public void AddQuadGradientVertices(Vec3 TopLeft, ColorF TopLeftColor, Vec3 TopRight, ColorF TopRightColor, Vec3 BottomLeft, ColorF BottomLeftcolor, Vec3 BottomRight, ColorF BottomRightColor) Parameters TopLeft Vec3 The top-left vertex. TopLeftColor ColorF The color of the top-left vertex. TopRight Vec3 The top-right vertex. TopRightColor ColorF The color of the top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomLeftcolor ColorF The color of the bottom-left vertex. BottomRight Vec3 The bottom-right vertex. BottomRightColor ColorF The color of the bottom-right vertex. AddQuadGradientVertices(Vec3, uint, Vec3, uint, Vec3, uint, Vec3, uint) Adds vertices for a quad with gradient colors. public void AddQuadGradientVertices(Vec3 TopLeft, uint TopLeftColor, Vec3 TopRight, uint TopRightColor, Vec3 BottomLeft, uint BottomLeftcolor, Vec3 BottomRight, uint BottomRightColor) Parameters TopLeft Vec3 The top-left vertex. TopLeftColor uint The color of the top-left vertex. TopRight Vec3 The top-right vertex. TopRightColor uint The color of the top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomLeftcolor uint The color of the bottom-left vertex. BottomRight Vec3 The bottom-right vertex. BottomRightColor uint The color of the bottom-right vertex. AddQuadQuadVertices(Vec2, Vec2, Vec2, Vec2) Adds vertices for a quad. public void AddQuadQuadVertices(Vec2 TopLeft, Vec2 TopRight, Vec2 BottomLeft, Vec2 BottomRight) Parameters TopLeft Vec2 The top-left vertex. TopRight Vec2 The top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomRight Vec2 The bottom-right vertex. AddQuadQuadVertices(Vec3, Vec3, Vec3, Vec3) Adds vertices for a quad. public void AddQuadQuadVertices(Vec3 TopLeft, Vec3 TopRight, Vec3 BottomLeft, Vec3 BottomRight) Parameters TopLeft Vec3 The top-left vertex. TopRight Vec3 The top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomRight Vec3 The bottom-right vertex. AddQuadUvGradientVertices(Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF) Adds vertices for a quad with UV coordinates and gradient colors. public void AddQuadUvGradientVertices(Vec2 TopLeft, Vec2 TopLeftUV, ColorF TopLeftColor, Vec2 TopRight, Vec2 TopRightUV, ColorF TopRightColor, Vec2 BottomLeft, Vec2 BottomLeftUV, ColorF BottomLeftColor, Vec2 BottomRight, Vec2 BottomRightUV, ColorF BottomRightColor) Parameters TopLeft Vec2 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopLeftColor ColorF The color of the top-left vertex. TopRight Vec2 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. TopRightColor ColorF The color of the top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomLeftColor ColorF The color of the bottom-left vertex. BottomRight Vec2 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. BottomRightColor ColorF The color of the bottom-right vertex. AddQuadUvGradientVertices(Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint) Adds vertices for a quad with UV coordinates and gradient colors. public void AddQuadUvGradientVertices(Vec2 TopLeft, Vec2 TopLeftUV, uint TopLeftColor, Vec2 TopRight, Vec2 TopRightUV, uint TopRightColor, Vec2 BottomLeft, Vec2 BottomLeftUV, uint BottomLeftColor, Vec2 BottomRight, Vec2 BottomRightUV, uint BottomRightColor) Parameters TopLeft Vec2 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopLeftColor uint The color of the top-left vertex. TopRight Vec2 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. TopRightColor uint The color of the top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomLeftColor uint The color of the bottom-left vertex. BottomRight Vec2 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. BottomRightColor uint The color of the bottom-right vertex. AddQuadUvGradientVertices(Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF) Adds vertices for a quad with UV coordinates and gradient colors. public void AddQuadUvGradientVertices(Vec3 TopLeft, Vec2 TopLeftUV, ColorF TopLeftColor, Vec3 TopRight, Vec2 TopRightUV, ColorF TopRightColor, Vec3 BottomLeft, Vec2 BottomLeftUV, ColorF BottomLeftColor, Vec3 BottomRight, Vec2 BottomRightUV, ColorF BottomRightColor) Parameters TopLeft Vec3 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopLeftColor ColorF The color of the top-left vertex. TopRight Vec3 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. TopRightColor ColorF The color of the top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomLeftColor ColorF The color of the bottom-left vertex. BottomRight Vec3 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. BottomRightColor ColorF The color of the bottom-right vertex. AddQuadUvGradientVertices(Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint) Adds vertices for a quad with UV coordinates and gradient colors. public void AddQuadUvGradientVertices(Vec3 TopLeft, Vec2 TopLeftUV, uint TopLeftColor, Vec3 TopRight, Vec2 TopRightUV, uint TopRightColor, Vec3 BottomLeft, Vec2 BottomLeftUV, uint BottomLeftColor, Vec3 BottomRight, Vec2 BottomRightUV, uint BottomRightColor) Parameters TopLeft Vec3 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopLeftColor uint The color of the top-left vertex. TopRight Vec3 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. TopRightColor uint The color of the top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomLeftColor uint The color of the bottom-left vertex. BottomRight Vec3 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. BottomRightColor uint The color of the bottom-right vertex. AddQuadUvVertices(Vec2, Vec2, Vec2, Vec2, Vec2, Vec2, Vec2, Vec2) Adds vertices for a quad with UV coordinates. public void AddQuadUvVertices(Vec2 TopLeft, Vec2 TopLeftUV, Vec2 TopRight, Vec2 TopRightUV, Vec2 BottomLeft, Vec2 BottomLeftUV, Vec2 BottomRight, Vec2 BottomRightUV) Parameters TopLeft Vec2 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopRight Vec2 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. BottomLeft Vec2 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomRight Vec2 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. AddQuadUvVertices(Vec3, Vec2, Vec3, Vec2, Vec3, Vec2, Vec3, Vec2) Adds vertices for a quad with UV coordinates. public void AddQuadUvVertices(Vec3 TopLeft, Vec2 TopLeftUV, Vec3 TopRight, Vec2 TopRightUV, Vec3 BottomLeft, Vec2 BottomLeftUV, Vec3 BottomRight, Vec2 BottomRightUV) Parameters TopLeft Vec3 The top-left vertex. TopLeftUV Vec2 The UV coordinates of the top-left vertex. TopRight Vec3 The top-right vertex. TopRightUV Vec2 The UV coordinates of the top-right vertex. BottomLeft Vec3 The bottom-left vertex. BottomLeftUV Vec2 The UV coordinates of the bottom-left vertex. BottomRight Vec3 The bottom-right vertex. BottomRightUV Vec2 The UV coordinates of the bottom-right vertex. AddRoundRectOutlineVertices(Rect, float, float, int) Adds vertices for a rounded rectangle outline. public void AddRoundRectOutlineVertices(Rect position, float cornerRadius, float width, int iterations) Parameters position Rect The position of the rectangle. cornerRadius float The radius of the corners. width float The width of the outline. iterations int The number of iterations for the rounded corners. AddRoundRectVertices(Rect, float, int) Adds vertices for a rounded rectangle. public void AddRoundRectVertices(Rect position, float cornerRadius, int iterations) Parameters position Rect The position of the rectangle. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. AddTriangleGradientVertices(Vec2, ColorF, Vec2, ColorF, Vec2, ColorF) Adds vertices for a triangle with gradient colors. public void AddTriangleGradientVertices(Vec2 point1, ColorF point1Color, Vec2 point2, ColorF point2Color, Vec2 point3, ColorF point3Color) Parameters point1 Vec2 The first vertex. point1Color ColorF The color of the first vertex. point2 Vec2 The second vertex. point2Color ColorF The color of the second vertex. point3 Vec2 The third vertex. point3Color ColorF The color of the third vertex. AddTriangleGradientVertices(Vec2, uint, Vec2, uint, Vec2, uint) Adds vertices for a triangle with gradient colors. public void AddTriangleGradientVertices(Vec2 point1, uint point1Color, Vec2 point2, uint point2Color, Vec2 point3, uint point3Color) Parameters point1 Vec2 The first vertex. point1Color uint The color of the first vertex. point2 Vec2 The second vertex. point2Color uint The color of the second vertex. point3 Vec2 The third vertex. point3Color uint The color of the third vertex. AddTriangleGradientVertices(Vec3, ColorF, Vec3, ColorF, Vec3, ColorF) Adds vertices for a triangle with gradient colors. public void AddTriangleGradientVertices(Vec3 point1, ColorF point1Color, Vec3 point2, ColorF point2Color, Vec3 point3, ColorF point3Color) Parameters point1 Vec3 The first vertex. point1Color ColorF The color of the first vertex. point2 Vec3 The second vertex. point2Color ColorF The color of the second vertex. point3 Vec3 The third vertex. point3Color ColorF The color of the third vertex. AddTriangleGradientVertices(Vec3, uint, Vec3, uint, Vec3, uint) Adds vertices for a triangle with gradient colors. public void AddTriangleGradientVertices(Vec3 point1, uint point1Color, Vec3 point2, uint point2Color, Vec3 point3, uint point3Color) Parameters point1 Vec3 The first vertex. point1Color uint The color of the first vertex. point2 Vec3 The second vertex. point2Color uint The color of the second vertex. point3 Vec3 The third vertex. point3Color uint The color of the third vertex. AddTriangleUvGradientVertices(Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF) Adds vertices for a triangle with UV coordinates and gradient colors. public void AddTriangleUvGradientVertices(Vec2 point1, Vec2 point1UV, ColorF point1Color, Vec2 point2, Vec2 point2UV, ColorF point2Color, Vec2 point3, Vec2 point3UV, ColorF point3Color) Parameters point1 Vec2 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point1Color ColorF The color of the first vertex. point2 Vec2 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point2Color ColorF The color of the second vertex. point3 Vec2 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. point3Color ColorF The color of the third vertex. AddTriangleUvGradientVertices(Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint) Adds vertices for a triangle with UV coordinates and gradient colors. public void AddTriangleUvGradientVertices(Vec2 point1, Vec2 point1UV, uint point1Color, Vec2 point2, Vec2 point2UV, uint point2Color, Vec2 point3, Vec2 point3UV, uint point3Color) Parameters point1 Vec2 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point1Color uint The color of the first vertex. point2 Vec2 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point2Color uint The color of the second vertex. point3 Vec2 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. point3Color uint The color of the third vertex. AddTriangleUvGradientVertices(Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF) Adds vertices for a triangle with UV coordinates and gradient colors. public void AddTriangleUvGradientVertices(Vec3 point1, Vec2 point1UV, ColorF point1Color, Vec3 point2, Vec2 point2UV, ColorF point2Color, Vec3 point3, Vec2 point3UV, ColorF point3Color) Parameters point1 Vec3 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point1Color ColorF The color of the first vertex. point2 Vec3 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point2Color ColorF The color of the second vertex. point3 Vec3 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. point3Color ColorF The color of the third vertex. AddTriangleUvGradientVertices(Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint) Adds vertices for a triangle with UV coordinates and gradient colors. public void AddTriangleUvGradientVertices(Vec3 point1, Vec2 point1UV, uint point1Color, Vec3 point2, Vec2 point2UV, uint point2Color, Vec3 point3, Vec2 point3UV, uint point3Color) Parameters point1 Vec3 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point1Color uint The color of the first vertex. point2 Vec3 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point2Color uint The color of the second vertex. point3 Vec3 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. point3Color uint The color of the third vertex. AddTriangleUvVertices(Vec2, Vec2, Vec2, Vec2, Vec2, Vec2) Adds vertices for a triangle with UV coordinates. public void AddTriangleUvVertices(Vec2 point1, Vec2 point1UV, Vec2 point2, Vec2 point2UV, Vec2 point3, Vec2 point3UV) Parameters point1 Vec2 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point2 Vec2 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point3 Vec2 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. AddTriangleUvVertices(Vec3, Vec2, Vec3, Vec2, Vec3, Vec2) Adds vertices for a triangle with UV coordinates. public void AddTriangleUvVertices(Vec3 point1, Vec2 point1UV, Vec3 point2, Vec2 point2UV, Vec3 point3, Vec2 point3UV) Parameters point1 Vec3 The first vertex. point1UV Vec2 The UV coordinates of the first vertex. point2 Vec3 The second vertex. point2UV Vec2 The UV coordinates of the second vertex. point3 Vec3 The third vertex. point3UV Vec2 The UV coordinates of the third vertex. AddTriangleVertices(Vec2, Vec2, Vec2) Adds vertices for a triangle. public void AddTriangleVertices(Vec2 point1, Vec2 point2, Vec2 point3) Parameters point1 Vec2 The first vertex. point2 Vec2 The second vertex. point3 Vec2 The third vertex. AddTriangleVertices(Vec3, Vec3, Vec3) Adds vertices for a triangle. public void AddTriangleVertices(Vec3 point1, Vec3 point2, Vec3 point3) Parameters point1 Vec3 The first vertex. point2 Vec3 The second vertex. point3 Vec3 The third vertex. Build(bool, bool) Builds the current mesh. public GameMesh Build(bool immediate = false, bool clear = true) Parameters immediate bool If true, the mesh is built immediately. clear bool If true, the mesh is cleared after building. Returns GameMesh The built mesh. Clear() Clears the current mesh so you're ready to start a new one. public void Clear() Color(ColorF) Sets the color for subsequent vertices. public void Color(ColorF color) Parameters color ColorF Color(uint) Sets the color for subsequent vertices. public void Color(uint color) Parameters color uint New(ColorF, MeshBuilderPrimitiveType, bool) Starts a new mesh with the specified color and primitive type. public void New(ColorF color, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, bool applyReverseOriginOffsetIf3D = true) Parameters color ColorF The color of the mesh. primitiveType MeshBuilderPrimitiveType What primitive are the vertices defining? applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. New(MeshBuilderPrimitiveType, bool) Starts a new mesh with the specified primitive type (color defaults to white). public void New(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, bool applyReverseOriginOffsetIf3D = true) Parameters primitiveType MeshBuilderPrimitiveType What primitive are the vertices defining? applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. NewSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?, bool) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should prefer the renderer's NewMeshBuilderSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?) to this one since they will hand it to you in a more ready state based on its current parameters. public GameMeshBuilder.GameMeshBuilderSession NewSession(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null, bool applyReverseOriginOffsetIf3D = true) Parameters primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? texture TexturePath The texture that will be used when rendering. applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?, bool) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should prefer the renderer's NewMeshBuilderSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?) to this one since they will hand it to you in a more ready state based on its current parameters. public GameMeshBuilder.GameMeshBuilderSession NewSession(TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, bool applyReverseOriginOffsetIf3D = true) Parameters texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?, bool) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. /// You should prefer the renderer's NewMeshBuilderSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?) to this one since they will hand it to you in a more ready state based on its current parameters. public GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null, bool applyReverseOriginOffsetIf3D = true) Parameters color ColorF? primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. texture TexturePath The texture that will be used when rendering. applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType, bool) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. /// /// You should prefer the renderer's NewMeshBuilderSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType) to this one since they will hand it to you in a more ready state based on its current parameters. public GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, bool applyReverseOriginOffsetIf3D = true) Parameters color ColorF? texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. applyReverseOriginOffsetIf3D bool If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } Normal(Vec3) Sets the normal vector for subsequent vertices. public void Normal(Vec3 normal) Parameters normal Vec3 Normal(float, float, float) Sets the normal vector for subsequent vertices. public void Normal(float x, float y, float z) Parameters x float y float z float Render() Renders the current mesh. public void Render() Render(TexturePath) Renders the current mesh with the specified texture. public void Render(TexturePath texture) Parameters texture TexturePath Uv(Vec2) Sets the UV coordinates for subsequent vertices. public void Uv(Vec2 uv) Parameters uv Vec2 Uv(float, float) Sets the UV coordinates for subsequent vertices. public void Uv(float u, float v) Parameters u float v float Vertex(Vec2) Adds a vertex to the mesh using a 2D vector (z defaults to 0). public void Vertex(Vec2 position) Parameters position Vec2 Vertex(Vec2, Vec2) Adds a vertex with a 2D position and UV coordinates. public void Vertex(Vec2 position, Vec2 uv) Parameters position Vec2 uv Vec2 Vertex(Vec2, float, float) Adds a vertex with a 2D position and separate UV values. public void Vertex(Vec2 position, float u, float v) Parameters position Vec2 u float v float Vertex(Vec3) Adds a vertex to the mesh using a 3D vector. public void Vertex(Vec3 position) Parameters position Vec3 Vertex(Vec3, Vec2) Adds a vertex with a 3D position and UV coordinates. public void Vertex(Vec3 position, Vec2 uv) Parameters position Vec3 uv Vec2 Vertex(Vec3, float, float) Adds a vertex with a 3D position and separate UV values. public void Vertex(Vec3 position, float u, float v) Parameters position Vec3 u float v float Vertex(float, float) Adds a vertex to the mesh with the specified coordinates (z defaults to 0). public void Vertex(float x, float y) Parameters x float y float Vertex(float, float, Vec2) Adds a vertex with a 2D position and UV coordinates (z defaults to 0). public void Vertex(float x, float y, Vec2 uv) Parameters x float y float uv Vec2 Vertex(float, float, float) Adds a vertex to the mesh with the specified coordinates. public void Vertex(float x, float y, float z) Parameters x float y float z float Vertex(float, float, float, Vec2) Adds a vertex with a 3D position and UV coordinates. public void Vertex(float x, float y, float z, Vec2 uv) Parameters x float y float z float uv Vec2 Vertex(float, float, float, float) Adds a vertex with UV coordinates (z defaults to 0). public void Vertex(float x, float y, float u, float v) Parameters x float y float u float v float Vertex(float, float, float, float, float) Adds a vertex with UV coordinates. public void Vertex(float x, float y, float z, float u, float v) Parameters x float y float z float u float v float VertexBatch(MeshBuilderVertexColorNormal[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexColorNormal[] vertices, int len = -1) Parameters vertices MeshBuilderVertexColorNormal[] The vertices to add len int VertexBatch(MeshBuilderVertexColorUvNormal[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexColorUvNormal[] vertices, int len = -1) Parameters vertices MeshBuilderVertexColorUvNormal[] The vertices to add len int VertexBatch(MeshBuilderVertexColorUv[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexColorUv[] vertices, int len = -1) Parameters vertices MeshBuilderVertexColorUv[] The vertices to add len int VertexBatch(MeshBuilderVertexColor[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexColor[] vertices, int len = -1) Parameters vertices MeshBuilderVertexColor[] The vertices to add len int VertexBatch(MeshBuilderVertexNormal[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexNormal[] vertices, int len = -1) Parameters vertices MeshBuilderVertexNormal[] The vertices to add len int VertexBatch(MeshBuilderVertexUvNormal[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexUvNormal[] vertices, int len = -1) Parameters vertices MeshBuilderVertexUvNormal[] The vertices to add len int VertexBatch(MeshBuilderVertexUv[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertexUv[] vertices, int len = -1) Parameters vertices MeshBuilderVertexUv[] The vertices to add len int VertexBatch(MeshBuilderVertex[], int) Adds a bunch of vertices to the mesh builder at once. This allows you to save some Managed -> Native calls. public void VertexBatch(MeshBuilderVertex[] vertices, int len = -1) Parameters vertices MeshBuilderVertex[] The vertices to add len int"
  },
  "docs/OnixRuntime.Api.Rendering.IGameRenderer.html": {
    "href": "docs/OnixRuntime.Api.Rendering.IGameRenderer.html",
    "title": "Interface IGameRenderer | Onix Plugin Documentation",
    "summary": "Interface IGameRenderer Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides methods for rendering game items and meshes. public interface IGameRenderer Properties MeshBuilder Gets the mesh builder used for rendering. GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Methods NewMeshBuilderSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null) Parameters primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null) Parameters texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? Returns GameMeshBuilder.GameMeshBuilderSession Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null) Parameters color ColorF? primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters color ColorF? texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. Returns GameMeshBuilder.GameMeshBuilderSession Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } RenderItem(Vec2, ItemStack, bool, float, bool) Renders an item at the specified position. void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 The position vector. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderItem(float, float, ItemStack, bool, float, bool) Renders an item at the specified coordinates. void RenderItem(float x, float y, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters x float The x-coordinate. y float The y-coordinate. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderMesh(GameMesh, ColorF, TexturePath, uint, uint) Renders a mesh with the specified color and texture. void RenderMesh(GameMesh mesh, ColorF color, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render. Remarks You can set the ItemStack.ShowPickup to false. RenderMesh(GameMesh, ColorF, uint, uint) Renders a mesh with the specified color. void RenderMesh(GameMesh mesh, ColorF color, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. startOffset uint The starting offset. count uint The number of elements to render. RenderMesh(GameMesh, TexturePath, uint, uint) Renders a mesh with the specified texture. void RenderMesh(GameMesh mesh, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render."
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.html",
    "title": "Enum MeshBuilderPrimitiveType | Onix Plugin Documentation",
    "summary": "Enum MeshBuilderPrimitiveType Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Specifies the primitive type for mesh building. public enum MeshBuilderPrimitiveType Fields Line = 4 Line primitive type. LineStrip = 5 Line strip primitive type. Quad = 1 Quad primitive type. Triangle = 2 Triangle primitive type. TriangleStrip = 3 Triangle strip primitive type."
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertex.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertex.html",
    "title": "Struct MeshBuilderVertex | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertex Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a vertex in the GameMeshBuilder. public struct MeshBuilderVertex Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertex(Vec2) public MeshBuilderVertex(Vec2 position) Parameters position Vec2 MeshBuilderVertex(Vec3) public MeshBuilderVertex(Vec3 position) Parameters position Vec3 MeshBuilderVertex(float, float, float) public MeshBuilderVertex(float x, float y, float z = 0) Parameters x float y float z float Fields Position public Vec3 Position Field Value Vec3"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColor.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColor.html",
    "title": "Struct MeshBuilderVertexColor | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexColor Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a colored vertex in the GameMeshBuilder. public struct MeshBuilderVertexColor Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexColor(Vec2, ColorF) public MeshBuilderVertexColor(Vec2 position, ColorF color) Parameters position Vec2 color ColorF MeshBuilderVertexColor(Vec2, uint) public MeshBuilderVertexColor(Vec2 position, uint color) Parameters position Vec2 color uint MeshBuilderVertexColor(Vec3, ColorF) public MeshBuilderVertexColor(Vec3 position, ColorF color) Parameters position Vec3 color ColorF MeshBuilderVertexColor(Vec3, uint) public MeshBuilderVertexColor(Vec3 position, uint color) Parameters position Vec3 color uint MeshBuilderVertexColor(float, float, float, ColorF) public MeshBuilderVertexColor(float x, float y, float z, ColorF color) Parameters x float y float z float color ColorF MeshBuilderVertexColor(float, float, float, uint) public MeshBuilderVertexColor(float x, float y, float z, uint color) Parameters x float y float z float color uint Fields Color public uint Color Field Value uint Position public Vec3 Position Field Value Vec3"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorNormal.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorNormal.html",
    "title": "Struct MeshBuilderVertexColorNormal | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexColorNormal Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a colored vertex with a normal in the GameMeshBuilder. public struct MeshBuilderVertexColorNormal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexColorNormal(Vec2, ColorF, Vec3) public MeshBuilderVertexColorNormal(Vec2 position, ColorF color, Vec3 normal) Parameters position Vec2 color ColorF normal Vec3 MeshBuilderVertexColorNormal(Vec2, ColorF, float, float, float) public MeshBuilderVertexColorNormal(Vec2 position, ColorF color, float normalX, float normalY, float normalZ) Parameters position Vec2 color ColorF normalX float normalY float normalZ float MeshBuilderVertexColorNormal(Vec2, uint, Vec3) public MeshBuilderVertexColorNormal(Vec2 position, uint color, Vec3 normal) Parameters position Vec2 color uint normal Vec3 MeshBuilderVertexColorNormal(Vec2, uint, float, float, float) public MeshBuilderVertexColorNormal(Vec2 position, uint color, float normalX, float normalY, float normalZ) Parameters position Vec2 color uint normalX float normalY float normalZ float MeshBuilderVertexColorNormal(Vec3, ColorF, Vec3) public MeshBuilderVertexColorNormal(Vec3 position, ColorF color, Vec3 normal) Parameters position Vec3 color ColorF normal Vec3 MeshBuilderVertexColorNormal(Vec3, ColorF, float, float, float) public MeshBuilderVertexColorNormal(Vec3 position, ColorF color, float normalX, float normalY, float normalZ) Parameters position Vec3 color ColorF normalX float normalY float normalZ float MeshBuilderVertexColorNormal(Vec3, uint, Vec3) public MeshBuilderVertexColorNormal(Vec3 position, uint color, Vec3 normal) Parameters position Vec3 color uint normal Vec3 MeshBuilderVertexColorNormal(Vec3, uint, float, float, float) public MeshBuilderVertexColorNormal(Vec3 position, uint color, float normalX, float normalY, float normalZ) Parameters position Vec3 color uint normalX float normalY float normalZ float MeshBuilderVertexColorNormal(float, float, float, ColorF, Vec3) public MeshBuilderVertexColorNormal(float x, float y, float z, ColorF color, Vec3 normal) Parameters x float y float z float color ColorF normal Vec3 MeshBuilderVertexColorNormal(float, float, float, ColorF, float, float, float) public MeshBuilderVertexColorNormal(float x, float y, float z, ColorF color, float normalX, float normalY, float normalZ) Parameters x float y float z float color ColorF normalX float normalY float normalZ float MeshBuilderVertexColorNormal(float, float, float, uint, Vec3) public MeshBuilderVertexColorNormal(float x, float y, float z, uint color, Vec3 normal) Parameters x float y float z float color uint normal Vec3 MeshBuilderVertexColorNormal(float, float, float, uint, float, float, float) public MeshBuilderVertexColorNormal(float x, float y, float z, uint color, float normalX, float normalY, float normalZ) Parameters x float y float z float color uint normalX float normalY float normalZ float Fields Color public uint Color Field Value uint Normal public Vec4 Normal Field Value Vec4 Position public Vec3 Position Field Value Vec3"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorUv.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorUv.html",
    "title": "Struct MeshBuilderVertexColorUv | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexColorUv Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a colored vertex with UV coordinates in the GameMeshBuilder. public struct MeshBuilderVertexColorUv Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexColorUv(Vec2, ColorF, Vec2) public MeshBuilderVertexColorUv(Vec2 position, ColorF color, Vec2 uv) Parameters position Vec2 color ColorF uv Vec2 MeshBuilderVertexColorUv(Vec2, ColorF, float, float) public MeshBuilderVertexColorUv(Vec2 position, ColorF color, float u, float v) Parameters position Vec2 color ColorF u float v float MeshBuilderVertexColorUv(Vec2, uint, Vec2) public MeshBuilderVertexColorUv(Vec2 position, uint color, Vec2 uv) Parameters position Vec2 color uint uv Vec2 MeshBuilderVertexColorUv(Vec2, uint, float, float) public MeshBuilderVertexColorUv(Vec2 position, uint color, float u, float v) Parameters position Vec2 color uint u float v float MeshBuilderVertexColorUv(Vec3, ColorF, Vec2) public MeshBuilderVertexColorUv(Vec3 position, ColorF color, Vec2 uv) Parameters position Vec3 color ColorF uv Vec2 MeshBuilderVertexColorUv(Vec3, ColorF, float, float) public MeshBuilderVertexColorUv(Vec3 position, ColorF color, float u, float v) Parameters position Vec3 color ColorF u float v float MeshBuilderVertexColorUv(Vec3, uint, Vec2) public MeshBuilderVertexColorUv(Vec3 position, uint color, Vec2 uv) Parameters position Vec3 color uint uv Vec2 MeshBuilderVertexColorUv(Vec3, uint, float, float) public MeshBuilderVertexColorUv(Vec3 position, uint color, float u, float v) Parameters position Vec3 color uint u float v float MeshBuilderVertexColorUv(float, float, ColorF, Vec2) public MeshBuilderVertexColorUv(float x, float y, ColorF color, Vec2 uv) Parameters x float y float color ColorF uv Vec2 MeshBuilderVertexColorUv(float, float, ColorF, float, float) public MeshBuilderVertexColorUv(float x, float y, ColorF color, float u, float v) Parameters x float y float color ColorF u float v float MeshBuilderVertexColorUv(float, float, float, ColorF, Vec2) public MeshBuilderVertexColorUv(float x, float y, float z, ColorF color, Vec2 uv) Parameters x float y float z float color ColorF uv Vec2 MeshBuilderVertexColorUv(float, float, float, ColorF, float, float) public MeshBuilderVertexColorUv(float x, float y, float z, ColorF color, float u, float v) Parameters x float y float z float color ColorF u float v float MeshBuilderVertexColorUv(float, float, float, uint, Vec2) public MeshBuilderVertexColorUv(float x, float y, float z, uint color, Vec2 uv) Parameters x float y float z float color uint uv Vec2 MeshBuilderVertexColorUv(float, float, float, uint, float, float) public MeshBuilderVertexColorUv(float x, float y, float z, uint color, float u, float v) Parameters x float y float z float color uint u float v float MeshBuilderVertexColorUv(float, float, uint, Vec2) public MeshBuilderVertexColorUv(float x, float y, uint color, Vec2 uv) Parameters x float y float color uint uv Vec2 MeshBuilderVertexColorUv(float, float, uint, float, float) public MeshBuilderVertexColorUv(float x, float y, uint color, float u, float v) Parameters x float y float color uint u float v float Fields Color public uint Color Field Value uint Position public Vec3 Position Field Value Vec3 Uv public Vec2 Uv Field Value Vec2"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorUvNormal.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexColorUvNormal.html",
    "title": "Struct MeshBuilderVertexColorUvNormal | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexColorUvNormal Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a colored vertex with UV coordinates and a normal in the GameMeshBuilder. public struct MeshBuilderVertexColorUvNormal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexColorUvNormal(Vec2, ColorF, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(Vec2 position, ColorF color, Vec2 uv, Vec3 normal) Parameters position Vec2 color ColorF uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(Vec2, ColorF, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(Vec2 position, ColorF color, Vec2 uv, float nX, float nY, float nZ) Parameters position Vec2 color ColorF uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec2, ColorF, float, float, Vec3) public MeshBuilderVertexColorUvNormal(Vec2 position, ColorF color, float u, float v, Vec3 normal) Parameters position Vec2 color ColorF u float v float normal Vec3 MeshBuilderVertexColorUvNormal(Vec2, ColorF, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(Vec2 position, ColorF color, float u, float v, float nX, float nY, float nZ) Parameters position Vec2 color ColorF u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec2, uint, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(Vec2 position, uint color, Vec2 uv, Vec3 normal) Parameters position Vec2 color uint uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(Vec2, uint, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(Vec2 position, uint color, Vec2 uv, float nX, float nY, float nZ) Parameters position Vec2 color uint uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec2, uint, float, float, Vec3) public MeshBuilderVertexColorUvNormal(Vec2 position, uint color, float u, float v, Vec3 normal) Parameters position Vec2 color uint u float v float normal Vec3 MeshBuilderVertexColorUvNormal(Vec2, uint, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(Vec2 position, uint color, float u, float v, float nX, float nY, float nZ) Parameters position Vec2 color uint u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec3, ColorF, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(Vec3 position, ColorF color, Vec2 uv, Vec3 normal) Parameters position Vec3 color ColorF uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(Vec3, ColorF, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(Vec3 position, ColorF color, Vec2 uv, float nX, float nY, float nZ) Parameters position Vec3 color ColorF uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec3, ColorF, float, float, Vec3) public MeshBuilderVertexColorUvNormal(Vec3 position, ColorF color, float u, float v, Vec3 normal) Parameters position Vec3 color ColorF u float v float normal Vec3 MeshBuilderVertexColorUvNormal(Vec3, ColorF, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(Vec3 position, ColorF color, float u, float v, float nX, float nY, float nZ) Parameters position Vec3 color ColorF u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec3, uint, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(Vec3 position, uint color, Vec2 uv, Vec3 normal) Parameters position Vec3 color uint uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(Vec3, uint, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(Vec3 position, uint color, Vec2 uv, float nX, float nY, float nZ) Parameters position Vec3 color uint uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(Vec3, uint, float, float, Vec3) public MeshBuilderVertexColorUvNormal(Vec3 position, uint color, float u, float v, Vec3 normal) Parameters position Vec3 color uint u float v float normal Vec3 MeshBuilderVertexColorUvNormal(Vec3, uint, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(Vec3 position, uint color, float u, float v, float nX, float nY, float nZ) Parameters position Vec3 color uint u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, ColorF, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, ColorF color, Vec2 uv, Vec3 normal) Parameters x float y float color ColorF uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(float, float, ColorF, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, ColorF color, Vec2 uv, float nX, float nY, float nZ) Parameters x float y float color ColorF uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, ColorF, float, float, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, ColorF color, float u, float v, Vec3 normal) Parameters x float y float color ColorF u float v float normal Vec3 MeshBuilderVertexColorUvNormal(float, float, ColorF, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, ColorF color, float u, float v, float nX, float nY, float nZ) Parameters x float y float color ColorF u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, float, ColorF, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, float z, ColorF color, Vec2 uv, Vec3 normal) Parameters x float y float z float color ColorF uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(float, float, float, ColorF, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, float z, ColorF color, Vec2 uv, float nX, float nY, float nZ) Parameters x float y float z float color ColorF uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, float, ColorF, float, float, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, float z, ColorF color, float u, float v, Vec3 normal) Parameters x float y float z float color ColorF u float v float normal Vec3 MeshBuilderVertexColorUvNormal(float, float, float, ColorF, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, float z, ColorF color, float u, float v, float nX, float nY, float nZ) Parameters x float y float z float color ColorF u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, float, uint, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, float z, uint color, Vec2 uv, Vec3 normal) Parameters x float y float z float color uint uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(float, float, float, uint, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, float z, uint color, Vec2 uv, float nX, float nY, float nZ) Parameters x float y float z float color uint uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, float, uint, float, float, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, float z, uint color, float u, float v, Vec3 normal) Parameters x float y float z float color uint u float v float normal Vec3 MeshBuilderVertexColorUvNormal(float, float, float, uint, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, float z, uint color, float u, float v, float nX, float nY, float nZ) Parameters x float y float z float color uint u float v float nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, uint, Vec2, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, uint color, Vec2 uv, Vec3 normal) Parameters x float y float color uint uv Vec2 normal Vec3 MeshBuilderVertexColorUvNormal(float, float, uint, Vec2, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, uint color, Vec2 uv, float nX, float nY, float nZ) Parameters x float y float color uint uv Vec2 nX float nY float nZ float MeshBuilderVertexColorUvNormal(float, float, uint, float, float, Vec3) public MeshBuilderVertexColorUvNormal(float x, float y, uint color, float u, float v, Vec3 normal) Parameters x float y float color uint u float v float normal Vec3 MeshBuilderVertexColorUvNormal(float, float, uint, float, float, float, float, float) public MeshBuilderVertexColorUvNormal(float x, float y, uint color, float u, float v, float nX, float nY, float nZ) Parameters x float y float color uint u float v float nX float nY float nZ float Fields Color public uint Color Field Value uint Normal public Vec4 Normal Field Value Vec4 Position public Vec3 Position Field Value Vec3 Uv public Vec2 Uv Field Value Vec2"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexNormal.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexNormal.html",
    "title": "Struct MeshBuilderVertexNormal | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexNormal Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a vertex with a normal in the GameMeshBuilder. public struct MeshBuilderVertexNormal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexNormal(Vec2, Vec3) public MeshBuilderVertexNormal(Vec2 position, Vec3 normal) Parameters position Vec2 normal Vec3 MeshBuilderVertexNormal(Vec2, float, float, float) public MeshBuilderVertexNormal(Vec2 position, float normalX, float normalY, float normalZ) Parameters position Vec2 normalX float normalY float normalZ float MeshBuilderVertexNormal(Vec3, Vec3) public MeshBuilderVertexNormal(Vec3 position, Vec3 normal) Parameters position Vec3 normal Vec3 MeshBuilderVertexNormal(Vec3, float, float, float) public MeshBuilderVertexNormal(Vec3 position, float normalX, float normalY, float normalZ) Parameters position Vec3 normalX float normalY float normalZ float MeshBuilderVertexNormal(float, float, float, Vec3) public MeshBuilderVertexNormal(float x, float y, float z, Vec3 normal) Parameters x float y float z float normal Vec3 MeshBuilderVertexNormal(float, float, float, float, float, float) public MeshBuilderVertexNormal(float x, float y, float z, float normalX, float normalY, float normalZ) Parameters x float y float z float normalX float normalY float normalZ float Fields Normal public Vec4 Normal Field Value Vec4 Position public Vec3 Position Field Value Vec3"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexUv.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexUv.html",
    "title": "Struct MeshBuilderVertexUv | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexUv Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a vertex with UV coordinates in the GameMeshBuilder. public struct MeshBuilderVertexUv Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexUv(Vec2, Vec2) public MeshBuilderVertexUv(Vec2 position, Vec2 uv) Parameters position Vec2 uv Vec2 MeshBuilderVertexUv(Vec2, float, float) public MeshBuilderVertexUv(Vec2 position, float u, float v) Parameters position Vec2 u float v float MeshBuilderVertexUv(Vec3, Vec2) public MeshBuilderVertexUv(Vec3 position, Vec2 uv) Parameters position Vec3 uv Vec2 MeshBuilderVertexUv(Vec3, float, float) public MeshBuilderVertexUv(Vec3 position, float u, float v) Parameters position Vec3 u float v float MeshBuilderVertexUv(float, float, Vec2) public MeshBuilderVertexUv(float x, float y, Vec2 uv) Parameters x float y float uv Vec2 MeshBuilderVertexUv(float, float, float, Vec2) public MeshBuilderVertexUv(float x, float y, float z, Vec2 uv) Parameters x float y float z float uv Vec2 MeshBuilderVertexUv(float, float, float, float) public MeshBuilderVertexUv(float x, float y, float u, float v) Parameters x float y float u float v float MeshBuilderVertexUv(float, float, float, float, float) public MeshBuilderVertexUv(float x, float y, float z, float u, float v) Parameters x float y float z float u float v float Fields Position public Vec3 Position Field Value Vec3 Uv public Vec2 Uv Field Value Vec2"
  },
  "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexUvNormal.html": {
    "href": "docs/OnixRuntime.Api.Rendering.MeshBuilderVertexUvNormal.html",
    "title": "Struct MeshBuilderVertexUvNormal | Onix Plugin Documentation",
    "summary": "Struct MeshBuilderVertexUvNormal Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a vertex with UV coordinates and a normal in the GameMeshBuilder. public struct MeshBuilderVertexUvNormal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MeshBuilderVertexUvNormal(Vec2, Vec2, Vec3) public MeshBuilderVertexUvNormal(Vec2 position, Vec2 uv, Vec3 normal) Parameters position Vec2 uv Vec2 normal Vec3 MeshBuilderVertexUvNormal(Vec2, Vec2, float, float, float) public MeshBuilderVertexUvNormal(Vec2 position, Vec2 uv, float normalX, float normalY, float normalZ) Parameters position Vec2 uv Vec2 normalX float normalY float normalZ float MeshBuilderVertexUvNormal(Vec2, float, float, Vec3) public MeshBuilderVertexUvNormal(Vec2 position, float u, float v, Vec3 normal) Parameters position Vec2 u float v float normal Vec3 MeshBuilderVertexUvNormal(Vec2, float, float, float, float, float) public MeshBuilderVertexUvNormal(Vec2 position, float u, float v, float normalX, float normalY, float normalZ) Parameters position Vec2 u float v float normalX float normalY float normalZ float MeshBuilderVertexUvNormal(Vec3, Vec2, Vec3) public MeshBuilderVertexUvNormal(Vec3 position, Vec2 uv, Vec3 normal) Parameters position Vec3 uv Vec2 normal Vec3 MeshBuilderVertexUvNormal(Vec3, Vec2, float, float, float) public MeshBuilderVertexUvNormal(Vec3 position, Vec2 uv, float normalX, float normalY, float normalZ) Parameters position Vec3 uv Vec2 normalX float normalY float normalZ float MeshBuilderVertexUvNormal(Vec3, float, float, Vec3) public MeshBuilderVertexUvNormal(Vec3 position, float u, float v, Vec3 normal) Parameters position Vec3 u float v float normal Vec3 MeshBuilderVertexUvNormal(Vec3, float, float, float, float, float) public MeshBuilderVertexUvNormal(Vec3 position, float u, float v, float normalX, float normalY, float normalZ) Parameters position Vec3 u float v float normalX float normalY float normalZ float MeshBuilderVertexUvNormal(float, float, Vec2, Vec3) public MeshBuilderVertexUvNormal(float x, float y, Vec2 uv, Vec3 normal) Parameters x float y float uv Vec2 normal Vec3 MeshBuilderVertexUvNormal(float, float, Vec2, float, float, float) public MeshBuilderVertexUvNormal(float x, float y, Vec2 uv, float normalX, float normalY, float normalZ) Parameters x float y float uv Vec2 normalX float normalY float normalZ float MeshBuilderVertexUvNormal(float, float, float, Vec2, Vec3) public MeshBuilderVertexUvNormal(float x, float y, float z, Vec2 uv, Vec3 normal) Parameters x float y float z float uv Vec2 normal Vec3 MeshBuilderVertexUvNormal(float, float, float, Vec2, float, float, float) public MeshBuilderVertexUvNormal(float x, float y, float z, Vec2 uv, float normalX, float normalY, float normalZ) Parameters x float y float z float uv Vec2 normalX float normalY float normalZ float MeshBuilderVertexUvNormal(float, float, float, float, Vec3) public MeshBuilderVertexUvNormal(float x, float y, float u, float v, Vec3 normal) Parameters x float y float u float v float normal Vec3 MeshBuilderVertexUvNormal(float, float, float, float, float, Vec3) public MeshBuilderVertexUvNormal(float x, float y, float z, float u, float v, Vec3 normal) Parameters x float y float z float u float v float normal Vec3 MeshBuilderVertexUvNormal(float, float, float, float, float, float, float) public MeshBuilderVertexUvNormal(float x, float y, float u, float v, float normalX, float normalY, float normalZ) Parameters x float y float u float v float normalX float normalY float normalZ float MeshBuilderVertexUvNormal(float, float, float, float, float, float, float, float) public MeshBuilderVertexUvNormal(float x, float y, float z, float u, float v, float normalX, float normalY, float normalZ) Parameters x float y float z float u float v float normalX float normalY float normalZ float Fields Normal public Vec4 Normal Field Value Vec4 Position public Vec3 Position Field Value Vec3 Uv public Vec2 Uv Field Value Vec2"
  },
  "docs/OnixRuntime.Api.Rendering.RenderContexes.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RenderContexes.html",
    "title": "Class RenderContexes | Onix Plugin Documentation",
    "summary": "Class RenderContexes Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides access to various rendering contexts and utilities. public class RenderContexes Inheritance object RenderContexes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Common Gets the common renderer for the current context. public RendererCommon Common { get; } Property Value RendererCommon Common2D Gets the common 2D renderer for Direct2D or game rendering contexts. public RendererTwoDimentional Common2D { get; } Property Value RendererTwoDimentional Direct2D Gets the Direct2D renderer for 2D rendering contexts. public RendererDirect2D Direct2D { get; } Property Value RendererDirect2D Game Gets the game renderer for game rendering contexts. public RendererGame Game { get; } Property Value RendererGame Origin Gets the origin vector for the current render context. public Vec3 Origin { get; } Property Value Vec3 RawFov According to O2Flash, The current horizontal and vertical field of view. With no zoom or other effects on the camera, fovY (vertical) should be the same as the fov in setting and game effects. public Vec2 RawFov { get; } Property Value Vec2 World Gets the world renderer for 3D rendering contexts. public RendererWorld World { get; } Property Value RendererWorld Methods WorldToScreen(Vec3) Converts a world position to a screen position. public Vec2? WorldToScreen(Vec3 point) Parameters point Vec3 The world position to convert. Returns Vec2? The screen position as a Vec2, or null if not available."
  },
  "docs/OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper.html",
    "title": "Struct RendererCommon.OpacityPopper | Onix Plugin Documentation",
    "summary": "Struct RendererCommon.OpacityPopper Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Helper struct for managing opacity stack with automatic pop on dispose. public struct RendererCommon.OpacityPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OpacityPopper(RendererCommon) Initializes a new instance of the RendererCommon.OpacityPopper struct. public OpacityPopper(RendererCommon renderer) Parameters renderer RendererCommon The renderer to manage opacity for. Methods Dispose() Pops the opacity from the stack when disposed. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper.html",
    "title": "Struct RendererCommon.TransformationPopper | Onix Plugin Documentation",
    "summary": "Struct RendererCommon.TransformationPopper Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Helper struct for managing transformation stack with automatic pop on dispose. public struct RendererCommon.TransformationPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransformationPopper(RendererCommon) Initializes a new instance of the RendererCommon.TransformationPopper struct. public TransformationPopper(RendererCommon renderer) Parameters renderer RendererCommon The renderer to manage transformation for. Methods Dispose() Pops the transformation from the stack when disposed. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.RendererCommon.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererCommon.html",
    "title": "Class RendererCommon | Onix Plugin Documentation",
    "summary": "Class RendererCommon Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides common rendering methods for 2D and 3D drawing operations. public class RendererCommon Inheritance object RendererCommon Derived RendererTwoDimentional RendererWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RendererCommon() protected RendererCommon() Properties FontType Lets you set a specific font type to use instead of user preference. public FontType FontType { get; set; } Property Value FontType FontUsage Lets you set the usage for the font so that it respects the user's choice if you're doing something else. public FontUsage FontUsage { get; set; } Property Value FontUsage Height Gets the height of the rendering area. public virtual float Height { get; } Property Value float Size Gets the size of the rendering area as a vector. public virtual Vec2 Size { get; } Property Value Vec2 Width Gets the width of the rendering area. public virtual float Width { get; } Property Value float Methods DrawCircle(Vec2, ColorF, float, float) Draws the outline of a circle. public virtual void DrawCircle(Vec2 center, ColorF color, float radius, float width) Parameters center Vec2 The center of the circle. color ColorF The color of the outline. radius float The radius of the circle. width float The width of the outline. DrawCircle(Vec2, ColorF, float, float, int) Draws the outline of a circle. public virtual void DrawCircle(Vec2 center, ColorF color, float radius, float width, int iterations) Parameters center Vec2 The center of the circle. color ColorF The color of the outline. radius float The radius of the circle. width float The width of the outline. iterations int The number of iterations for the circle. DrawEllipse(Vec2, ColorF, Vec2, float) Draws the outline of an ellipse. public virtual void DrawEllipse(Vec2 center, ColorF color, Vec2 radius, float width) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radius Vec2 The radii of the ellipse. width float The width of the outline. DrawEllipse(Vec2, ColorF, Vec2, float, int) Draws the outline of an ellipse. public virtual void DrawEllipse(Vec2 center, ColorF color, Vec2 radius, float width, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radius Vec2 The radii of the ellipse. width float The width of the outline. iterations int The number of iterations for the ellipse. DrawEllipse(Vec2, ColorF, float, float, float) Draws the outline of an ellipse. public virtual void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. width float The width of the outline. DrawEllipse(Vec2, ColorF, float, float, float, int) Draws the outline of an ellipse. public virtual void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. width float The width of the outline. iterations int The number of iterations for the ellipse. DrawRectangle(Rect, ColorF, float) Draws the outline of a rectangle towards the inside only. public virtual void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. DrawRoundedRectangle(Rect, ColorF, float, float) Draws the outline of a rounded rectangle towards the inside only. public virtual void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. cornerRadius float The radius of the corners. DrawRoundedRectangle(Rect, ColorF, float, float, int) Draws the outline of a rounded rectangle towards the inside only. public virtual void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. FillCircle(Vec2, ColorF, float) Fills a circle with the specified color. public virtual void FillCircle(Vec2 center, ColorF color, float radius) Parameters center Vec2 The center of the circle. color ColorF The fill color. radius float The radius of the circle. FillCircle(Vec2, ColorF, float, int) Fills a circle with the specified color. public virtual void FillCircle(Vec2 center, ColorF color, float radius, int iterations) Parameters center Vec2 The center of the circle. color ColorF The fill color. radius float The radius of the circle. iterations int The number of iterations for the circle. FillEllipse(Vec2, ColorF, Vec2) Fills an ellipse with the specified color. public virtual void FillEllipse(Vec2 center, ColorF color, Vec2 radius) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radius Vec2 The radii of the ellipse. FillEllipse(Vec2, ColorF, Vec2, int) Fills an ellipse with the specified color. public virtual void FillEllipse(Vec2 center, ColorF color, Vec2 radius, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radius Vec2 The radii of the ellipse. iterations int The number of iterations for the ellipse. FillEllipse(Vec2, ColorF, float, float) Fills an ellipse with the specified color. public virtual void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. FillEllipse(Vec2, ColorF, float, float, int) Fills an ellipse with the specified color. public virtual void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. iterations int The number of iterations for the ellipse. FillRectangle(Rect, ColorF) Fills a rectangle with the specified color. public virtual void FillRectangle(Rect position, ColorF color) Parameters position Rect The rectangle to fill. color ColorF The fill color. FillRoundedRectangle(Rect, ColorF, float) Fills a rounded rectangle with the specified color and corner radius. public virtual void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius) Parameters position Rect The rectangle to fill. color ColorF The fill color. cornerRadius float The radius of the corners. FillRoundedRectangle(Rect, ColorF, float, int) Fills a rounded rectangle with the specified color and corner radius. public virtual void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect The rectangle to fill. color ColorF The fill color. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. GetOpacity(float) Gets the resulting opacity after applying the opacity stack. public virtual float GetOpacity(float opacity = 1) Parameters opacity float The base opacity value. Returns float The resulting opacity. GetTextureStatus(TexturePath) Gets the status of a texture. public virtual RendererTextureStatus GetTextureStatus(TexturePath texture) Parameters texture TexturePath The texture texture. Returns RendererTextureStatus The status of the texture. MeasureText(string, float) Measures the size of the specified text. public virtual Vec2 MeasureText(string text, float scale = 1) Parameters text string The text to measure. scale float The scale of the text. Returns Vec2 The size of the text as a vector. PopOpacity() protected virtual void PopOpacity() PopTransformation() protected virtual void PopTransformation() PushOpacity(float) Pushes an opacity value onto the stack and returns a popper for automatic management. public virtual RendererCommon.OpacityPopper PushOpacity(float opacity) Parameters opacity float The opacity value to push. Returns RendererCommon.OpacityPopper An RendererCommon.OpacityPopper for automatic pop. PushTransformation(TransformationMatrix, bool) Pushes a transformation matrix onto the stack and returns a popper for automatic management. public virtual RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix The transformation matrix to push. multiplyPrevious bool Whether to multiply with the previous transformation. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) Renders aligned text at the specified position. public virtual void RenderText(Vec2 position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. alignmentX TextAlignment The horizontal alignment. alignmentY TextAlignment The vertical alignment. scale float The scale of the text. RenderText(Vec2, ColorF, string, float) Renders text at the specified position. public virtual void RenderText(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. scale float The scale of the text. RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) Renders aligned text within a rectangle. public void RenderText(Rectangle position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Rectangle The rectangle to render the text in. color ColorF The color of the text. text string The text to render. alignmentX TextAlignment The horizontal alignment. alignmentY TextAlignment The vertical alignment. scale float The scale of the text. RenderTextCentered(Rect, ColorF, string, float) Renders centered text within a rectangle. public virtual void RenderTextCentered(Rect position, ColorF color, string text, float scale = 1) Parameters position Rect The rectangle to center the text in. color ColorF The color of the text. text string The text to render. scale float The scale of the text. RenderTextCentered(Vec2, ColorF, string, float) Renders centered text at the specified position. public virtual void RenderTextCentered(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. scale float The scale of the text. RenderTexture(Rect, TexturePath, ColorF) Renders a texture in the specified Region with a color tint. public virtual void RenderTexture(Rect region, TexturePath texture, ColorF tint) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. RenderTexture(Rect, TexturePath, ColorF, Rect) Renders a texture in the specified Region with a color tint and UV coordinates. public virtual void RenderTexture(Rect region, TexturePath texture, ColorF tint, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. uv Rect The UV coordinates. RenderTexture(Rect, TexturePath, float) Renders a texture in the specified Region with optional opacity. public virtual void RenderTexture(Rect region, TexturePath texture, float opacity = 1) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. RenderTexture(Rect, TexturePath, float, Rect) Renders a texture in the specified Region with optional opacity and UV coordinates. public virtual void RenderTexture(Rect region, TexturePath texture, float opacity, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. uv Rect The UV coordinates. SetDefaultState(bool) Sets the default state of the renderer, optionally as the final state. public virtual void SetDefaultState(bool final) Parameters final bool Whether this is the final state. UnloadTexture(TexturePath) Unloads the specified texture from the renderer. public virtual void UnloadTexture(TexturePath texture) Parameters texture TexturePath The texture texture. UploadTexture(TexturePath, RawImageData) Uploads a texture to the renderer. public virtual void UploadTexture(TexturePath path, RawImageData data) Parameters path TexturePath The texture path. data RawImageData The raw image data. WrapText(string, float, float, int) Wraps text to fit within a maximum width and number of lines. public virtual string WrapText(string text, float maxWidth, float scale = 1, int maxLines = 6000) Parameters text string The text to wrap. maxWidth float The maximum width for the text. scale float The scale of the text. maxLines int The maximum number of lines. Returns string The wrapped text."
  },
  "docs/OnixRuntime.Api.Rendering.RendererDirect2D.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererDirect2D.html",
    "title": "Class RendererDirect2D | Onix Plugin Documentation",
    "summary": "Class RendererDirect2D Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides rendering functionality for Direct2D contexts. public class RendererDirect2D : RendererTwoDimentional Inheritance object RendererCommon RendererTwoDimentional RendererDirect2D Inherited Members RendererTwoDimentional.SetClippingRectangle(Rect) RendererTwoDimentional.PushClippingRectangle(Rect) RendererTwoDimentional.PopClippingRectangle() RendererTwoDimentional.ResetClippingRectangle() RendererTwoDimentional.PushRenderOffset(Vec2, Vec2) RendererTwoDimentional.PushRenderOffset(Vec2, float) RendererTwoDimentional.PushRenderOffset(Vec2, float, float) RendererTwoDimentional.PushRenderOffset(Vec2) RendererTwoDimentional.PushRenderOffset(float, float) RendererTwoDimentional.PushRenderOffset(float, float, float) RendererTwoDimentional.PushRenderOffset(float, float, Vec2) RendererTwoDimentional.PushRenderOffset(float, float, float, float) RendererTwoDimentional.SetDefaultState(bool) RendererCommon.FontUsage RendererCommon.FontType RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRectangle(Rect, ColorF) RendererCommon.DrawRectangle(Rect, ColorF, float) RendererCommon.FillRoundedRectangle(Rect, ColorF, float, int) RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float, int) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, float, float, int) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderText(Vec2, ColorF, string, float) RendererCommon.RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.RenderTexture(Rect, TexturePath, float) RendererCommon.RenderTexture(Rect, TexturePath, ColorF) RendererCommon.RenderTexture(Rect, TexturePath, float, Rect) RendererCommon.RenderTexture(Rect, TexturePath, ColorF, Rect) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() RendererCommon.PushTransformation(TransformationMatrix, bool) RendererCommon.PopTransformation() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RenderSetting(OnixSetting, Rect, ClickType, bool, float?, Vec2?) Renders a setting in the specified position with optional animation, scrollbar, and scale. public bool RenderSetting(OnixSetting setting, Rect position, InputKey.ClickType click, bool hideAnimation = false, float? scrollbarWidth = null, Vec2? scale = null) Parameters setting OnixSetting The setting to render. position Rect The position and size to render the setting. click InputKey.ClickType The click type. hideAnimation bool Whether to hide the animation. scrollbarWidth float? Optional scrollbar width. scale Vec2? Optional scale vector. Returns bool True if the click was handled; otherwise, false. RenderSubSetting(OnixSetting, Rect, Vec2, ClickType, bool, float?, Vec2?) Renders a sub-setting in the specified position with mouse position, optional animation, scrollbar, and scale. public bool RenderSubSetting(OnixSetting setting, Rect position, Vec2 mousePosition, InputKey.ClickType click, bool hideAnimation = false, float? scrollbarWidth = null, Vec2? scale = null) Parameters setting OnixSetting The sub-setting to render. position Rect The position and size to render the sub-setting. mousePosition Vec2 The mouse position for interaction. click InputKey.ClickType The click type. hideAnimation bool Whether to hide the animation. scrollbarWidth float? Optional scrollbar width. scale Vec2? Optional scale vector. Returns bool True if the click was handled; otherwise, false."
  },
  "docs/OnixRuntime.Api.Rendering.RendererGame.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererGame.html",
    "title": "Class RendererGame | Onix Plugin Documentation",
    "summary": "Class RendererGame Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides rendering functionality for game contexts, supporting 2D and mesh-based drawing. public class RendererGame : RendererTwoDimentional, IGameRenderer Inheritance object RendererCommon RendererTwoDimentional RendererGame Implements IGameRenderer Inherited Members RendererTwoDimentional.PushClippingRectangle(Rect) RendererTwoDimentional.PushRenderOffset(Vec2, Vec2) RendererTwoDimentional.PushRenderOffset(Vec2, float) RendererTwoDimentional.PushRenderOffset(Vec2, float, float) RendererTwoDimentional.PushRenderOffset(Vec2) RendererTwoDimentional.PushRenderOffset(float, float) RendererTwoDimentional.PushRenderOffset(float, float, float) RendererTwoDimentional.PushRenderOffset(float, float, Vec2) RendererTwoDimentional.PushRenderOffset(float, float, float, float) RendererCommon.FontUsage RendererCommon.FontType RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MeshBuilder Gets the mesh builder for rendering. Note: You NEED to store this in a variable OR use RawMeshBuilder. public GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Methods DrawEllipse(Vec2, ColorF, float, float, float, int) Draws the outline of an ellipse. public override void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. width float The width of the outline. iterations int The number of iterations for the ellipse. DrawLine(Vec2, Vec2, ColorF) Draws a line between two 2D points with a single color. public virtual void DrawLine(Vec2 point1, Vec2 point2, ColorF color) Parameters point1 Vec2 The first point. point2 Vec2 The second point. color ColorF The color of the line. DrawLine(Vec3, Vec3, ColorF) Draws a line between two 3D points with a single color. public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color) Parameters point1 Vec3 The first point. point2 Vec3 The second point. color ColorF The color of the line. DrawLine(Vec3, Vec3, ColorF, ColorF) Draws a line between two 3D points with different colors. public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color1, ColorF color2) Parameters point1 Vec3 The first point. point2 Vec3 The second point. color1 ColorF The color of the first point. color2 ColorF The color of the second point. DrawRectangle(Rect, ColorF, float) Draws the outline of a rectangle towards the inside only. public override void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. DrawRoundedRectangle(Rect, ColorF, float, float, int) Draws the outline of a rounded rectangle towards the inside only. public override void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. FillEllipse(Vec2, ColorF, float, float, int) Fills an ellipse with the specified color. public override void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. iterations int The number of iterations for the ellipse. FillRectangle(Rect, ColorF) Fills a rectangle with the specified color. public override void FillRectangle(Rect position, ColorF color) Parameters position Rect The rectangle to fill. color ColorF The fill color. FillRoundedRectangle(Rect, ColorF, float, int) Fills a rounded rectangle with the specified color and corner radius. public override void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect The rectangle to fill. color ColorF The fill color. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. FlushMesh() Flushes the current mesh, rendering any pending geometry. public void FlushMesh() NewMeshBuilderSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null) Parameters primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null) Parameters texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null) Parameters color ColorF? primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters color ColorF? texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } PopClippingRectangle() Pops the clipping rectangle and flushes the mesh. protected override void PopClippingRectangle() PopTransformation() Pops the transformation from the stack and flushes the mesh. protected override void PopTransformation() PushTransformation(TransformationMatrix, bool) Pushes a transformation matrix onto the stack and flushes the mesh. public override RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix The transformation matrix to push. multiplyPrevious bool Whether to multiply with the previous transformation. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. RenderItem(Vec2, ItemStack, bool, float, bool) Renders an item at the specified position. public void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 The position vector. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderItem(float, float, ItemStack, bool, float, bool) Renders an item at the specified coordinates. public void RenderItem(float x, float y, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters x float The x-coordinate. y float The y-coordinate. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderMesh(GameMesh, ColorF, TexturePath, uint, uint) Renders a mesh with the specified color and texture. public void RenderMesh(GameMesh mesh, ColorF color, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render. RenderMesh(GameMesh, ColorF, uint, uint) Renders a mesh with the specified color. public void RenderMesh(GameMesh mesh, ColorF color, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. startOffset uint The starting offset. count uint The number of elements to render. RenderMesh(GameMesh, TexturePath, uint, uint) Renders a mesh with the specified texture. public void RenderMesh(GameMesh mesh, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render. RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) Renders aligned text at the specified position. public override void RenderText(Vec2 position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. alignmentX TextAlignment The horizontal alignment. alignmentY TextAlignment The vertical alignment. scale float The scale of the text. RenderText(Vec2, ColorF, string, float) Renders text at the specified position. public override void RenderText(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. scale float The scale of the text. RenderTexture(Rect, TexturePath, ColorF) Renders a texture in the specified Region with a color tint. public override void RenderTexture(Rect region, TexturePath texture, ColorF tint) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. RenderTexture(Rect, TexturePath, ColorF, Rect) Renders a texture in the specified Region with a color tint and UV coordinates. public override void RenderTexture(Rect region, TexturePath texture, ColorF tint, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. uv Rect The UV coordinates. RenderTexture(Rect, TexturePath, float) Renders a texture in the specified Region with optional opacity. public override void RenderTexture(Rect region, TexturePath texture, float opacity = 1) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. RenderTexture(Rect, TexturePath, float, Rect) Renders a texture in the specified Region with optional opacity and UV coordinates. public override void RenderTexture(Rect region, TexturePath texture, float opacity, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. uv Rect The UV coordinates. ResetClippingRectangle() Resets the clipping rectangle and flushes the mesh. public override void ResetClippingRectangle() SetClippingRectangle(Rect) Sets the clipping rectangle and flushes the mesh. public override void SetClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect The clipping rectangle to set. SetDefaultState(bool) Sets the default state of the renderer, optionally as the final state, and flushes the mesh. public override void SetDefaultState(bool final) Parameters final bool Whether this is the final state."
  },
  "docs/OnixRuntime.Api.Rendering.RendererTextureStatus.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererTextureStatus.html",
    "title": "Enum RendererTextureStatus | Onix Plugin Documentation",
    "summary": "Enum RendererTextureStatus Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents the status of a renderer texture. public enum RendererTextureStatus Fields Loaded = 3 Texture is loaded. Loading = 2 Texture is loading. Missing = 0 Texture is missing. Unloaded = 1 Texture is unloaded."
  },
  "docs/OnixRuntime.Api.Rendering.RendererTwoDimentional.ClippingRectanglePopper.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererTwoDimentional.ClippingRectanglePopper.html",
    "title": "Struct RendererTwoDimentional.ClippingRectanglePopper | Onix Plugin Documentation",
    "summary": "Struct RendererTwoDimentional.ClippingRectanglePopper Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Helper struct for managing the clipping rectangle stack with automatic pop on dispose. public struct RendererTwoDimentional.ClippingRectanglePopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Dispose() Pops the clipping rectangle from the stack when disposed. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.RendererTwoDimentional.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererTwoDimentional.html",
    "title": "Class RendererTwoDimentional | Onix Plugin Documentation",
    "summary": "Class RendererTwoDimentional Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides 2D rendering functionality, including clipping and render offset utilities. public class RendererTwoDimentional : RendererCommon Inheritance object RendererCommon RendererTwoDimentional Derived RendererDirect2D RendererGame Inherited Members RendererCommon.FontUsage RendererCommon.FontType RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRectangle(Rect, ColorF) RendererCommon.DrawRectangle(Rect, ColorF, float) RendererCommon.FillRoundedRectangle(Rect, ColorF, float, int) RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float, int) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, float, float, int) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderText(Vec2, ColorF, string, float) RendererCommon.RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.RenderTexture(Rect, TexturePath, float) RendererCommon.RenderTexture(Rect, TexturePath, ColorF) RendererCommon.RenderTexture(Rect, TexturePath, float, Rect) RendererCommon.RenderTexture(Rect, TexturePath, ColorF, Rect) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() RendererCommon.PushTransformation(TransformationMatrix, bool) RendererCommon.PopTransformation() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PopClippingRectangle() protected virtual void PopClippingRectangle() PushClippingRectangle(Rect) Pushes a clipping rectangle onto the stack and returns a popper for automatic management. public RendererTwoDimentional.ClippingRectanglePopper PushClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect The clipping rectangle to push. Returns RendererTwoDimentional.ClippingRectanglePopper A RendererTwoDimentional.ClippingRectanglePopper for automatic pop. PushRenderOffset(Vec2) Pushes a render offset transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset) Parameters offset Vec2 The offset vector. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(Vec2, Vec2) Pushes a render offset and scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, Vec2 scale) Parameters offset Vec2 The offset vector. scale Vec2 The scale vector. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(Vec2, float) Pushes a render offset and uniform scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, float scale) Parameters offset Vec2 The offset vector. scale float The uniform scale factor. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(Vec2, float, float) Pushes a render offset and non-uniform scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, float scaleX, float scaleY) Parameters offset Vec2 The offset vector. scaleX float The x-axis scale factor. scaleY float The y-axis scale factor. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(float, float) Pushes a render offset transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(float x, float y) Parameters x float The x offset. y float The y offset. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(float, float, Vec2) Pushes a render offset and scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, Vec2 scale) Parameters x float The x offset. y float The y offset. scale Vec2 The scale vector. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(float, float, float) Pushes a render offset and uniform scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, float scale) Parameters x float The x offset. y float The y offset. scale float The uniform scale factor. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushRenderOffset(float, float, float, float) Pushes a render offset and non-uniform scale transformation onto the stack. public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, float scaleX, float scaleY) Parameters x float The x offset. y float The y offset. scaleX float The x-axis scale factor. scaleY float The y-axis scale factor. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. ResetClippingRectangle() Resets the clipping rectangle to its default state. public virtual void ResetClippingRectangle() SetClippingRectangle(Rect) Sets the clipping rectangle for subsequent rendering operations. public virtual void SetClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect The clipping rectangle to set. SetDefaultState(bool) Sets the default state of the renderer, optionally as the final state, and resets the clipping rectangle. public override void SetDefaultState(bool final) Parameters final bool Whether this is the final state."
  },
  "docs/OnixRuntime.Api.Rendering.RendererWorld.WorldRenderSettingsPopper.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererWorld.WorldRenderSettingsPopper.html",
    "title": "Struct RendererWorld.WorldRenderSettingsPopper | Onix Plugin Documentation",
    "summary": "Struct RendererWorld.WorldRenderSettingsPopper Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Helper struct for managing world render settings with automatic pop on dispose. public struct RendererWorld.WorldRenderSettingsPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WorldRenderSettingsPopper(RendererWorld, bool) Helper struct for managing world render settings with automatic pop on dispose. public WorldRenderSettingsPopper(RendererWorld renderer, bool disposedCtorParam) Parameters renderer RendererWorld disposedCtorParam bool Properties DepthTest Gets whether depth testing is enabled. public bool DepthTest { get; } Property Value bool RenderBackFace Gets whether back face rendering is enabled. public bool RenderBackFace { get; } Property Value bool RenderFrontFace Gets whether front face rendering is enabled. public bool RenderFrontFace { get; } Property Value bool SimulatingUi Gets whether UI simulation is enabled. public bool SimulatingUi { get; } Property Value bool Methods Dispose() Pops the world render settings when disposed. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.RendererWorld.WorldUIRenderSettingsPopper.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererWorld.WorldUIRenderSettingsPopper.html",
    "title": "Struct RendererWorld.WorldUIRenderSettingsPopper | Onix Plugin Documentation",
    "summary": "Struct RendererWorld.WorldUIRenderSettingsPopper Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Helper struct for managing world UI render settings and transformation stack with automatic pop on dispose. public struct RendererWorld.WorldUIRenderSettingsPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WorldUIRenderSettingsPopper(WorldRenderSettingsPopper, TransformationPopper, RendererWorld) Helper struct for managing world UI render settings and transformation stack with automatic pop on dispose. public WorldUIRenderSettingsPopper(RendererWorld.WorldRenderSettingsPopper worldSettingsPopperCtor, RendererCommon.TransformationPopper transformationPopperCtor, RendererWorld renderer) Parameters worldSettingsPopperCtor RendererWorld.WorldRenderSettingsPopper transformationPopperCtor RendererCommon.TransformationPopper renderer RendererWorld Methods Dispose() Pops the world UI render settings and transformation when disposed. public void Dispose()"
  },
  "docs/OnixRuntime.Api.Rendering.RendererWorld.html": {
    "href": "docs/OnixRuntime.Api.Rendering.RendererWorld.html",
    "title": "Class RendererWorld | Onix Plugin Documentation",
    "summary": "Class RendererWorld Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Provides rendering functionality for 3D world contexts, including mesh, item, and lighting operations. public class RendererWorld : RendererCommon, IGameRenderer Inheritance object RendererCommon RendererWorld Implements IGameRenderer Inherited Members RendererCommon.FontUsage RendererCommon.FontType RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height Gets the height of the rendering area, considering the screen size stack. public override float Height { get; } Property Value float MeshBuilder Gets the mesh builder for rendering. Note: You NEED to store this in a variable OR use _rawMeshBuilder. public GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Size Gets the size of the rendering area as a vector, considering the screen size stack. public override Vec2 Size { get; } Property Value Vec2 Width Gets the width of the rendering area, considering the screen size stack. public override float Width { get; } Property Value float Methods DrawEllipse(Vec2, ColorF, float, float, float, int) Draws the outline of an ellipse. public override void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The color of the outline. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. width float The width of the outline. iterations int The number of iterations for the ellipse. DrawLine(Vec2, Vec2, ColorF) Draws a line between two 2D points with a single color. public virtual void DrawLine(Vec2 point1, Vec2 point2, ColorF color) Parameters point1 Vec2 The first point. point2 Vec2 The second point. color ColorF The color of the line. DrawLine(Vec3, Vec3, ColorF) Draws a line between two 3D points with a single color. public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color) Parameters point1 Vec3 The first point. point2 Vec3 The second point. color ColorF The color of the line. DrawLine(Vec3, Vec3, ColorF, ColorF) Draws a line between two 3D points with different colors. public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color1, ColorF color2) Parameters point1 Vec3 The first point. point2 Vec3 The second point. color1 ColorF The color of the first point. color2 ColorF The color of the second point. DrawRectangle(Rect, ColorF, float) Draws the outline of a rectangle towards the inside only. public override void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. DrawRoundedRectangle(Rect, ColorF, float, float, int) Draws the outline of a rounded rectangle towards the inside only. public override void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect The rectangle to draw. color ColorF The outline color. width float The width of the outline. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. EnableLights(bool) Enables or disables lighting for the renderer. public virtual void EnableLights(bool enabled) Parameters enabled bool True to enable lighting; false to disable. FillEllipse(Vec2, ColorF, float, float, int) Fills an ellipse with the specified color. public override void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 The center of the ellipse. color ColorF The fill color. radiusX float The x-radius of the ellipse. radiusY float The y-radius of the ellipse. iterations int The number of iterations for the ellipse. FillRectangle(Rect, ColorF) Fills a rectangle with the specified color. public override void FillRectangle(Rect position, ColorF color) Parameters position Rect The rectangle to fill. color ColorF The fill color. FillRoundedRectangle(Rect, ColorF, float, int) Fills a rounded rectangle with the specified color and corner radius. public override void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect The rectangle to fill. color ColorF The fill color. cornerRadius float The radius of the corners. iterations int The number of iterations for the rounded corners. FlushMesh() Flushes the current mesh, rendering any pending geometry. public void FlushMesh() GetWorldRenderSettings() Gets the current world render settings. public RendererWorld.WorldRenderSettingsPopper GetWorldRenderSettings() Returns RendererWorld.WorldRenderSettingsPopper InternalPushWorldRenderSettings(bool, bool, bool, bool) protected void InternalPushWorldRenderSettings(bool depthTest = true, bool renderBackface = false, bool simulateUI = false, bool renderFrontFace = true) Parameters depthTest bool renderBackface bool simulateUI bool renderFrontFace bool NewMeshBuilderSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null) Parameters primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null) Parameters texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. color ColorF? Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null) Parameters color ColorF? primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. texture TexturePath The texture that will be used when rendering. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } NewMeshBuilderSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType) Starts a new mesh builder session. Disposing the session will cause the mesh to be rendered. You should use this one whenever possible since it will properly handle more cases like when you push TransformationMatrix> matrices. Remember to use TranslateWorldPosition(Vec3) for when you position it in the world after your initial transformations. public GameMeshBuilder.GameMeshBuilderSession NewMeshBuilderSession(ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters color ColorF? texture TexturePath The texture that will be used when rendering. primitiveType MeshBuilderPrimitiveType The type of primitive the vertices will represent. Returns GameMeshBuilder.GameMeshBuilderSession The new session, don't forget to dispose it! Examples using (var mb = Onix.Render.Game.NewMeshBuilderSession()) { //Define the vertices for the mesh however you want //mb.Vertex(...) } PopTransformation() Pops the transformation from the stack and flushes the mesh. protected override void PopTransformation() PushTransformation(TransformationMatrix, bool) Pushes a transformation matrix onto the stack and flushes the mesh. public override RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix The transformation matrix to push. multiplyPrevious bool Whether to multiply with the previous transformation. Returns RendererCommon.TransformationPopper A RendererCommon.TransformationPopper for automatic pop. PushWorldRenderSettings(bool, bool, bool, bool) Pushes new world render settings and returns the previous settings for restoration. public RendererWorld.WorldRenderSettingsPopper PushWorldRenderSettings(bool depthTest = true, bool renderBackface = false, bool simulateUI = false, bool renderFrontFace = true) Parameters depthTest bool Enable depth testing. renderBackface bool Enable back face rendering. simulateUI bool Enable UI simulation. renderFrontFace bool Enable front face rendering. Returns RendererWorld.WorldRenderSettingsPopper The previous world render settings. PushWorldUIRenderSettings(BlockPos, BlockFace, Vec2, Vec2, float) Pushes world UI render settings for a block position and face. public RendererWorld.WorldUIRenderSettingsPopper PushWorldUIRenderSettings(BlockPos position, BlockFace face, Vec2 pixelsPerBlock, Vec2 sizeInBlocks, float extraRotation = 0) Parameters position BlockPos The block position. face BlockFace The block face. pixelsPerBlock Vec2 Pixels per block. sizeInBlocks Vec2 Size in blocks. extraRotation float Extra rotation in degrees. Returns RendererWorld.WorldUIRenderSettingsPopper A popper for automatic restoration. PushWorldUIRenderSettings(Vec3, BlockFace, Vec2, Vec2, float) Pushes world UI render settings for a 3D position and face. public RendererWorld.WorldUIRenderSettingsPopper PushWorldUIRenderSettings(Vec3 position, BlockFace face, Vec2 pixelsPerBlock, Vec2 sizeInBlocks, float extraRotation = 0) Parameters position Vec3 The 3D position. face BlockFace The block face. pixelsPerBlock Vec2 Pixels per block. sizeInBlocks Vec2 Size in blocks. extraRotation float Extra rotation in degrees. Returns RendererWorld.WorldUIRenderSettingsPopper A popper for automatic restoration. RenderBoundingBoxFill(BoundingBox, ColorF) Renders a bounding box with the specified color. public virtual void RenderBoundingBoxFill(BoundingBox box, ColorF color) Parameters box BoundingBox The bounding box to render. color ColorF The color of the bounding box. RenderBoundingBoxFill(BoundingBox, ColorF, PerBlockFaceFaceData<bool>) Renders a bounding box with the specified color. public virtual void RenderBoundingBoxFill(BoundingBox box, ColorF color, PerBlockFaceFaceData<bool> shouldRenderFace) Parameters box BoundingBox The bounding box to render. color ColorF The color of the bounding box. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. RenderBoundingBoxOutline(BoundingBox, ColorF) Renders the outline of a bounding box with the specified color. public virtual void RenderBoundingBoxOutline(BoundingBox box, ColorF color) Parameters box BoundingBox The bounding box to render. color ColorF The color of the bounding box. RenderBoundingBoxTextured(BoundingBox, TexturePath) Renders all faces of a bounding box with the specified texture, FullUV for its uv coordinates and NoRotation without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. RenderBoundingBoxTextured(BoundingBox, TexturePath, ColorF) Renders all faces of a bounding box with the specified texture, FullUV for its uv coordinates and NoRotation without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, ColorF tint) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. tint ColorF The color of the texture tint. RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>) Renders the faces of a bounding box with the specified texture, FullUV for its uv coordinates and NoRotation without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>, ColorF) Renders the faces of a bounding box with the specified texture, FullUV for its uv coordinates and NoRotation without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace, ColorF tint) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. tint ColorF The color of the texture tint. RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<BlockFaceUvRotation>) Renders the faces of a bounding box with the specified texture, FullUV for its uv coordinates and rotations without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace, PerBlockFaceFaceData<BlockFaceUvRotation> uvRotation) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. uvRotation PerBlockFaceFaceData<BlockFaceUvRotation> RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<BlockFaceUvRotation>, ColorF) Renders the faces of a bounding box with the specified texture, FullUV for its uv coordinates and rotations without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace, PerBlockFaceFaceData<BlockFaceUvRotation> uvRotation, ColorF tint) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. uvRotation PerBlockFaceFaceData<BlockFaceUvRotation> tint ColorF The color of the texture tint. RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<Rect>, PerBlockFaceFaceData<BlockFaceUvRotation>) Renders the faces of a bounding box with the specified texture, uv coordinates and rotations without a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace, PerBlockFaceFaceData<Rect> perFaceUv, PerBlockFaceFaceData<BlockFaceUvRotation> uvRotation) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. perFaceUv PerBlockFaceFaceData<Rect> The UV coordinates of each face. uvRotation PerBlockFaceFaceData<BlockFaceUvRotation> RenderBoundingBoxTextured(BoundingBox, TexturePath, PerBlockFaceFaceData<bool>, PerBlockFaceFaceData<Rect>, PerBlockFaceFaceData<BlockFaceUvRotation>, ColorF) Renders the faces of a bounding box with the specified texture, uv coordinates and rotations with a tint. public virtual void RenderBoundingBoxTextured(BoundingBox box, TexturePath texture, PerBlockFaceFaceData<bool> shouldRenderFace, PerBlockFaceFaceData<Rect> perFaceUv, PerBlockFaceFaceData<BlockFaceUvRotation> uvRotation, ColorF tint) Parameters box BoundingBox The bounding box to render. texture TexturePath The texture to render the bounding box with. shouldRenderFace PerBlockFaceFaceData<bool> 6 booleans to know which faces should be rendered. perFaceUv PerBlockFaceFaceData<Rect> The UV coordinates of each face. uvRotation PerBlockFaceFaceData<BlockFaceUvRotation> tint ColorF The color of the texture tint. RenderItem(Vec2, ItemStack, bool, float, bool) Renders an item at the specified position. public void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = false, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 The position vector. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderItem(float, float, ItemStack, bool, float, bool) Renders an item at the specified position. public virtual void RenderItem(float x, float y, ItemStack item, bool renderDecorations = false, float scale = 1, bool forceEnchantEffect = false) Parameters x float The x position of the item. y float The y position of the item. item ItemStack The item stack to render. renderDecorations bool Whether to render decorations. scale float The scale factor. forceEnchantEffect bool Whether to force the enchant effect. Remarks You can set the ShowPickup.ShowPickup to false. RenderMesh(GameMesh, ColorF, TexturePath, uint, uint) Renders a mesh with the specified color and texture. public void RenderMesh(GameMesh mesh, ColorF color, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render. RenderMesh(GameMesh, ColorF, uint, uint) Renders a mesh with the specified color. public void RenderMesh(GameMesh mesh, ColorF color, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. color ColorF The color to apply. startOffset uint The starting offset. count uint The number of elements to render. RenderMesh(GameMesh, TexturePath, uint, uint) Renders a mesh with the specified texture. public void RenderMesh(GameMesh mesh, TexturePath texture, uint startOffset = 0, uint count = 0) Parameters mesh GameMesh The mesh to render. texture TexturePath The texture to use. startOffset uint The starting offset. count uint The number of elements to render. RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) Renders aligned text at the specified position. public override void RenderText(Vec2 position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. alignmentX TextAlignment The horizontal alignment. alignmentY TextAlignment The vertical alignment. scale float The scale of the text. RenderText(Vec2, ColorF, string, float) Renders text at the specified position. public override void RenderText(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 The position to render the text. color ColorF The color of the text. text string The text to render. scale float The scale of the text. RenderTexture(Rect, TexturePath, ColorF) Renders a texture in the specified Region with a color tint. public override void RenderTexture(Rect region, TexturePath texture, ColorF tint) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. RenderTexture(Rect, TexturePath, ColorF, Rect) Renders a texture in the specified Region with a color tint and UV coordinates. public override void RenderTexture(Rect region, TexturePath texture, ColorF tint, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. tint ColorF The color tint. uv Rect The UV coordinates. RenderTexture(Rect, TexturePath, float) Renders a texture in the specified Region with optional opacity. public override void RenderTexture(Rect region, TexturePath texture, float opacity = 1) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. RenderTexture(Rect, TexturePath, float, Rect) Renders a texture in the specified Region with optional opacity and UV coordinates. public override void RenderTexture(Rect region, TexturePath texture, float opacity, Rect uv) Parameters region Rect The Region to render the texture in. texture TexturePath The texture texture. opacity float The opacity of the texture. uv Rect The UV coordinates. SetDefaultState(bool) Sets the default state of the renderer, optionally as the final state, and resets world render settings and lighting. public override void SetDefaultState(bool final) Parameters final bool Whether this is the final state. SetupLights(Entity, int) Sets up lighting for the specified entity. public virtual void SetupLights(Entity entity, int lightEmission = 0) Parameters entity Entity The entity to set up lighting for. lightEmission int The light emission value. SetupLights(BoundingBox, Vec3, int) Sets up lighting for the specified bounding box and center. public virtual void SetupLights(BoundingBox boundingBox, Vec3 center, int lightEmission = 0) Parameters boundingBox BoundingBox The bounding box. center Vec3 The center of the bounding box. lightEmission int The light emission value. SetupLights(BoundingBox, int) Sets up lighting for the specified bounding box. public virtual void SetupLights(BoundingBox boundingBox, int lightEmission = 0) Parameters boundingBox BoundingBox The bounding box. lightEmission int The light emission value."
  },
  "docs/OnixRuntime.Api.Rendering.TextAlignment.html": {
    "href": "docs/OnixRuntime.Api.Rendering.TextAlignment.html",
    "title": "Enum TextAlignment | Onix Plugin Documentation",
    "summary": "Enum TextAlignment Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Specifies text alignment options for rendering text. public enum TextAlignment Fields Bottom = 1 Align text to the bottom or right. Center = 2 Align text to the center. Left = 0 Align text to the left or top. Right = 1 Align text to the right or bottom. Top = 0 Align text to the top or left."
  },
  "docs/OnixRuntime.Api.Rendering.TexturePath.html": {
    "href": "docs/OnixRuntime.Api.Rendering.TexturePath.html",
    "title": "Class TexturePath | Onix Plugin Documentation",
    "summary": "Class TexturePath Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Represents a path to a texture resource, supporting various base locations and plugin asset resolution. public class TexturePath : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer TexturePath Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TexturePath(string, TexturePathBase) Initializes a new instance of the TexturePath class with the specified path and base type. public TexturePath(string path, TexturePathBase baseType) Parameters path string The texture path. baseType TexturePathBase The base location type. Fields ItemAtlas Gets the item atlas texture path. public static TexturePath ItemAtlas Field Value TexturePath TerrainAtlas Gets the terrain atlas texture path. public static TexturePath TerrainAtlas Field Value TexturePath Properties Base Gets the base type of this texture path. public TexturePathBase Base { get; } Property Value TexturePathBase Path Gets the resolved path string for this texture path. public string Path { get; } Property Value string Methods Assets(string) Creates a TexturePath with the Assets base, resolved for the calling plugin. public static TexturePath Assets(string path) Parameters path string The texture path. Returns TexturePath A TexturePath instance. Game(string) Creates a TexturePath with the Game base. public static TexturePath Game(string path) Parameters path string The texture path. Returns TexturePath A TexturePath instance. GetHashCode() Returns the hash code for this texture path. public override int GetHashCode() Returns int The hash code. PersistentData(string) Creates a TexturePath with the PersistentData base, resolved for the calling plugin. public static TexturePath PersistentData(string path) Parameters path string The texture path. Returns TexturePath A TexturePath instance. Raw(string) Creates a TexturePath with the Raw base. public static TexturePath Raw(string path) Parameters path string The texture path. Returns TexturePath A TexturePath instance. ToString() Returns a string representation of the texture path. public override string ToString() Returns string A string containing the base and path. Url(string) Creates a texture path from a URL. The image will be downloaded and uploaded for you. In the event that the image cannot be downloaded, it will render a red square. You may unload the texture using UnloadTexture(TexturePath) which will retry next time. What will happen if the texture is rendered before GetTextureStatus(TexturePath) tells you Loaded can be anything from pink, missing texture. public static TexturePath Url(string url) Parameters url string The url to download Returns TexturePath The texture path for that texture to use in gfx. Url(string, Dictionary<string, string>) Creates a texture path from a URL. The image will be downloaded and uploaded for you. In the event that the image cannot be downloaded, it will render a red square. You may unload the texture using UnloadTexture(TexturePath) which will retry next time. What will happen if the texture is rendered before GetTextureStatus(TexturePath) tells you Loaded can be anything from pink, missing texture. public static TexturePath Url(string url, Dictionary<string, string> headers) Parameters url string The url to download headers Dictionary<string, string> The headers to use when downloading the image. Returns TexturePath The texture path for that texture to use in gfx."
  },
  "docs/OnixRuntime.Api.Rendering.TexturePathBase.html": {
    "href": "docs/OnixRuntime.Api.Rendering.TexturePathBase.html",
    "title": "Enum TexturePathBase | Onix Plugin Documentation",
    "summary": "Enum TexturePathBase Namespace OnixRuntime.Api.Rendering Assembly OnixRuntime.dll Specifies the base location for a texture path. public enum TexturePathBase Fields Assets = 2 Assets directory. Game = 0 Game root directory. ItemAtlas = 5 Item atlas. PersistentData = 3 Persistent data directory. Raw = 1 Raw file path. TerrainAtlas = 4 Terrain atlas. Url = 6 From an url."
  },
  "docs/OnixRuntime.Api.Rendering.html": {
    "href": "docs/OnixRuntime.Api.Rendering.html",
    "title": "Namespace OnixRuntime.Api.Rendering | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Rendering Classes GameMesh GameMeshBuilder Provides methods to build and render meshes at runtime. RenderContexes Provides access to various rendering contexts and utilities. RendererCommon Provides common rendering methods for 2D and 3D drawing operations. RendererDirect2D Provides rendering functionality for Direct2D contexts. RendererGame Provides rendering functionality for game contexts, supporting 2D and mesh-based drawing. RendererTwoDimentional Provides 2D rendering functionality, including clipping and render offset utilities. RendererWorld Provides rendering functionality for 3D world contexts, including mesh, item, and lighting operations. TexturePath Represents a path to a texture resource, supporting various base locations and plugin asset resolution. Structs GameMeshBuilder.GameMeshBuilderSession Represents a session for building a mesh, automatically rendering on dispose. MeshBuilderVertex Represents a vertex in the GameMeshBuilder. MeshBuilderVertexColor Represents a colored vertex in the GameMeshBuilder. MeshBuilderVertexColorNormal Represents a colored vertex with a normal in the GameMeshBuilder. MeshBuilderVertexColorUv Represents a colored vertex with UV coordinates in the GameMeshBuilder. MeshBuilderVertexColorUvNormal Represents a colored vertex with UV coordinates and a normal in the GameMeshBuilder. MeshBuilderVertexNormal Represents a vertex with a normal in the GameMeshBuilder. MeshBuilderVertexUv Represents a vertex with UV coordinates in the GameMeshBuilder. MeshBuilderVertexUvNormal Represents a vertex with UV coordinates and a normal in the GameMeshBuilder. RendererCommon.OpacityPopper Helper struct for managing opacity stack with automatic pop on dispose. RendererCommon.TransformationPopper Helper struct for managing transformation stack with automatic pop on dispose. RendererTwoDimentional.ClippingRectanglePopper Helper struct for managing the clipping rectangle stack with automatic pop on dispose. RendererWorld.WorldRenderSettingsPopper Helper struct for managing world render settings with automatic pop on dispose. RendererWorld.WorldUIRenderSettingsPopper Helper struct for managing world UI render settings and transformation stack with automatic pop on dispose. Interfaces IGameRenderer Provides methods for rendering game items and meshes. Enums FontType The type of the font. FontUsage What scenario is the font used for? MeshBuilderPrimitiveType Specifies the primitive type for mesh building. RendererTextureStatus Represents the status of a renderer texture. TextAlignment Specifies text alignment options for rendering text. TexturePathBase Specifies the base location for a texture path."
  },
  "docs/OnixRuntime.Api.ResourcePacks.Pack.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.Pack.html",
    "title": "Class Pack | Onix Plugin Documentation",
    "summary": "Class Pack Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A pack. This is a pack that the user can choose to load. It has a manifest and is likely a main pack. It should always have a manifest so it is non-nullable. public class Pack : PackBase Inheritance object MemoryAddressContainer PackBase Pack Inherited Members PackBase.AssetLoader PackBase.SubPacks object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IconTexture The TexturePath of the pack icon. This let's you render the icon of the pack. public TexturePath IconTexture { get; } Property Value TexturePath Manifest The pack manifest for this pack. This is the main manifest for the pack. public PackManifest Manifest { get; } Property Value PackManifest"
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackAssetLoader.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackAssetLoader.html",
    "title": "Class PackAssetLoader | Onix Plugin Documentation",
    "summary": "Class PackAssetLoader Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A class used to load files from packs. public class PackAssetLoader : MemoryAddressContainer Inheritance object MemoryAddressContainer PackAssetLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetContent(string, bool) Gets the content of the file at that path. This will return null if the file does not exist or was not trusted. This variant returns an empty byte array when the file does not exist. public byte[] GetContent(string filePath, bool trustedContentOnly = false) Parameters filePath string The file path of the file to get. trustedContentOnly bool If only trusted content should be read. Returns byte[] Returns the content or null if it could not be read from. GetContentOrNull(string, bool) Gets the content of the file at that path. This will return null if the file does not exist or was not trusted. This variant returns null when it cannot load the file that way you can check if the file was read but empty or just not found. public byte[]? GetContentOrNull(string filePath, bool trustedContentOnly = false) Parameters filePath string The file path of the file to get. trustedContentOnly bool If only trusted content should be read. Returns byte[] Returns the content or null if it could not be read from. GetPathList(string, bool) Gets a list of paths in the pack. This will return an empty array if the path does not exist or is not a directory. Note that internally, this will ALWAYS recurse. The difference is that the output will be filtered. So if you plan on recursing, you should not go folder by folder and manually do it. public string[] GetPathList(string filePath, bool recurse = false) Parameters filePath string The folder to get the files/directories in. recurse bool If it should recurse through all the directories. Returns string[] HasDirectory(string) Checks if there is a directory at this path. public bool HasDirectory(string directoryPath) Parameters directoryPath string The path to check for a directory. Returns bool Returns true if the path is a valid directory. HasFile(string, bool) Checks if there is a file at this path. public bool HasFile(string filePath, bool trustedContentOnly = false) Parameters filePath string The path of the file to check. trustedContentOnly bool If only trusted content should be read. Returns bool Returns true if there is a file at this path, could return false if the content is not trusted and trustedContentOnly is true."
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackBase.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackBase.html",
    "title": "Class PackBase | Onix Plugin Documentation",
    "summary": "Class PackBase Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll The base of a pack. This is the base class for Pack and SubPack. The difference is one has a nullable manifest. public class PackBase : MemoryAddressContainer Inheritance object MemoryAddressContainer PackBase Derived Pack SubPack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AssetLoader The asset loader for the base pack. This is used to load files from the pack. public PackAssetLoader AssetLoader { get; } Property Value PackAssetLoader SubPacks A list information about the sub packs in this pack. public IReadOnlyList<SubPackInfo> SubPacks { get; } Property Value IReadOnlyList<SubPackInfo>"
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackCategory.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackCategory.html",
    "title": "Enum PackCategory | Onix Plugin Documentation",
    "summary": "Enum PackCategory Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll Categories for packs, not too useful. public enum PackCategory Fields Custom = 4 Premium = 2 RealmsUnknown = 5 Standard = 1 SubPack = 3 Unknown = 0"
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackInstance.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackInstance.html",
    "title": "Class PackInstance | Onix Plugin Documentation",
    "summary": "Class PackInstance Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll An instance of a pack. This could be a specific sub pack or different settings. public class PackInstance : MemoryAddressContainer Inheritance object MemoryAddressContainer PackInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsSubPack If the pack instance is a sub pack, this will be true. If it is not a sub pack, this will be false. public bool IsSubPack { get; } Property Value bool MainAssetLoader The pack instance's main asset loader, this is the asset loader for the pack itself. public PackAssetLoader MainAssetLoader { get; } Property Value PackAssetLoader Manifest The pack instance's pack manifest. This is the manifest of the pack itself, not the sub packs. Same as ResourcePack.Manifest; public PackManifest Manifest { get; } Property Value PackManifest ResourcePack The resource pack it is an instance of. public ResourcePack ResourcePack { get; } Property Value ResourcePack SelectedSubPackInfo The information of the currently selected sub pack. This will be null if the pack instance is not a sub pack. public SubPackInfo? SelectedSubPackInfo { get; } Property Value SubPackInfo SubPackAssetLoader The pack instance's current sub pack asset loader OR the asset loader pack. public PackAssetLoader SubPackAssetLoader { get; } Property Value PackAssetLoader SubPackIndex The sub pack index of the pack instance. This is -1 if the pack instance is not a sub pack. public int SubPackIndex { get; } Property Value int"
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackManager.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackManager.html",
    "title": "Class PackManager | Onix Plugin Documentation",
    "summary": "Class PackManager Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A class used to load files from packs or get information about active packs. public class PackManager : MemoryAddressContainer Inheritance object MemoryAddressContainer PackManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AddonStack The addon stack. This includes just the addons. public PackStack AddonStack { get; } Property Value PackStack AllKnownResourcePacks Gets a list of all the resource packs the client knows about. public ResourcePack[] AllKnownResourcePacks { get; } Property Value ResourcePack[] BaseGameStack The base game stack, for packs that are loaded in the base game, mainly vanilla packs. public PackStack BaseGameStack { get; } Property Value PackStack FullStack The combined stack for all the other stacks. public PackStack FullStack { get; } Property Value PackStack GlobalStack Global packs, for packs that are selected in the game's settings. public PackStack GlobalStack { get; } Property Value PackStack TreatmentStack The treatment stack, for packs that are loaded in remotely to fix small things or change the marketplace button, things like that. public PackStack TreatmentStack { get; } Property Value PackStack UsesGlobalStack If the global stack is ignored or not. public bool UsesGlobalStack { get; } Property Value bool WorldStack The world stack, for packs that are loaded in the world. public PackStack WorldStack { get; } Property Value PackStack Methods LoadContent(TexturePath) Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs. public byte[] LoadContent(TexturePath path) Parameters path TexturePath The location of that file. Returns byte[] The content of the file or an empty byte array. LoadContent(TexturePath, string[]) Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs. public byte[] LoadContent(TexturePath path, string[] extensions) Parameters path TexturePath The location of that file. extensions string[] The list of extensions this file could be. Returns byte[] The content of the file or an empty byte array. LoadContentOrNull(TexturePath) Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs. public byte[]? LoadContentOrNull(TexturePath path) Parameters path TexturePath The location of that file. Returns byte[] The content of the file or null. LoadContentOrNull(TexturePath, string[]) Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs. public byte[]? LoadContentOrNull(TexturePath path, string[] extensions) Parameters path TexturePath The location of that file. extensions string[] The list of extensions this file could be. Returns byte[] The content of the file or null."
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackManifest.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackManifest.html",
    "title": "Class PackManifest | Onix Plugin Documentation",
    "summary": "Class PackManifest Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll Information in the pock's manifest.json. public class PackManifest : MemoryAddressContainer Inheritance object MemoryAddressContainer PackManifest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Category The category of the pack. This is not too useful but enjoy. public PackCategory Category { get; } Property Value PackCategory Description The description of the pack, translated if needed. public string Description { get; } Property Value string IsHidden If the pack should be hidden or not. public bool IsHidden { get; } Property Value bool Name The name of the pack, translated if needed. public string Name { get; } Property Value string Origin Where the pack comes from. public PackOrigin Origin { get; } Property Value PackOrigin Path The path to the pack's file/directory. public string Path { get; } Property Value string RawDescription The raw description, not translated, you could just get \"pack.description\" public string RawDescription { get; } Property Value string RawName The raw name, not translated, you could just get \"pack.name\" public string RawName { get; } Property Value string SizeInBytes The size in bytes of the pack. public ulong SizeInBytes { get; } Property Value ulong Type The type of pack this is. public PackType Type { get; } Property Value PackType Uuid The UUID of the pack. public string Uuid { get; } Property Value string Version The pack's version. public PluginSemVersion Version { get; } Property Value PluginSemVersion"
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackOrigin.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackOrigin.html",
    "title": "Enum PackOrigin | Onix Plugin Documentation",
    "summary": "Enum PackOrigin Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll Where the pack comes from. public enum PackOrigin Fields Dev = 3 In one of the development subfolders of the com.mojang directory. Package = 1 Where the game's exe is installed. PremiumCache = 8 PremiumTempCache = 6 RealmsUnknown = 9 TempCache = 7 Treatment = 5 It's a treatment pack. Unknown = 0 User = 2 In the com.mojang directory. World = 4 In the world's data."
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackStack.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackStack.html",
    "title": "Class PackStack | Onix Plugin Documentation",
    "summary": "Class PackStack Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A stack of resource packs. This is used to represent the order of packs. public class PackStack : IEnumerable<PackInstance>, IEnumerable Inheritance object PackStack Implements IEnumerable<PackInstance> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PackStack(IReadOnlyList<PackInstance>) Creates a new pack stack, not sure why you would do that yourself but have fun. public PackStack(IReadOnlyList<PackInstance> packs) Parameters packs IReadOnlyList<PackInstance> Fields Packs The list of packs in this stack. public IReadOnlyList<PackInstance> Packs Field Value IReadOnlyList<PackInstance> Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<PackInstance> GetEnumerator() Returns IEnumerator<PackInstance> An enumerator that can be used to iterate through the collection."
  },
  "docs/OnixRuntime.Api.ResourcePacks.PackType.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.PackType.html",
    "title": "Enum PackType | Onix Plugin Documentation",
    "summary": "Enum PackType Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll Types of packs. public enum PackType Fields Addon = 5 Behavior = 2 Your average behavior pack. Cached = 3 CopyProtected = 7 Invalid = 0 PersonaPiece = 8 Resources = 1 Your average texture pack. Skins = 4 WorldTemplate = 6"
  },
  "docs/OnixRuntime.Api.ResourcePacks.ResourcePack.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.ResourcePack.html",
    "title": "Class ResourcePack | Onix Plugin Documentation",
    "summary": "Class ResourcePack Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A resource pack, contains a pack and sub packs. public class ResourcePack : ResourcePackBase Inheritance object MemoryAddressContainer ResourcePackBase ResourcePack Inherited Members ResourcePackBase.IsHidden ResourcePackBase.HasError ResourcePackBase.SubPacks ResourcePackBase.SubResourcePacks ResourcePackBase.GetAssetLoader(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Manifest The pack's manifest. This is the manifest of the pack itself, not the sub packs. Same as Pack.Manifest; public PackManifest Manifest { get; } Property Value PackManifest Pack The actual pack in that resource pack. As a Pack, which means it should have a manifest. public Pack Pack { get; } Property Value Pack"
  },
  "docs/OnixRuntime.Api.ResourcePacks.ResourcePackBase.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.ResourcePackBase.html",
    "title": "Class ResourcePackBase | Onix Plugin Documentation",
    "summary": "Class ResourcePackBase Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll The base of a resource pack. This is the base class for ResourcePack and SubResourcePack. The difference is one has a manifest. public class ResourcePackBase : MemoryAddressContainer Inheritance object MemoryAddressContainer ResourcePackBase Derived ResourcePack SubResourcePack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasError If there was an error in this pack. public bool HasError { get; } Property Value bool IsHidden If the resource pack should be hidden in the UI. public bool IsHidden { get; } Property Value bool SubPacks A list of sub packs in this resource pack. public SubPack[] SubPacks { get; } Property Value SubPack[] SubResourcePacks A list of sub resource packs in this resource pack. public SubResourcePack[] SubResourcePacks { get; } Property Value SubResourcePack[] Methods GetAssetLoader(int) Gets the pack's asset loader for the desired sub pack index. -1 is the main pack. public PackAssetLoader GetAssetLoader(int subPackIndex = -1) Parameters subPackIndex int The index of the sub pack or -1. Returns PackAssetLoader The pack's asset loader."
  },
  "docs/OnixRuntime.Api.ResourcePacks.SubPack.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.SubPack.html",
    "title": "Class SubPack | Onix Plugin Documentation",
    "summary": "Class SubPack Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A sub pack. This is a pack inside another pack. The user can choose amongst all the sub packs in a pack. It has a nullable manifest and likely will always be null. public class SubPack : PackBase Inheritance object MemoryAddressContainer PackBase SubPack Inherited Members PackBase.AssetLoader PackBase.SubPacks object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Manifest The pack manifest will likely be null for sub packs, that's why this is nullable in this version of the struct. public PackManifest? Manifest { get; } Property Value PackManifest"
  },
  "docs/OnixRuntime.Api.ResourcePacks.SubPackInfo.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.SubPackInfo.html",
    "title": "Class SubPackInfo | Onix Plugin Documentation",
    "summary": "Class SubPackInfo Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll Class representing information about a sub pack. public class SubPackInfo Inheritance object SubPackInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubPackInfo(string, string, int) Creates a new SubPackInfo object, not too useful for you. public SubPackInfo(string directory, string name, int memoryTier) Parameters directory string The directory of the sub pack. name string The display name of the sub pack memoryTier int The memory tier of that sub pack. Properties Directory The subdirectory of the pack that the sub pack is in. public string Directory { get; } Property Value string MemoryTier The memory tier of the sub pack, not sure what this changes but oh well it's there, enjoy. public int MemoryTier { get; } Property Value int Name The display name of the sub pack. public string Name { get; } Property Value string"
  },
  "docs/OnixRuntime.Api.ResourcePacks.SubResourcePack.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.SubResourcePack.html",
    "title": "Class SubResourcePack | Onix Plugin Documentation",
    "summary": "Class SubResourcePack Namespace OnixRuntime.Api.ResourcePacks Assembly OnixRuntime.dll A resource pack, contains a pack and sub packs, is likely from a sub pack itself. public class SubResourcePack : ResourcePackBase Inheritance object MemoryAddressContainer ResourcePackBase SubResourcePack Inherited Members ResourcePackBase.IsHidden ResourcePackBase.HasError ResourcePackBase.SubPacks ResourcePackBase.SubResourcePacks ResourcePackBase.GetAssetLoader(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Manifest The pack's manifest. This is the manifest of the sub pack. It will very likely be null. Same as Pack.Manifest; public PackManifest? Manifest { get; } Property Value PackManifest Pack The actual pack in that resource pack. As a SubPac, which means it likely won't have a manifest. public SubPack Pack { get; } Property Value SubPack"
  },
  "docs/OnixRuntime.Api.ResourcePacks.html": {
    "href": "docs/OnixRuntime.Api.ResourcePacks.html",
    "title": "Namespace OnixRuntime.Api.ResourcePacks | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.ResourcePacks Classes Pack A pack. This is a pack that the user can choose to load. It has a manifest and is likely a main pack. It should always have a manifest so it is non-nullable. PackAssetLoader A class used to load files from packs. PackBase The base of a pack. This is the base class for Pack and SubPack. The difference is one has a nullable manifest. PackInstance An instance of a pack. This could be a specific sub pack or different settings. PackManager A class used to load files from packs or get information about active packs. PackManifest Information in the pock's manifest.json. PackStack A stack of resource packs. This is used to represent the order of packs. ResourcePack A resource pack, contains a pack and sub packs. ResourcePackBase The base of a resource pack. This is the base class for ResourcePack and SubResourcePack. The difference is one has a manifest. SubPack A sub pack. This is a pack inside another pack. The user can choose amongst all the sub packs in a pack. It has a nullable manifest and likely will always be null. SubPackInfo Class representing information about a sub pack. SubResourcePack A resource pack, contains a pack and sub packs, is likely from a sub pack itself. Enums PackCategory Categories for packs, not too useful. PackOrigin Where the pack comes from. PackType Types of packs."
  },
  "docs/OnixRuntime.Api.UI.ChatMessage.html": {
    "href": "docs/OnixRuntime.Api.UI.ChatMessage.html",
    "title": "Class ChatMessage | Onix Plugin Documentation",
    "summary": "Class ChatMessage Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents a chat message instance that can be displayed to the user. public class ChatMessage : MemoryAddressContainer Inheritance object MemoryAddressContainer ChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComputedMessage The final, computed version of the message, after any formatting or localization. public string ComputedMessage { get; set; } Property Value string Message The original raw message content. public string Message { get; set; } Property Value string ScreenTime The amount of time, in seconds, the message stays visible on screen. public float ScreenTime { get; set; } Property Value float TTSMessage The version of the message that should be read aloud by text-to-speech systems. public string TTSMessage { get; set; } Property Value string Type The type of chat message being displayed. public ChatMessageType Type { get; } Property Value ChatMessageType Username The name of the user associated with this message, if applicable. public string Username { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.UI.ChatMessageType.html": {
    "href": "docs/OnixRuntime.Api.UI.ChatMessageType.html",
    "title": "Enum ChatMessageType | Onix Plugin Documentation",
    "summary": "Enum ChatMessageType Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents the various types of chat messages that can be sent to the client. public enum ChatMessageType Fields Announcement = 8 Bold announcement message (e.g., join/leave alerts). Chat = 1 Standard chat message. JukeboxPopup = 4 Jukebox popup, shown when music is playing. Popup = 3 Popup message shown in the center of the screen. Raw = 0 Raw, unformatted text. SystemMessage = 6 System message (e.g., server events). TextObject = 9 Formatted text object. Tip = 5 Tip message shown on the screen. Translate = 2 Translatable message using localization keys. Whisper = 7 Whisper message (e.g., private messages)."
  },
  "docs/OnixRuntime.Api.UI.ChatScreen.CompletionOption.html": {
    "href": "docs/OnixRuntime.Api.UI.ChatScreen.CompletionOption.html",
    "title": "Class ChatScreen.CompletionOption | Onix Plugin Documentation",
    "summary": "Class ChatScreen.CompletionOption Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents an option for chat completion, which may include text and an optional item. public class ChatScreen.CompletionOption Inheritance object ChatScreen.CompletionOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompletionOption(string) Initializes a new instance of the ChatScreen.CompletionOption class with the specified text. public CompletionOption(string text) Parameters text string The display text. CompletionOption(string, ItemStack?) Initializes a new instance of the ChatScreen.CompletionOption class with the specified text and item. public CompletionOption(string text, ItemStack? item) Parameters text string The display text. item ItemStack The optional item. Fields Item The optional item associated with this completion option. public ItemStack? Item Field Value ItemStack Text The display text for the completion option. public string Text Field Value string Properties HasItem Indicates whether this completion option has a valid item. public bool HasItem { get; } Property Value bool"
  },
  "docs/OnixRuntime.Api.UI.ChatScreen.html": {
    "href": "docs/OnixRuntime.Api.UI.ChatScreen.html",
    "title": "Class ChatScreen | Onix Plugin Documentation",
    "summary": "Class ChatScreen Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents the chat screen UI and provides methods and properties to interact with chat functionality. public class ChatScreen : MemoryAddressContainer Inheritance object MemoryAddressContainer ChatScreen Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoCompleteLines Gets the number of auto-complete lines available. public int AutoCompleteLines { get; } Property Value int CompletionOptions Gets or sets the list of completion options shown after intellisense messages. public List<ChatScreen.CompletionOption> CompletionOptions { get; set; } Property Value List<ChatScreen.CompletionOption> CurrentlySelectedCSharpCommand public string CurrentlySelectedCSharpCommand { get; } Property Value string IntellisenseMessages Gets or sets the list of intellisense messages shown at the bottom of the chat. public List<string> IntellisenseMessages { get; set; } Property Value List<string> IsKeyboardActive Gets a value indicating whether the keyboard is currently active in the chat screen. public bool IsKeyboardActive { get; } Property Value bool LastTabCompleteIndex Gets the index of the last tab-completed option. public int LastTabCompleteIndex { get; } Property Value int LastTabCompleteMessage Gets the last message that was tab-completed in the chat. public string LastTabCompleteMessage { get; } Property Value string RefreshChatMessages Gets or sets a value indicating whether the chat messages should be refreshed. public bool RefreshChatMessages { get; set; } Property Value bool SendMessage Gets or sets a value indicating whether to send the current chat message. public bool SendMessage { get; set; } Property Value bool Text Gets or sets the current chat message text. public string Text { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Api.UI.ContainerScreen.html": {
    "href": "docs/OnixRuntime.Api.UI.ContainerScreen.html",
    "title": "Class ContainerScreen | Onix Plugin Documentation",
    "summary": "Class ContainerScreen Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents a UI screen for interacting with containers such as chests or inventories. public class ContainerScreen : MemoryAddressContainer Inheritance object MemoryAddressContainer ContainerScreen Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContainerScreen(nint) Initializes a new instance of the ContainerScreen class. public ContainerScreen(nint currentMemoryAddress) Parameters currentMemoryAddress nint The memory address of the container screen. Properties BlockPos Gets the block position associated with this container, if any. public BlockPos BlockPos { get; } Property Value BlockPos Entity Gets the entity associated with this container, if any. public Entity? Entity { get; } Property Value Entity EntityId Gets the entity ID associated with this container, if any. public ulong EntityId { get; } Property Value ulong HoveredContainer Gets the name of the currently hovered container. public string HoveredContainer { get; } Property Value string HoveredSlot Gets the slot index currently hovered by the user. public int HoveredSlot { get; } Property Value int HoveringItem Will be true when the player is hovering over an item, not a slot in the container screen. public bool HoveringItem { get; } Property Value bool InventoryLayout Which tab of the inventory is selected. public InventoryLayout InventoryLayout { get; set; } Property Value InventoryLayout Type Gets the type of this container screen. public ContainerScreenType Type { get; } Property Value ContainerScreenType Methods AutoPlace(string, int) Automatically places as many items as possible into the specified slot in the container. public void AutoPlace(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. AutoPlace(string, int, int) Automatically places a specified quantity of items into the specified slot in the container. public void AutoPlace(string containerName, int slot, int quantity) Parameters containerName string The container name. slot int The slot index. quantity int The quantity to place. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Close() Closes the container screen. public void Close() DropAll(string, int) Drops all items from the specified slot in the container. public void DropAll(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. DropOne(string, int) Drops one item from the specified slot in the container. public void DropOne(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetItem(string, int) Gets the item in the specified container and slot. public ItemStack GetItem(string containerName, int slot) Parameters containerName string The name of the container. slot int The slot index. Returns ItemStack The ItemStack in the specified slot. PlaceAll(string, int) Places all items into the specified slot in the container. public void PlaceAll(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. PlaceOne(string, int) Places one item into the specified slot in the container. public void PlaceOne(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SendFlyingItem(ItemStack, string, int, string, int) Sends a flying item animation from a source to a target container and slot. public void SendFlyingItem(ItemStack stack, string sourceContainerName, int sourceSlot, string targetContainerName, int targetSlot) Parameters stack ItemStack The item stack to animate. sourceContainerName string The source container name. sourceSlot int The source slot index. targetContainerName string The target container name. targetSlot int The target slot index. SendFlyingItem(string, int, string, int) Sends a flying item animation from a source to a target container and slot, automatically retrieving the item from the source. public void SendFlyingItem(string sourceContainerName, int sourceSlot, string targetContainerName, int targetSlot) Parameters sourceContainerName string The source container name. sourceSlot int The source slot index. targetContainerName string The target container name. targetSlot int The target slot index. TakeAll(string, int) Takes all items from the specified slot in the container. public void TakeAll(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. TakeHalf(string, int) Takes half of the items from the specified slot in the container. public void TakeHalf(string containerName, int slot) Parameters containerName string The container name. slot int The slot index. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this."
  },
  "docs/OnixRuntime.Api.UI.ContainerScreenType.html": {
    "href": "docs/OnixRuntime.Api.UI.ContainerScreenType.html",
    "title": "Enum ContainerScreenType | Onix Plugin Documentation",
    "summary": "Enum ContainerScreenType Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Specifies the type of container screen. public enum ContainerScreenType Fields Block = 1 The container is associated with a block. Entity = 2 The container is associated with an entity."
  },
  "docs/OnixRuntime.Api.UI.GameGuiInfo.html": {
    "href": "docs/OnixRuntime.Api.UI.GameGuiInfo.html",
    "title": "Class GameGuiInfo | Onix Plugin Documentation",
    "summary": "Class GameGuiInfo Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Provides information and control over the game GUI, including screen, mouse, and chat. public class GameGuiInfo : MemoryAddressContainer Inheritance object MemoryAddressContainer GameGuiInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChatMessages Gets the array of chat messages currently displayed. public ChatMessage[] ChatMessages { get; } Property Value ChatMessage[] GuiScale Gets or sets the GUI scale factor. public float GuiScale { get; set; } Property Value float GuiScaleInverse Gets the inverse of the GUI scale factor. public float GuiScaleInverse { get; } Property Value float MouseGrabbed True when the mouse moves around the camera in the world. There is no cursor visible. False when in a UI screen, the cursor is visible and the mouse moves the cursor, not the in game camera. public bool MouseGrabbed { get; set; } Property Value bool MousePosition Gets the mouse position in GUI coordinates. public Vec2 MousePosition { get; } Property Value Vec2 RawMousePosition Gets the raw mouse position in pixels. public Vec2 RawMousePosition { get; } Property Value Vec2 RawScreenSize Gets the raw size of the screen in pixels. public Vec2 RawScreenSize { get; } Property Value Vec2 RootUiElement Gets the current screen's root UI element. This does not work outside a world as of right now. public GameUIElement? RootUiElement { get; } Property Value GameUIElement ScreenName Gets the name of the current screen. public string ScreenName { get; } Property Value string ScreenSafeArea Gets the rectangle representing the safe area of the screen, this uses the game's safe area setting. public Rect ScreenSafeArea { get; } Property Value Rect ScreenSize Gets the size of the screen in GUI coordinates. public Vec2 ScreenSize { get; } Property Value Vec2 TitleTimes Gets or sets the timing information for game titles. public GameTitleTimes TitleTimes { get; set; } Property Value GameTitleTimes Methods ClearChatMessages() WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this public void ClearChatMessages() ClearTitle() Clears the title text. public void ClearTitle() CloseCurrentScreen() Closes the current screen, this will not any important screens, so you can abuse this and not worry about it. public void CloseCurrentScreen() RemoveChatMessage(int) WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this public void RemoveChatMessage(int index) Parameters index int The 0 based index of the message to remove ScheduleScreenRelayout() Schedules the screen relayout, this will force positions of every element to be updated again. Useful when you change the position of game ui elements and want to restore it. public void ScheduleScreenRelayout() SetActionbarText(string) Sets the actionbar text. public void SetActionbarText(string text) Parameters text string The text to display. SetSubTitleText(string) Sets the subtitle text. public void SetSubTitleText(string text) Parameters text string The text to display. SetTitleText(string) Sets the main title text. public void SetTitleText(string text) Parameters text string The text to display. SetTitleText(string, GameTitleType) Sets the title text with the specified type. public void SetTitleText(string text, GameTitleType type) Parameters text string The text to display. type GameTitleType The type of title."
  },
  "docs/OnixRuntime.Api.UI.GameTitleTimes.html": {
    "href": "docs/OnixRuntime.Api.UI.GameTitleTimes.html",
    "title": "Class GameTitleTimes | Onix Plugin Documentation",
    "summary": "Class GameTitleTimes Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represents the timing information for game titles, including fade in, duration, and fade out. public class GameTitleTimes Inheritance object GameTitleTimes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration Gets the duration the title is displayed. public TimeSpan Duration { get; init; } Property Value TimeSpan FadeIn Gets the fade-in duration for the title. public TimeSpan FadeIn { get; init; } Property Value TimeSpan FadeOut Gets the fade-out duration for the title. public TimeSpan FadeOut { get; init; } Property Value TimeSpan"
  },
  "docs/OnixRuntime.Api.UI.GameUIElement.html": {
    "href": "docs/OnixRuntime.Api.UI.GameUIElement.html",
    "title": "Class GameUIElement | Onix Plugin Documentation",
    "summary": "Class GameUIElement Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll Represent a UI element in the game, which you just lost... lost? public class GameUIElement : MemoryAddressContainer Inheritance object MemoryAddressContainer GameUIElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children All the sub-elements of this element. public GameUIElement[] Children { get; } Property Value GameUIElement[] JsonProperties Arbitrary properties the game can decide to set. If you do set these you might just crash the game, I'm not too sure how well that works. public string JsonProperties { get; set; } Property Value string MaxSize The maximum size of the UI element. public Vec2 MaxSize { get; } Property Value Vec2 MinSize The minimum size of the UI element. public Vec2 MinSize { get; } Property Value Vec2 Name The name of the UI element. public string Name { get; } Property Value string Parent The parent element of this element. public GameUIElement? Parent { get; } Property Value GameUIElement Position The position relative to the parent element. public Vec2 Position { get; set; } Property Value Vec2 RawPosition The position relative to the current screen. public Vec2 RawPosition { get; } Property Value Vec2 RawRect The position and size of the ui element relative to the current screen. public Rect RawRect { get; } Property Value Rect Rect The position and size of the ui element relative to its parent. public Rect Rect { get; } Property Value Rect Size The size of the UI element. public Vec2 Size { get; } Property Value Vec2 Methods FindChildRecursive(string) Finds a child element by name recursively (aka it checks every children's children's children's children's children's children's children's children's children's children's children's children children's children's children children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's childr... public GameUIElement? FindChildRecursive(string name) Parameters name string The name of the element to find Returns GameUIElement"
  },
  "docs/OnixRuntime.Api.UI.InventoryLayout.html": {
    "href": "docs/OnixRuntime.Api.UI.InventoryLayout.html",
    "title": "Enum InventoryLayout | Onix Plugin Documentation",
    "summary": "Enum InventoryLayout Namespace OnixRuntime.Api.UI Assembly OnixRuntime.dll The layout of the inventory screen. public enum InventoryLayout Fields Creative = 3 The creative inventory layout, the one with the open book icon. It has the creative menu in full screen. None = 0 Not sure when you're going to get this. RecipeBook = 2 The recipe book layout, the one with the closed book and chest icon. It has the inventory on the right and the recipe book on the left. Survival = 1 The survival inventory layout, the one with the chest icon. It has only the inventory and nothing else. UnknownNotRelevantToThisScreen = 4 This screen does not have an inventory layout that applies to it."
  },
  "docs/OnixRuntime.Api.UI.html": {
    "href": "docs/OnixRuntime.Api.UI.html",
    "title": "Namespace OnixRuntime.Api.UI | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.UI Classes ChatMessage Represents a chat message instance that can be displayed to the user. ChatScreen Represents the chat screen UI and provides methods and properties to interact with chat functionality. ChatScreen.CompletionOption Represents an option for chat completion, which may include text and an optional item. ContainerScreen Represents a UI screen for interacting with containers such as chests or inventories. GameGuiInfo Provides information and control over the game GUI, including screen, mouse, and chat. GameTitleTimes Represents the timing information for game titles, including fade in, duration, and fade out. GameUIElement Represent a UI element in the game, which you just lost... lost? Enums ChatMessageType Represents the various types of chat messages that can be sent to the client. ContainerScreenType Specifies the type of container screen. InventoryLayout The layout of the inventory screen."
  },
  "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup.html": {
    "href": "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup.html",
    "title": "Class VersionTranslationLayerLookup | Onix Plugin Documentation",
    "summary": "Class VersionTranslationLayerLookup Namespace OnixRuntime.Api.Utils.ClientTranslationLayers Assembly OnixRuntime.dll Provides lookup functionality for version translation layers. public class VersionTranslationLayerLookup Inheritance object VersionTranslationLayerLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionTranslationLayerLookup(Dictionary<string, string>) Initializes a new instance of the VersionTranslationLayerLookup class. public VersionTranslationLayerLookup(Dictionary<string, string> lookup) Parameters lookup Dictionary<string, string> The dictionary containing key translations. Methods Add(string, string) Adds a key-value translation to the lookup. public void Add(string key, string value) Parameters key string The key to add. value string The value to associate with the key. Translate(string) Translates a key using the lookup table. public string Translate(string key) Parameters key string The key to translate. Returns string The translated key, or the original key if no translation exists."
  },
  "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.html": {
    "href": "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.html",
    "title": "Struct VersionTranslationLayerLookupBuilder.Data | Onix Plugin Documentation",
    "summary": "Struct VersionTranslationLayerLookupBuilder.Data Namespace OnixRuntime.Api.Utils.ClientTranslationLayers Assembly OnixRuntime.dll Represents a key-version pair for translation. public struct VersionTranslationLayerLookupBuilder.Data Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Data(string, PluginSemVersion) Represents a key-version pair for translation. public Data(string key, PluginSemVersion version) Parameters key string The key to be translated. version PluginSemVersion The version associated with the key. Fields Key public string Key Field Value string Version public PluginSemVersion Version Field Value PluginSemVersion Methods ToString() Returns a string representation of the Data struct. public override string ToString() Returns string A string containing the key and version."
  },
  "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder.html": {
    "href": "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder.html",
    "title": "Class VersionTranslationLayerLookupBuilder.DataBuilder | Onix Plugin Documentation",
    "summary": "Class VersionTranslationLayerLookupBuilder.DataBuilder Namespace OnixRuntime.Api.Utils.ClientTranslationLayers Assembly OnixRuntime.dll Builder for constructing a list of Data entries. public class VersionTranslationLayerLookupBuilder.DataBuilder Inheritance object VersionTranslationLayerLookupBuilder.DataBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(string, PluginSemVersion) Adds a key-version pair to the builder. public VersionTranslationLayerLookupBuilder.DataBuilder Add(string key, PluginSemVersion version) Parameters key string The key to add. version PluginSemVersion The version associated with the key. Returns VersionTranslationLayerLookupBuilder.DataBuilder The DataBuilder instance. Build() Builds and returns the list of Data entries. public List<VersionTranslationLayerLookupBuilder.Data> Build() Returns List<VersionTranslationLayerLookupBuilder.Data> The list of Data entries."
  },
  "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.html": {
    "href": "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.html",
    "title": "Class VersionTranslationLayerLookupBuilder | Onix Plugin Documentation",
    "summary": "Class VersionTranslationLayerLookupBuilder Namespace OnixRuntime.Api.Utils.ClientTranslationLayers Assembly OnixRuntime.dll Builder for creating version translation layer lookup tables. public class VersionTranslationLayerLookupBuilder Inheritance object VersionTranslationLayerLookupBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Values The collection of translation data sets. public List<List<VersionTranslationLayerLookupBuilder.Data>> Values Field Value List<List<VersionTranslationLayerLookupBuilder.Data>> Methods Add(DataBuilder) Adds a DataBuilder's entries to the translation layer. public void Add(VersionTranslationLayerLookupBuilder.DataBuilder data) Parameters data VersionTranslationLayerLookupBuilder.DataBuilder The DataBuilder containing entries to add. Add(List<Data>) Adds a list of Data entries to the translation layer. public void Add(List<VersionTranslationLayerLookupBuilder.Data> data) Parameters data List<VersionTranslationLayerLookupBuilder.Data> The list of Data entries to add. ToLookup(PluginSemVersion, PluginSemVersion) Creates a lookup table for translating keys between versions. public VersionTranslationLayerLookup ToLookup(PluginSemVersion currentVersion, PluginSemVersion targetVersion) Parameters currentVersion PluginSemVersion The current version. targetVersion PluginSemVersion The target version. Returns VersionTranslationLayerLookup A VersionTranslationLayerLookup for key translation. Translate(string, PluginSemVersion, PluginSemVersion) Translates a key from the current version to the target version. public string Translate(string key, PluginSemVersion currentVersion, PluginSemVersion targetVersion) Parameters key string The key to translate. currentVersion PluginSemVersion The current version. targetVersion PluginSemVersion The target version. Returns string The translated key, or the original key if no translation is found."
  },
  "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.html": {
    "href": "docs/OnixRuntime.Api.Utils.ClientTranslationLayers.html",
    "title": "Namespace OnixRuntime.Api.Utils.ClientTranslationLayers | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Utils.ClientTranslationLayers Classes VersionTranslationLayerLookup Provides lookup functionality for version translation layers. VersionTranslationLayerLookupBuilder Builder for creating version translation layer lookup tables. VersionTranslationLayerLookupBuilder.DataBuilder Builder for constructing a list of Data entries. Structs VersionTranslationLayerLookupBuilder.Data Represents a key-version pair for translation."
  },
  "docs/OnixRuntime.Api.Utils.Clipboard.html": {
    "href": "docs/OnixRuntime.Api.Utils.Clipboard.html",
    "title": "Class Clipboard | Onix Plugin Documentation",
    "summary": "Class Clipboard Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Provides methods for interacting with the system clipboard. public class Clipboard Inheritance object Clipboard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetText() Retrieves text from the system clipboard. public static string GetText() Returns string The text currently stored on the clipboard, or an empty string if unavailable. SetText(string) Sets the specified text to the system clipboard. public static void SetText(string text) Parameters text string The text to set on the clipboard."
  },
  "docs/OnixRuntime.Api.Utils.Internal.OnixCppImage.html": {
    "href": "docs/OnixRuntime.Api.Utils.Internal.OnixCppImage.html",
    "title": "Struct OnixCppImage | Onix Plugin Documentation",
    "summary": "Struct OnixCppImage Namespace OnixRuntime.Api.Utils.Internal Assembly OnixRuntime.dll public struct OnixCppImage : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OnixCppImage() public OnixCppImage() Fields Data public nint Data Field Value nint Dtor public nint Dtor Field Value nint Height public readonly int Height Field Value int Width public readonly int Width Field Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetData() public RawImageData GetData() Returns RawImageData GetDataAndDispose() public RawImageData GetDataAndDispose() Returns RawImageData"
  },
  "docs/OnixRuntime.Api.Utils.Internal.html": {
    "href": "docs/OnixRuntime.Api.Utils.Internal.html",
    "title": "Namespace OnixRuntime.Api.Utils.Internal | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Utils.Internal Structs OnixCppImage"
  },
  "docs/OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.html": {
    "href": "docs/OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.html",
    "title": "Class MemoryHelpers.VersionedSignature | Onix Plugin Documentation",
    "summary": "Class MemoryHelpers.VersionedSignature Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Represents a signature pattern tied to a specific version of the game. This class is used to associate a signature with the version where it first became valid. When scanning, the appropriate signature is selected based on the current version context. public class MemoryHelpers.VersionedSignature : IComparable<MemoryHelpers.VersionedSignature> Inheritance object MemoryHelpers.VersionedSignature Implements IComparable<MemoryHelpers.VersionedSignature> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionedSignature(PluginSemVersion, string) Initializes a new instance of MemoryHelpers.VersionedSignature using a strongly typed version. public VersionedSignature(PluginSemVersion version, string signature) Parameters version PluginSemVersion The version when this signature became valid. signature string The signature pattern string. VersionedSignature(string, string) Initializes a new instance of MemoryHelpers.VersionedSignature using a version string. public VersionedSignature(string version, string signature) Parameters version string The version string (will be parsed into PluginSemVersion). signature string The signature pattern string. Properties Signature Gets the signature pattern associated with this version. public string Signature { get; } Property Value string Version Gets the version this signature is tied to. public PluginSemVersion Version { get; } Property Value PluginSemVersion Methods CompareTo(VersionedSignature?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(MemoryHelpers.VersionedSignature? other) Parameters other MemoryHelpers.VersionedSignature An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order."
  },
  "docs/OnixRuntime.Api.Utils.MemoryHelpers.html": {
    "href": "docs/OnixRuntime.Api.Utils.MemoryHelpers.html",
    "title": "Class MemoryHelpers | Onix Plugin Documentation",
    "summary": "Class MemoryHelpers Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll public static class MemoryHelpers Inheritance object MemoryHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateEntityFromPtr(nint) Creates a new entity from its memory address. public static Entity CreateEntityFromPtr(nint entityPointer) Parameters entityPointer nint The pointer to the entity. Returns Entity A new entity out of that or a crash if you were wrong in thinking that was a valid entity address. GetAddress(MemoryAddressContainer) Gets the memory address of the specified MemoryAddressContainer which most game object let you obtain. public static nint GetAddress(MemoryAddressContainer addressContainer) Parameters addressContainer MemoryAddressContainer The object to get the address of. Returns nint The memory address of the object. Exceptions InsufficientTrustException Thrown when you are not trusted. GetAddress(ItemStack) Gets the memory address of the specified ItemStack which most game object let you obtain. public static nint GetAddress(ItemStack addressContainer) Parameters addressContainer ItemStack The object to get the address of. Returns nint The memory address of the object. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadArray<T>(nint, int) Reads an array of structures of type T from the specified memory address. public static T[] ReadArray<T>(nint address, int count) where T : struct Parameters address nint The memory address to read from. count int The number of structures to read. Returns T[] A new array of T containing the structures read from memory. Type Parameters T The type of structure to read. Exceptions ArgumentOutOfRangeException If count is negative. InsufficientTrustException Thrown when you are not trusted. ReadArray<T>(nint, int, bool) Reads an array of structures of type T from the specified memory address. public static T[] ReadArray<T>(nint address, int count, bool isReadOnly) where T : struct Parameters address nint The memory address to read from. count int The number of structures to read. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns T[] A new array of T containing the structures read from memory. Type Parameters T The type of structure to read. Exceptions ArgumentOutOfRangeException If count is negative. InsufficientTrustException Thrown when you are not trusted. ReadBoolean(nint) Reads a boolean value from the specified memory address. public static bool ReadBoolean(nint address) Parameters address nint The memory address to read from. Returns bool The boolean value read from memory (non-zero is true). Exceptions InsufficientTrustException Thrown when you are not trusted. ReadBoolean(nint, bool) Reads a boolean value from the specified memory address. public static bool ReadBoolean(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns bool The boolean value read from memory (non-zero is true). Exceptions InsufficientTrustException Thrown when you are not trusted. ReadByte(nint) Reads a byte from the specified memory address. public static byte ReadByte(nint address) Parameters address nint The memory address to read from. Returns byte The byte read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadByte(nint, bool) Reads a byte from the specified memory address. public static byte ReadByte(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns byte The byte read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadBytes(nint, int) Reads a specified number of bytes from the memory address into a new byte array. public static byte[] ReadBytes(nint address, int count) Parameters address nint The memory address to read from. count int The number of bytes to read. Returns byte[] A new byte array containing the data read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadBytes(nint, int, bool) Reads a specified number of bytes from the memory address into a new byte array. public static byte[] ReadBytes(nint address, int count, bool isReadOnly) Parameters address nint The memory address to read from. count int The number of bytes to read. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns byte[] A new byte array containing the data read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadDouble(nint) Reads a double-precision floating-point number (double) from the specified memory address. public static double ReadDouble(nint address) Parameters address nint The memory address to read from. Returns double The double value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadDouble(nint, bool) Reads a double-precision floating-point number (double) from the specified memory address. public static double ReadDouble(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns double The double value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadFloat(nint) Reads a single-precision floating-point number (float) from the specified memory address. public static float ReadFloat(nint address) Parameters address nint The memory address to read from. Returns float The float value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadFloat(nint, bool) Reads a single-precision floating-point number (float) from the specified memory address. public static float ReadFloat(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns float The float value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt16(nint) Reads a 16-bit signed integer (short) from the specified memory address. public static short ReadInt16(nint address) Parameters address nint The memory address to read from. Returns short The 16-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt16(nint, bool) Reads a 16-bit signed integer (short) from the specified memory address. public static short ReadInt16(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns short The 16-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt32(nint) Reads a 32-bit signed integer (int) from the specified memory address. public static int ReadInt32(nint address) Parameters address nint The memory address to read from. Returns int The 32-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt32(nint, bool) Reads a 32-bit signed integer (int) from the specified memory address. public static int ReadInt32(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns int The 32-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt64(nint) Reads a 64-bit signed integer (long) from the specified memory address. public static long ReadInt64(nint address) Parameters address nint The memory address to read from. Returns long The 64-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadInt64(nint, bool) Reads a 64-bit signed integer (long) from the specified memory address. public static long ReadInt64(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns long The 64-bit signed integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadIntPtr(nint) Reads a platform-dependent sized integer (IntPtr) from the specified memory address. public static nint ReadIntPtr(nint address) Parameters address nint The memory address to read from. Returns nint The IntPtr value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadIntPtr(nint, bool) Reads a platform-dependent sized integer (IntPtr) from the specified memory address. public static nint ReadIntPtr(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns nint The IntPtr value read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadSByte(nint) Reads a signed byte (sbyte) from the specified memory address. public static sbyte ReadSByte(nint address) Parameters address nint The memory address to read from. Returns sbyte The signed byte read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadSByte(nint, bool) Reads a signed byte (sbyte) from the specified memory address. public static sbyte ReadSByte(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns sbyte The signed byte read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt16(nint) Reads a 16-bit unsigned integer (ushort) from the specified memory address. public static ushort ReadUInt16(nint address) Parameters address nint The memory address to read from. Returns ushort The 16-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt16(nint, bool) Reads a 16-bit unsigned integer (ushort) from the specified memory address. public static ushort ReadUInt16(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns ushort The 16-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt32(nint) Reads a 32-bit unsigned integer (uint) from the specified memory address. public static uint ReadUInt32(nint address) Parameters address nint The memory address to read from. Returns uint The 32-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt32(nint, bool) Reads a 32-bit unsigned integer (uint) from the specified memory address. public static uint ReadUInt32(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns uint The 32-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt64(nint) Reads a 64-bit unsigned integer (ulong) from the specified memory address. public static ulong ReadUInt64(nint address) Parameters address nint The memory address to read from. Returns ulong The 64-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. ReadUInt64(nint, bool) Reads a 64-bit unsigned integer (ulong) from the specified memory address. public static ulong ReadUInt64(nint address, bool isReadOnly) Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns ulong The 64-bit unsigned integer read from memory. Exceptions InsufficientTrustException Thrown when you are not trusted. Read<T>(nint) Reads a structure of type T from the specified memory address. public static T Read<T>(nint address) where T : struct Parameters address nint The memory address to read from. Returns T The structure read from memory. Type Parameters T The type of structure to read. Exceptions InsufficientTrustException Thrown when you are not trusted. Read<T>(nint, bool) Reads a structure of type T from the specified memory address. public static T Read<T>(nint address, bool isReadOnly) where T : struct Parameters address nint The memory address to read from. isReadOnly bool Whether the memory is read-only and protection needs to be temporarily changed. Returns T The structure read from memory. Type Parameters T The type of structure to read. Exceptions InsufficientTrustException Thrown when you are not trusted. ScanSignature(IEnumerable<VersionedSignature>) Scans memory within a specified address range for a versioned signature pattern. This function uses a list of signatures associated with the game version in which they started working. Signatures apply from their specified version up to but not including the next newer version. For game versions earlier than any specified, the first (oldest) signature is used. For game versions later than any specified, the last (newest) signature is used. Signature Format: Signatures are hexadecimal byte patterns without 0x, using ? or ?? as wildcards. Example: \"48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??\" Signature Modifiers (optional): You can append modifiers to customize how the final address is derived from the match: iN: Selects the N-th match result (0-based index). Example: i2 selects the third match. oN: Reads a 4-byte offset starting N bytes after the matched signature. Useful for calls or LEA. nN: Treats the result as a pointer and reads the value at result + N. pN: Adds N to the final result. Example: p4 adds 4 to the result. If no matching signature is found, Zero is returned. public static nint ScanSignature(IEnumerable<MemoryHelpers.VersionedSignature> signatures) Parameters signatures IEnumerable<MemoryHelpers.VersionedSignature> A list of versioned signatures to search for. Returns nint The resolved address from the matched signature, or Zero if none is found. Exceptions ArgumentException Thrown when no valid signatures are provided. InsufficientTrustException Thrown when you are not trusted. ScanSignature(IEnumerable<VersionedSignature>, nint, nint) Scans memory within a specified address range for a versioned signature pattern. This function uses a list of signatures associated with the game version in which they started working. Signatures apply from their specified version up to but not including the next newer version. For game versions earlier than any specified, the first (oldest) signature is used. For game versions later than any specified, the last (newest) signature is used. Signature Format: Signatures are hexadecimal byte patterns without 0x, using ? or ?? as wildcards. Example: \"48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??\" Signature Modifiers (optional): You can append modifiers to customize how the final address is derived from the match: iN: Selects the N-th match result (0-based index). Example: i2 selects the third match. oN: Reads a 4-byte offset starting N bytes after the matched signature. Useful for calls or LEA. nN: Treats the result as a pointer and reads the value at result + N. pN: Adds N to the final result. Example: p4 adds 4 to the result. If no matching signature is found, Zero is returned. public static nint ScanSignature(IEnumerable<MemoryHelpers.VersionedSignature> signatures, nint startAddress, nint endAddress) Parameters signatures IEnumerable<MemoryHelpers.VersionedSignature> A list of versioned signatures to search for. startAddress nint Start address of the memory range to scan. endAddress nint End address of the memory range to scan. Returns nint The resolved address from the matched signature, or Zero if none is found. Exceptions ArgumentException Thrown when no valid signatures are provided. InsufficientTrustException Thrown when you are not trusted. ScanSignature(string) Scans memory within a specified address range for a given signature pattern. Signature Format: The signature is a string of space-separated hexadecimal bytes, without 0x. Wildcards can be represented by ? or ??. Example: \"48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??\" Signature Modifiers (optional): You can append one or more modifiers to the signature to alter how the final address is resolved: iN: Selects the N-th match result (0-based index). Example: i2 selects the third match. oN: Reads a 4-byte offset starting N bytes after the match (useful for instructions like CALL/LEA). nN: Treats the result as a pointer and reads the value at result + N. pN: Adds N to the final result. Example: p4 adds 4 to the result. If no matching signature is found, Zero is returned. public static nint ScanSignature(string signature) Parameters signature string The signature pattern and optional modifiers to search for. Returns nint The resolved address from the matched signature, or Zero if not found. Exceptions ArgumentException Thrown when the signature is empty or cannot be parsed. InsufficientTrustException Thrown when you are not trusted. ScanSignature(string, nint, nint) Scans memory within a specified address range for a given signature pattern. Signature Format: The signature is a string of space-separated hexadecimal bytes, without 0x. Wildcards can be represented by ? or ??. Example: \"48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??\" Signature Modifiers (optional): You can append one or more modifiers to the signature to alter how the final address is resolved: iN: Selects the N-th match result (0-based index). Example: i2 selects the third match. oN: Reads a 4-byte offset starting N bytes after the match (useful for instructions like CALL/LEA). nN: Treats the result as a pointer and reads the value at result + N. pN: Adds N to the final result. Example: p4 adds 4 to the result. If no matching signature is found, Zero is returned. public static nint ScanSignature(string signature, nint startAddress, nint endAddress) Parameters signature string The signature pattern and optional modifiers to search for. startAddress nint Start address of the memory range to scan. endAddress nint End address of the memory range to scan. Returns nint The resolved address from the matched signature, or Zero if not found. Exceptions ArgumentException Thrown when the signature is empty or cannot be parsed. InsufficientTrustException Thrown when you are not trusted. WriteArray<T>(nint, T[]) Writes an array of structures of type T to the specified memory address. Assumes memory is already writable. public static void WriteArray<T>(nint address, T[] values) where T : struct Parameters address nint The memory address to write to. values T[] The array of T to write. Type Parameters T The type of structure to write. Exceptions ArgumentNullException If values is null. InsufficientTrustException Thrown when you are not trusted. WriteArray<T>(nint, T[], bool) Writes an array of structures of type T to the specified memory address. public static void WriteArray<T>(nint address, T[] values, bool isReadOnly) where T : struct Parameters address nint The memory address to write to. values T[] The array of T to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Type Parameters T The type of structure to write. Exceptions ArgumentNullException If values is null. InsufficientTrustException Thrown when you are not trusted. WriteBoolean(nint, bool) Writes a boolean value to the specified memory address. Assumes memory is already writable. public static void WriteBoolean(nint address, bool value) Parameters address nint The memory address to write to. value bool The boolean value to write (true as 1, false as 0). Exceptions InsufficientTrustException Thrown when you are not trusted. WriteBoolean(nint, bool, bool) Writes a boolean value to the specified memory address. public static void WriteBoolean(nint address, bool value, bool isReadOnly) Parameters address nint The memory address to write to. value bool The boolean value to write (true as 1, false as 0). isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteByte(nint, byte) Writes a byte to the specified memory address. Assumes memory is already writable. public static void WriteByte(nint address, byte value) Parameters address nint The memory address to write to. value byte The byte value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteByte(nint, byte, bool) Writes a byte to the specified memory address. public static void WriteByte(nint address, byte value, bool isReadOnly) Parameters address nint The memory address to write to. value byte The byte value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteBytes(nint, byte[]) Writes a byte array to the specified memory address. Assumes memory is already writable. public static void WriteBytes(nint address, byte[] data) Parameters address nint The memory address to write to. data byte[] The byte array to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteBytes(nint, byte[], bool) Writes a byte array to the specified memory address. public static void WriteBytes(nint address, byte[] data, bool isReadOnly) Parameters address nint The memory address to write to. data byte[] The byte array to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteDouble(nint, double) Writes a double-precision floating-point number (double) to the specified memory address. Assumes memory is already writable. public static void WriteDouble(nint address, double value) Parameters address nint The memory address to write to. value double The double value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteDouble(nint, double, bool) Writes a double-precision floating-point number (double) to the specified memory address. public static void WriteDouble(nint address, double value, bool isReadOnly) Parameters address nint The memory address to write to. value double The double value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteFloat(nint, float) Writes a single-precision floating-point number (float) to the specified memory address. Assumes memory is already writable. public static void WriteFloat(nint address, float value) Parameters address nint The memory address to write to. value float The float value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteFloat(nint, float, bool) Writes a single-precision floating-point number (float) to the specified memory address. public static void WriteFloat(nint address, float value, bool isReadOnly) Parameters address nint The memory address to write to. value float The float value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt16(nint, short) Writes a 16-bit signed integer (short) to the specified memory address. Assumes memory is already writable. public static void WriteInt16(nint address, short value) Parameters address nint The memory address to write to. value short The 16-bit signed integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt16(nint, short, bool) Writes a 16-bit signed integer (short) to the specified memory address. public static void WriteInt16(nint address, short value, bool isReadOnly) Parameters address nint The memory address to write to. value short The 16-bit signed integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt32(nint, int) Writes a 32-bit signed integer (int) to the specified memory address. Assumes memory is already writable. public static void WriteInt32(nint address, int value) Parameters address nint The memory address to write to. value int The 32-bit signed integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt32(nint, int, bool) Writes a 32-bit signed integer (int) to the specified memory address. public static void WriteInt32(nint address, int value, bool isReadOnly) Parameters address nint The memory address to write to. value int The 32-bit signed integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt64(nint, long) Writes a 64-bit signed integer (long) to the specified memory address. Assumes memory is already writable. public static void WriteInt64(nint address, long value) Parameters address nint The memory address to write to. value long The 64-bit signed integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteInt64(nint, long, bool) Writes a 64-bit signed integer (long) to the specified memory address. public static void WriteInt64(nint address, long value, bool isReadOnly) Parameters address nint The memory address to write to. value long The 64-bit signed integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteIntPtr(nint, nint) Writes a platform-dependent sized integer (IntPtr) to the specified memory address. Assumes memory is already writable. public static void WriteIntPtr(nint address, nint value) Parameters address nint The memory address to write to. value nint The IntPtr value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteIntPtr(nint, nint, bool) Writes a platform-dependent sized integer (IntPtr) to the specified memory address. public static void WriteIntPtr(nint address, nint value, bool isReadOnly) Parameters address nint The memory address to write to. value nint The IntPtr value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteSByte(nint, sbyte) Writes a signed byte (sbyte) to the specified memory address. Assumes memory is already writable. public static void WriteSByte(nint address, sbyte value) Parameters address nint The memory address to write to. value sbyte The signed byte value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteSByte(nint, sbyte, bool) Writes a signed byte (sbyte) to the specified memory address. public static void WriteSByte(nint address, sbyte value, bool isReadOnly) Parameters address nint The memory address to write to. value sbyte The signed byte value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt16(nint, ushort) Writes a 16-bit unsigned integer (ushort) to the specified memory address. Assumes memory is already writable. public static void WriteUInt16(nint address, ushort value) Parameters address nint The memory address to write to. value ushort The 16-bit unsigned integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt16(nint, ushort, bool) Writes a 16-bit unsigned integer (ushort) to the specified memory address. public static void WriteUInt16(nint address, ushort value, bool isReadOnly) Parameters address nint The memory address to write to. value ushort The 16-bit unsigned integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt32(nint, uint) Writes a 32-bit unsigned integer (uint) to the specified memory address. Assumes memory is already writable. public static void WriteUInt32(nint address, uint value) Parameters address nint The memory address to write to. value uint The 32-bit unsigned integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt32(nint, uint, bool) Writes a 32-bit unsigned integer (uint) to the specified memory address. public static void WriteUInt32(nint address, uint value, bool isReadOnly) Parameters address nint The memory address to write to. value uint The 32-bit unsigned integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt64(nint, ulong) Writes a 64-bit unsigned integer (ulong) to the specified memory address. Assumes memory is already writable. public static void WriteUInt64(nint address, ulong value) Parameters address nint The memory address to write to. value ulong The 64-bit unsigned integer value to write. Exceptions InsufficientTrustException Thrown when you are not trusted. WriteUInt64(nint, ulong, bool) Writes a 64-bit unsigned integer (ulong) to the specified memory address. public static void WriteUInt64(nint address, ulong value, bool isReadOnly) Parameters address nint The memory address to write to. value ulong The 64-bit unsigned integer value to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Exceptions InsufficientTrustException Thrown when you are not trusted. Write<T>(nint, T) Writes a structure of type T to the specified memory address. Assumes memory is already writable. public static void Write<T>(nint address, T value) where T : struct Parameters address nint The memory address to write to. value T The structure to write. Type Parameters T The type of structure to write. Exceptions InsufficientTrustException Thrown when you are not trusted. Write<T>(nint, T, bool) Writes a structure of type T to the specified memory address. public static void Write<T>(nint address, T value, bool isReadOnly) where T : struct Parameters address nint The memory address to write to. value T The structure to write. isReadOnly bool Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing. Type Parameters T The type of structure to write. Exceptions InsufficientTrustException Thrown when you are not trusted."
  },
  "docs/OnixRuntime.Api.Utils.PluginSemVersion.html": {
    "href": "docs/OnixRuntime.Api.Utils.PluginSemVersion.html",
    "title": "Class PluginSemVersion | Onix Plugin Documentation",
    "summary": "Class PluginSemVersion Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Represents a semantic version for plugins, supporting comparison and parsing. public class PluginSemVersion : IComparable Inheritance object PluginSemVersion Implements IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PluginSemVersion(int, int, int) Initializes a new instance of the PluginSemVersion class with the specified major, minor, and patch values. public PluginSemVersion(int major, int minor, int patch) Parameters major int The major version. minor int The minor version. patch int The patch version. PluginSemVersion(ReadOnlySpan<char>) Initializes a new instance of the PluginSemVersion class from a version string. public PluginSemVersion(ReadOnlySpan<char> versionText) Parameters versionText ReadOnlySpan<char> The version string in the format 'major.minor.patch'. Exceptions FormatException Thrown when the version string is not in the correct format. Properties GameVersionInteger Gets the integer representation of the version for game versioning. public int GameVersionInteger { get; } Property Value int Major Gets the major version component. public int Major { get; } Property Value int Minor Gets the minor version component. public int Minor { get; } Property Value int Patch Gets the patch version component. public int Patch { get; } Property Value int Methods CompareTo(object?) Compares the current instance to another object. public int CompareTo(object? obj) Parameters obj object The object to compare to. Returns int An integer indicating the relative order. Exceptions ArgumentException Thrown when the object is not a PluginSemVersion. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromGameVersionInteger(int) Creates a PluginSemVersion from a game version integer. public static PluginSemVersion FromGameVersionInteger(int gameVersion) Parameters gameVersion int The integer representing the game version. Returns PluginSemVersion A PluginSemVersion instance. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the string representation of the version. public override string ToString() Returns string A string in the format 'major.minor.patch'. Operators operator ==(PluginSemVersion, PluginSemVersion?) Determines if two versions are equal. public static bool operator ==(PluginSemVersion a, PluginSemVersion? b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if the versions are equal; otherwise, false. operator >(PluginSemVersion, PluginSemVersion) Determines if one version is greater than another. public static bool operator >(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if a is greater than b; otherwise, false. operator >=(PluginSemVersion, PluginSemVersion) Determines if one version is greater than or equal to another. public static bool operator >=(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if a is greater than or equal to b; otherwise, false. operator !=(PluginSemVersion, PluginSemVersion?) Determines if two versions are not equal. public static bool operator !=(PluginSemVersion a, PluginSemVersion? b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if the versions are not equal; otherwise, false. operator <(PluginSemVersion, PluginSemVersion) Determines if one version is less than another. public static bool operator <(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if a is less than b; otherwise, false. operator <=(PluginSemVersion, PluginSemVersion) Determines if one version is less than or equal to another. public static bool operator <=(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion The first version. b PluginSemVersion The second version. Returns bool True if a is less than or equal to b; otherwise, false."
  },
  "docs/OnixRuntime.Api.Utils.RawImageData.ImageCorner.html": {
    "href": "docs/OnixRuntime.Api.Utils.RawImageData.ImageCorner.html",
    "title": "Enum RawImageData.ImageCorner | Onix Plugin Documentation",
    "summary": "Enum RawImageData.ImageCorner Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll public enum RawImageData.ImageCorner Fields BottomLeft = 2 BottomRight = 3 TopLeft = 0 TopRight = 1"
  },
  "docs/OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat.html": {
    "href": "docs/OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat.html",
    "title": "Enum RawImageData.ImageSaveFormat | Onix Plugin Documentation",
    "summary": "Enum RawImageData.ImageSaveFormat Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Specifies the format to use when saving an image. public enum RawImageData.ImageSaveFormat Fields Jpg = 1 JPEG image format. Png = 0 PNG image format."
  },
  "docs/OnixRuntime.Api.Utils.RawImageData.ResizeFilter.html": {
    "href": "docs/OnixRuntime.Api.Utils.RawImageData.ResizeFilter.html",
    "title": "Enum RawImageData.ResizeFilter | Onix Plugin Documentation",
    "summary": "Enum RawImageData.ResizeFilter Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Specifies the filter to use when resizing an image. public enum RawImageData.ResizeFilter Fields Bilinear = 2 Box = 1 Cubic = 4 CubicBSpline = 3 Default = 0 Mitchell = 5 Nearest = 6"
  },
  "docs/OnixRuntime.Api.Utils.RawImageData.html": {
    "href": "docs/OnixRuntime.Api.Utils.RawImageData.html",
    "title": "Class RawImageData | Onix Plugin Documentation",
    "summary": "Class RawImageData Namespace OnixRuntime.Api.Utils Assembly OnixRuntime.dll Represents raw image data and provides methods for manipulating and saving images. public class RawImageData Inheritance object RawImageData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RawImageData(byte[]) Initializes a new instance of the RawImageData class from encoded image data. public RawImageData(byte[] encodedImageData) Parameters encodedImageData byte[] The encoded image data (e.g., PNG or JPEG bytes). Exceptions UnauthorizedAccessException This operation is not supported on the current platform. RawImageData(byte[], int, int) Initializes a new instance of the RawImageData class from raw RGBA8 data. public RawImageData(byte[] rawDataRGBA8, int width, int height) Parameters rawDataRGBA8 byte[] The raw RGBA8 image data. width int The width of the image. height int The height of the image. RawImageData(int, int) Initializes a new instance of the RawImageData class with the specified width and height. public RawImageData(int width, int height) Parameters width int The width of the image. height int The height of the image. RawImageData(string) Initializes a new instance of the RawImageData class from an image file path. public RawImageData(string path) Parameters path string The file path to the image. Exceptions InvalidDataException When the image cannot be parsed. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. DirectoryNotFoundException The specified path is invalid (for example, it is on an unmapped drive). IOException An I/O error occurred while opening the file. UnauthorizedAccessException This operation is not supported on the current platform. Properties Data Gets the raw image data in RGBA8 format. public byte[] Data { get; } Property Value byte[] Empty Gets an empty RawImageData instance. public static RawImageData Empty { get; } Property Value RawImageData Height Gets the height of the image. public int Height { get; } Property Value int IsEmpty Gets a value indicating whether the image is empty. public bool IsEmpty { get; } Property Value bool Width Gets the width of the image. public int Width { get; } Property Value int Methods Create(int, int) Creates a new RawImageData with the specified width and height. public static RawImageData Create(int width, int height) Parameters width int The width of the image. height int The height of the image. Returns RawImageData A new RawImageData instance. CreateFourWayGradient(int, int, ColorF, ColorF, ColorF, ColorF) Creates a new RawImageData with a four-way color gradient between the specified corner colors. public static RawImageData CreateFourWayGradient(int width, int height, ColorF topLeft, ColorF topRight, ColorF bottomLeft, ColorF bottomRight) Parameters width int The width of the image. height int The height of the image. topLeft ColorF The color at the top-left corner. topRight ColorF The color at the top-right corner. bottomLeft ColorF The color at the bottom-left corner. bottomRight ColorF The color at the bottom-right corner. Returns RawImageData A RawImageData instance filled with a smooth gradient between the four specified corner colors. CreateRandomGradient(int, int) Creates a new RawImageData with a random four-way color gradient. public static RawImageData CreateRandomGradient(int width, int height) Parameters width int The width of the image. height int The height of the image. Returns RawImageData A RawImageData instance filled with a smooth gradient between four randomly chosen corner colors. GetPixel(int, int) Gets the color at the specified coordinates as a ColorF. public ColorF GetPixel(int x, int y) Parameters x int The x-coordinate. y int The y-coordinate. Returns ColorF The color at the specified coordinates. GetRawPixel(int, int) Gets the raw pixel value at the specified coordinates. public uint GetRawPixel(int x, int y) Parameters x int The x-coordinate. y int The y-coordinate. Returns uint The raw pixel value as a 32-bit unsigned integer. Exceptions IndexOutOfRangeException Thrown when the coordinates are out of bounds. NullReferenceException Thrown when the data array is null. GetRawPixelOpacity(int, int) Gets the raw pixel opacity value at the specified coordinates. public byte GetRawPixelOpacity(int x, int y) Parameters x int The x-coordinate. y int The y-coordinate. Returns byte The raw pixel value as a 32-bit unsigned integer. Exceptions IndexOutOfRangeException Thrown when the coordinates are out of bounds. NullReferenceException Thrown when the data array is null. GetSaveBytes(ImageSaveFormat, int, int) Gets the bytes for saving the image in the specified format. public byte[] GetSaveBytes(RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters format RawImageData.ImageSaveFormat The image save format. quality int The quality for JPEG format (default 100). compressionLevel int The compression level for PNG format (default 5). Returns byte[] The image bytes in the specified format. GetSaveBytesJpg(int) Gets the JPEG bytes for saving the image. public void GetSaveBytesJpg(int quality = 100) Parameters quality int The quality for JPEG format (default 100). GetSaveBytesPng(int) Gets the PNG bytes for saving the image. public void GetSaveBytesPng(int compressionLevel = 5) Parameters compressionLevel int The compression level for PNG format (default 5). Load(byte[]) Loads a RawImageData from the specified byte array. public static RawImageData Load(byte[] bytes) Parameters bytes byte[] The image bytes. Returns RawImageData A RawImageData instance. Exceptions InvalidDataException When the image cannot be parsed. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. DirectoryNotFoundException The specified path is invalid (for example, it is on an unmapped drive). IOException An I/O error occurred while opening the file. UnauthorizedAccessException This operation is not supported on the current platform. Load(Stream) Loads a RawImageData from the specified stream. public static RawImageData Load(Stream stream) Parameters stream Stream The stream containing the image data. Returns RawImageData A RawImageData instance. Exceptions InvalidDataException When the image cannot be parsed. Load(string) Loads a RawImageData from the specified file path. public static RawImageData Load(string path) Parameters path string The file path to the image. Returns RawImageData A RawImageData instance. Exceptions InvalidDataException When the image cannot be parsed. RoundImageCorner(float, ImageCorner) Rounds the opacity of a single image corner to create a rounded-corner effect. public void RoundImageCorner(float radius, RawImageData.ImageCorner corner) Parameters radius float The radius of the rounded corner in pixels. corner RawImageData.ImageCorner The corner to round (TopLeft, TopRight, BottomLeft, BottomRight). RoundImageCorners(float) Rounds the opacity of all four corners of the image to create a rounded-corner effect. public void RoundImageCorners(float radius) Parameters radius float The radius of the rounded corners in pixels. Sample(Vec2I, Vec2I, Action<RawImageData, Vec2I>) Samples the image in the specified rectangular region, invoking a callback for each pixel. public void Sample(Vec2I startPoint, Vec2I endPoint, Action<RawImageData, Vec2I> callback) Parameters startPoint Vec2I The top-left corner of the region to sample (inclusive). endPoint Vec2I The bottom-right corner of the region to sample (exclusive). callback Action<RawImageData, Vec2I> The callback to invoke for each pixel, receiving the image and the current position. Sample(Action<RawImageData, Vec2I>) Samples the entire image, invoking a callback for each pixel. public void Sample(Action<RawImageData, Vec2I> callback) Parameters callback Action<RawImageData, Vec2I> The callback to invoke for each pixel, receiving the image and the current position. SampleAsync(Vec2I, Vec2I, Action<RawImageData, Vec2I>) Asynchronously samples the image in the specified rectangular region, invoking a callback for each pixel. public Task SampleAsync(Vec2I startPoint, Vec2I endPoint, Action<RawImageData, Vec2I> callback) Parameters startPoint Vec2I The top-left corner of the region to sample (inclusive). endPoint Vec2I The bottom-right corner of the region to sample (exclusive). callback Action<RawImageData, Vec2I> The callback to invoke for each pixel, receiving the image and the current position. Returns Task A task representing the asynchronous operation. SampleAsync(Action<RawImageData, Vec2I>) Asynchronously samples the entire image, invoking a callback for each pixel. public Task SampleAsync(Action<RawImageData, Vec2I> callback) Parameters callback Action<RawImageData, Vec2I> The callback to invoke for each pixel, receiving the image and the current position. Returns Task A task representing the asynchronous operation. Save(Stream, ImageSaveFormat, int, int) Saves the image to the specified stream. public void Save(Stream stream, RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters stream Stream The stream to save the image to. format RawImageData.ImageSaveFormat The image save format. quality int The quality for JPEG format (default 100). compressionLevel int The compression level for PNG format (default 5). Save(string, ImageSaveFormat, int, int) Saves the image to the specified file path. public void Save(string path, RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters path string The file path to save the image. format RawImageData.ImageSaveFormat The image save format. quality int The quality for JPEG format (default 100). compressionLevel int The compression level for PNG format (default 5). SaveJpg(Stream, int) Saves the image as JPEG to the specified stream. public void SaveJpg(Stream stream, int quality = 100) Parameters stream Stream The stream to save the JPEG image to. quality int The quality for JPEG format (default 100). SaveJpg(string, int) Saves the image as JPEG to the specified file path. public void SaveJpg(string path, int quality = 100) Parameters path string The file path to save the JPEG image. quality int The quality for JPEG format (default 100). SavePng(Stream, int) Saves the image as PNG to the specified stream. public void SavePng(Stream stream, int compressionLevel = 5) Parameters stream Stream The stream to save the PNG image to. compressionLevel int The compression level for PNG format (default 5). SavePng(string, int) Saves the image as PNG to the specified file path. public void SavePng(string path, int compressionLevel = 5) Parameters path string The file path to save the PNG image. compressionLevel int The compression level for PNG format (default 5). SetPixel(int, int, ColorF) Sets the color at the specified coordinates. public void SetPixel(int x, int y, ColorF color) Parameters x int The x-coordinate. y int The y-coordinate. color ColorF The color to set. SetRawPixel(int, int, uint) Sets the raw pixel value at the specified coordinates. public void SetRawPixel(int x, int y, uint color) Parameters x int The x-coordinate. y int The y-coordinate. color uint The color value as a 32-bit unsigned integer. Exceptions IndexOutOfRangeException Thrown when the coordinates are out of bounds. NullReferenceException Thrown when the data array is null. SetRawPixelOpacity(int, int, byte) Sets the raw pixel opacity value at the specified coordinates. public void SetRawPixelOpacity(int x, int y, byte opacity) Parameters x int The x-coordinate. y int The y-coordinate. opacity byte The color value as a 32-bit unsigned integer. Exceptions IndexOutOfRangeException Thrown when the coordinates are out of bounds. NullReferenceException Thrown when the data array is null."
  },
  "docs/OnixRuntime.Api.Utils.html": {
    "href": "docs/OnixRuntime.Api.Utils.html",
    "title": "Namespace OnixRuntime.Api.Utils | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.Utils Classes Clipboard Provides methods for interacting with the system clipboard. MemoryHelpers MemoryHelpers.VersionedSignature Represents a signature pattern tied to a specific version of the game. This class is used to associate a signature with the version where it first became valid. When scanning, the appropriate signature is selected based on the current version context. PluginSemVersion Represents a semantic version for plugins, supporting comparison and parsing. RawImageData Represents raw image data and provides methods for manipulating and saving images. Enums RawImageData.ImageCorner RawImageData.ImageSaveFormat Specifies the format to use when saving an image. RawImageData.ResizeFilter Specifies the filter to use when resizing an image."
  },
  "docs/OnixRuntime.Api.World.Biome.html": {
    "href": "docs/OnixRuntime.Api.World.Biome.html",
    "title": "Class Biome | Onix Plugin Documentation",
    "summary": "Class Biome Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a biome in the world, providing access to its properties such as temperature, humidity, and densities. public class Biome : MemoryAddressContainer Inheritance object MemoryAddressContainer Biome Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AshDensity Gets the ash density of the biome. public float AshDensity { get; } Property Value float BlueSporesDensity Gets the blue spores density of the biome. public float BlueSporesDensity { get; } Property Value float FoliageColor Gets the foliage color of the biome. public ColorF FoliageColor { get; } Property Value ColorF FoliageSnow Gets the foliage snow value of the biome. public float FoliageSnow { get; } Property Value float Humidity Gets the humidity of the biome. public float Humidity { get; } Property Value float Id Gets the unique identifier of the biome. public int Id { get; } Property Value int Name Gets the name of the biome. public string Name { get; } Property Value string RedSporesDensity Gets the red spores density of the biome. public float RedSporesDensity { get; } Property Value float SnowAccumulation Gets the snow accumulation value of the biome. public float SnowAccumulation { get; } Property Value float Temperature Gets the temperature of the biome. public float Temperature { get; } Property Value float WhiteAshDensity Gets the white ash density of the biome. public float WhiteAshDensity { get; } Property Value float"
  },
  "docs/OnixRuntime.Api.World.BiomeTintColors.html": {
    "href": "docs/OnixRuntime.Api.World.BiomeTintColors.html",
    "title": "Struct BiomeTintColors | Onix Plugin Documentation",
    "summary": "Struct BiomeTintColors Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the biome tint colors at a block position. public struct BiomeTintColors Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields GrassColor The grass color for the biome. public ColorF GrassColor Field Value ColorF WaterColor The water color for the biome. public ColorF WaterColor Field Value ColorF"
  },
  "docs/OnixRuntime.Api.World.Block.html": {
    "href": "docs/OnixRuntime.Api.World.Block.html",
    "title": "Class Block | Onix Plugin Documentation",
    "summary": "Class Block Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a block in the world, providing access to its properties, states, and permutations. public class Block : MemoryAddressContainer Inheritance object MemoryAddressContainer Block Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreativeCategory Gets the creative category of the block. public CreativeItemCategory CreativeCategory { get; } Property Value CreativeItemCategory Data Gets the block data value. public int Data { get; } Property Value int DefaultState Gets the default state of the block. public Block DefaultState { get; } Property Value Block Id This id might not be reliable across versions/servers. public int Id { get; } Property Value int IsSolid Gets a value indicating whether the block is solid. public bool IsSolid { get; } Property Value bool LegacyDataLookup Gets the legacy data lookup dictionary for the block. public IReadOnlyDictionary<int, Block> LegacyDataLookup { get; } Property Value IReadOnlyDictionary<int, Block> Name Gets the name of the block. public string Name { get; } Property Value string NameFull Gets the full name of the block. public string NameFull { get; } Property Value string Namespace Gets the namespace of the block. public string Namespace { get; } Property Value string NextPermutation Gets the next permutation of the block. public Block NextPermutation { get; } Property Value Block Permutations Gets the permutations of the block. public Block[] Permutations { get; } Property Value Block[] PreviousPermutation Gets the previous permutation of the block. public Block PreviousPermutation { get; } Property Value Block RuntimeId This id can change between worlds/servers/versions/etc. public uint RuntimeId { get; } Property Value uint State Gets the state of the block as an ObjectTag. public ObjectTag State { get; } Property Value ObjectTag States Gets the available block states. public BlockState[] States { get; } Property Value BlockState[] VisualBoundingBox Gets the visual bounding box of the block. public BoundingBox VisualBoundingBox { get; } Property Value BoundingBox Methods GetState(int) Gets a block state by ID. public BlockState? GetState(int id) Parameters id int The ID of the state. Returns BlockState The BlockState, or null if not found. GetState(string) Gets a block state by name. public BlockState? GetState(string name) Parameters name string The name of the state. Returns BlockState The BlockState, or null if not found. IsAir() Determines whether the block is air. public bool IsAir() Returns bool True if the block is air; otherwise, false. IsRequestPlaceholder() Determines whether the block is a request placeholder. public bool IsRequestPlaceholder() Returns bool True if the block is a request placeholder; otherwise, false. LookupLegacyData(int) Looks up a block by legacy data value. public Block? LookupLegacyData(int data) Parameters data int The legacy data value. Returns Block The corresponding Block, or null if not found. ToString() Returns a string representation of the block. public override string ToString() Returns string A string containing the full name and ID of the block."
  },
  "docs/OnixRuntime.Api.World.BlockEntity.html": {
    "href": "docs/OnixRuntime.Api.World.BlockEntity.html",
    "title": "Class BlockEntity | Onix Plugin Documentation",
    "summary": "Class BlockEntity Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a block entity in the world, providing access to its block, position, bounding box, and container. public class BlockEntity : MemoryAddressContainer Inheritance object MemoryAddressContainer BlockEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Block Gets the block associated with this block entity. public Block Block { get; } Property Value Block BoundingBox Gets the bounding box of the block entity. public BoundingBox BoundingBox { get; } Property Value BoundingBox Container Might not be up to date on the client, the server doesn't have to send the container content or updates to it. public ItemContainer? Container { get; } Property Value ItemContainer Position Gets the position of the block entity. public BlockPos Position { get; } Property Value BlockPos TickCount Gets the tick count for this block entity. public int TickCount { get; } Property Value int Methods SaveToNbt() Saves the block entity to an NBT tag. public ObjectTag SaveToNbt() Returns ObjectTag The ObjectTag representing the block entity's NBT data."
  },
  "docs/OnixRuntime.Api.World.BlockFace.html": {
    "href": "docs/OnixRuntime.Api.World.BlockFace.html",
    "title": "Enum BlockFace | Onix Plugin Documentation",
    "summary": "Enum BlockFace Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the face of a block that was hit by a raycast. public enum BlockFace Fields Bottom = 0 East = 5 North = 2 South = 3 Top = 1 West = 4"
  },
  "docs/OnixRuntime.Api.World.BlockRegistry.html": {
    "href": "docs/OnixRuntime.Api.World.BlockRegistry.html",
    "title": "Class BlockRegistry | Onix Plugin Documentation",
    "summary": "Class BlockRegistry Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Provides access to the block registry, allowing retrieval of blocks by name, state, runtime ID, or index. public class BlockRegistry : MemoryAddressContainer Inheritance object MemoryAddressContainer BlockRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlockCount Gets the total number of blocks in the registry. public int BlockCount { get; } Property Value int RuntimeBlocks Gets the collection of all runtime blocks in the registry. public IEnumerable<Block> RuntimeBlocks { get; } Property Value IEnumerable<Block> Methods GetBlock(ObjectTag) Gets a block by its NBT state. public Block? GetBlock(ObjectTag state) Parameters state ObjectTag The NBT state of the block. Returns Block The Block, or null if not found. GetBlock(string, int) Gets a block by its name and optional data value. public Block? GetBlock(string name, int data = 0) Parameters name string The name of the block. data int The data value of the block (default is 0). Returns Block The Block, or null if not found. GetBlockAtIndex(int) Gets a block at the specified index in the registry. public Block GetBlockAtIndex(int index) Parameters index int The index of the block. Returns Block The Block at the specified index. GetBlockFromRuntimeId(uint) Gets a block by its runtime ID. public Block? GetBlockFromRuntimeId(uint runtimeId) Parameters runtimeId uint The runtime ID of the block. Returns Block The Block, or null if not found."
  },
  "docs/OnixRuntime.Api.World.BlockState.html": {
    "href": "docs/OnixRuntime.Api.World.BlockState.html",
    "title": "Class BlockState | Onix Plugin Documentation",
    "summary": "Class BlockState Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a block state, providing access to its properties and NBT conversion. public class BlockState : MemoryAddressContainer Inheritance object MemoryAddressContainer BlockState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitCount Gets the number of bits used by this block state. public uint BitCount { get; } Property Value uint IsInitialized Gets a value indicating whether this block state is initialized. public bool IsInitialized { get; } Property Value bool Mask Gets the mask value for this block state. public uint Mask { get; } Property Value uint MaxBits Gets the maximum number of bits for this block state. public int MaxBits { get; } Property Value int Name Gets the name of the block state. public string Name { get; } Property Value string StartBit Gets the start bit for this block state. public uint StartBit { get; } Property Value uint StateId Gets the state ID of the block state. public int StateId { get; } Property Value int VariationCount Gets the number of variations for this block state. public uint VariationCount { get; } Property Value uint Methods ToNbt(int) Converts the block state to an NBT tag for the specified value. public ObjectTag ToNbt(int value) Parameters value int The value to convert to NBT. Returns ObjectTag The ObjectTag representing the block state as NBT."
  },
  "docs/OnixRuntime.Api.World.BrightnessLevels.html": {
    "href": "docs/OnixRuntime.Api.World.BrightnessLevels.html",
    "title": "Struct BrightnessLevels | Onix Plugin Documentation",
    "summary": "Struct BrightnessLevels Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the brightness levels at a block position. public struct BrightnessLevels Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields BlockLight Value between 0 and 15 representing how much block light (things like torches) is hitting the block. public byte BlockLight Field Value byte SkyLight Value between 0 and 15 representing how much sun/skylight is hitting the block. Note: This value will not adapt with time of day. public byte SkyLight Field Value byte"
  },
  "docs/OnixRuntime.Api.World.CreativeItemCategory.html": {
    "href": "docs/OnixRuntime.Api.World.CreativeItemCategory.html",
    "title": "Enum CreativeItemCategory | Onix Plugin Documentation",
    "summary": "Enum CreativeItemCategory Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the creative item category for a block. public enum CreativeItemCategory Fields All = 0 Construction = 1 Equipment = 3 ItemCommandOnly = 5 Items = 4 Nature = 2 Undefined = 6"
  },
  "docs/OnixRuntime.Api.World.Difficulty.html": {
    "href": "docs/OnixRuntime.Api.World.Difficulty.html",
    "title": "Enum Difficulty | Onix Plugin Documentation",
    "summary": "Enum Difficulty Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the difficulty level of the world. public enum Difficulty Fields Easy = 1 Hard = 3 Normal = 2 Peaceful = 0"
  },
  "docs/OnixRuntime.Api.World.Dimension.html": {
    "href": "docs/OnixRuntime.Api.World.Dimension.html",
    "title": "Class Dimension | Onix Plugin Documentation",
    "summary": "Class Dimension Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a dimension in the world, providing access to its type, name, world, blocks, chunks, and weather. public class Dimension : MemoryAddressContainer Inheritance object MemoryAddressContainer Dimension Derived EndDimension NetherDimension OverworldDimension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the type of the dimension. public DimensionType Id { get; } Property Value DimensionType Name Gets the name of the dimension. public string Name { get; } Property Value string Region Gets the world blocks for this dimension. public WorldBlocks Region { get; } Property Value WorldBlocks Weather Gets the current weather state for this dimension. public DimensionWeather? Weather { get; } Property Value DimensionWeather? World Gets the runtime world associated with this dimension. public RuntimeWorld World { get; } Property Value RuntimeWorld WorldChunks Gets the world chunks for this dimension. public WorldChunks WorldChunks { get; } Property Value WorldChunks"
  },
  "docs/OnixRuntime.Api.World.DimensionType.html": {
    "href": "docs/OnixRuntime.Api.World.DimensionType.html",
    "title": "Enum DimensionType | Onix Plugin Documentation",
    "summary": "Enum DimensionType Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the type of dimension. public enum DimensionType Fields End = 2 Nether = 1 Overworld = 0"
  },
  "docs/OnixRuntime.Api.World.DimensionWeather.html": {
    "href": "docs/OnixRuntime.Api.World.DimensionWeather.html",
    "title": "Struct DimensionWeather | Onix Plugin Documentation",
    "summary": "Struct DimensionWeather Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the weather state of a dimension, including rain, lightning, and fog levels. public struct DimensionWeather Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DimensionWeather() Initializes a new instance of the DimensionWeather struct with default values. public DimensionWeather() Fields CurrentTick The current tick of the weather system. public int CurrentTick Field Value int FogLevel The fog level. public float FogLevel Field Value float LightningLevel The current lightning level. public float LightningLevel Field Value float OldLightningLevel The previous lightning level. public float OldLightningLevel Field Value float OldRainLevel The previous rain level. public float OldRainLevel Field Value float RainLevel The current rain level. public float RainLevel Field Value float TargetLightningLevel The target lightning level. public float TargetLightningLevel Field Value float TargetRainLevel The target rain level. public float TargetRainLevel Field Value float"
  },
  "docs/OnixRuntime.Api.World.EndDimension.html": {
    "href": "docs/OnixRuntime.Api.World.EndDimension.html",
    "title": "Class EndDimension | Onix Plugin Documentation",
    "summary": "Class EndDimension Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the End dimension. public class EndDimension : Dimension Inheritance object MemoryAddressContainer Dimension EndDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.Region Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.World.NetherDimension.html": {
    "href": "docs/OnixRuntime.Api.World.NetherDimension.html",
    "title": "Class NetherDimension | Onix Plugin Documentation",
    "summary": "Class NetherDimension Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the Nether dimension. public class NetherDimension : Dimension Inheritance object MemoryAddressContainer Dimension NetherDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.Region Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.World.OverworldDimension.html": {
    "href": "docs/OnixRuntime.Api.World.OverworldDimension.html",
    "title": "Class OverworldDimension | Onix Plugin Documentation",
    "summary": "Class OverworldDimension Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the Overworld dimension. public class OverworldDimension : Dimension Inheritance object MemoryAddressContainer Dimension OverworldDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.Region Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Api.World.RaycastResult.html": {
    "href": "docs/OnixRuntime.Api.World.RaycastResult.html",
    "title": "Class RaycastResult | Onix Plugin Documentation",
    "summary": "Class RaycastResult Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents the result of a raycast operation, including hit type, position, face, and entity. public class RaycastResult : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer RaycastResult Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RaycastResult() Initializes a new instance of the RaycastResult class. public RaycastResult() Properties BlockPosition Gets or sets the block position that was hit. public BlockPos BlockPosition { get; set; } Property Value BlockPos Direction Gets or sets the direction of the raycast. public Vec3 Direction { get; set; } Property Value Vec3 Entity Gets or sets the entity that was hit by the raycast, if any. public Entity? Entity { get; set; } Property Value Entity Face Gets or sets the face of the block that was hit. public BlockFace Face { get; set; } Property Value BlockFace HitPosition Gets or sets the hit position in the world. public Vec3 HitPosition { get; set; } Property Value Vec3 Mob Gets the mob that was hit by the raycast, if any. public Mob? Mob { get; } Property Value Mob Origin Gets or sets the origin of the raycast. public Vec3 Origin { get; set; } Property Value Vec3 Player Gets the player that was hit by the raycast, if any. public Player? Player { get; } Property Value Player Type Gets or sets the type of the raycast result. public RaycastResultType Type { get; set; } Property Value RaycastResultType Methods Clone() Creates a deep copy of this RaycastResult. public RaycastResult Clone() Returns RaycastResult A new RaycastResult with the same values. ToString() Returns a string representation of the raycast result. public override string ToString() Returns string A string describing the raycast result."
  },
  "docs/OnixRuntime.Api.World.RaycastResultType.html": {
    "href": "docs/OnixRuntime.Api.World.RaycastResultType.html",
    "title": "Enum RaycastResultType | Onix Plugin Documentation",
    "summary": "Enum RaycastResultType Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the type of result returned by a raycast operation. public enum RaycastResultType Fields Block = 0 Entity = 1 EntityOutOfRange = 2 None = 3"
  },
  "docs/OnixRuntime.Api.World.RuntimeWorld.html": {
    "href": "docs/OnixRuntime.Api.World.RuntimeWorld.html",
    "title": "Class RuntimeWorld | Onix Plugin Documentation",
    "summary": "Class RuntimeWorld Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a runtime world, providing access to world properties, players, entities, registries, and utility methods. public class RuntimeWorld : MemoryAddressContainer Inheritance object MemoryAddressContainer RuntimeWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlockRegistry Gets the block registry for the world. public BlockRegistry BlockRegistry { get; } Property Value BlockRegistry CommandsEnabled Gets a value indicating whether commands are enabled in the world. public bool CommandsEnabled { get; } Property Value bool CurrentTick Gets the current tick of the world. public int CurrentTick { get; } Property Value int CurrentTime Gets the current time of the world. public int CurrentTime { get; } Property Value int DefaultGameMode Gets the default game type for the world. public GameMode DefaultGameMode { get; } Property Value GameMode Difficulty Gets the difficulty of the world. public Difficulty Difficulty { get; } Property Value Difficulty Entities Gets all entities including players in the world. Requires trust on the client side. public Entity[] Entities { get; } Property Value Entity[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. EntitiesWithoutPlayers Gets all entities excluding players in the world. Requires trust on the client side. public Entity[] EntitiesWithoutPlayers { get; } Property Value Entity[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. FlatWorldOptions The json string of the flat world options used to create this world, right now it is not serialized or deserialized, it is just a string with the default but if they ever decide to implement it properly then it could be more useful public string FlatWorldOptions { get; } Property Value string ItemRegistry Gets the item registry for the world. public ItemRegistry ItemRegistry { get; } Property Value ItemRegistry Name Gets the name of the world. public string Name { get; } Property Value string NetherScale Gets the nether scale value. public int NetherScale { get; } Property Value int Players Gets all the players in the world. Requires trust on the client side. public Player[] Players { get; } Property Value Player[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. ProtocolVersion Gets the protocol version of the world. public int ProtocolVersion { get; } Property Value int Scoreboard Gets the scoreboard for the world. public Scoreboard Scoreboard { get; } Property Value Scoreboard Seed Gets the world seed. public long Seed { get; } Property Value long ServerConnectedPlayers Gets the server connected players in the world. public ServerConnectedPlayer[] ServerConnectedPlayers { get; } Property Value ServerConnectedPlayer[] ServerPlayers Gets all the server players in the world. public ServerPlayer[] ServerPlayers { get; } Property Value ServerPlayer[] ServerTickRange Gets the server tick range. public int ServerTickRange { get; } Property Value int SpawnPosition Gets the spawn position of the world. public BlockPos SpawnPosition { get; } Property Value BlockPos WorldIdentifier This is not necessarily unique, in vanilla it is the name of the world folder, servers can send anything, on realms it generally just says \"world\" public string WorldIdentifier { get; } Property Value string Methods GetEntityByRuntimeId(ulong) Gets the entity with the specified runtime id. Requires trust on the client side. public Entity? GetEntityByRuntimeId(ulong runtimeId) Parameters runtimeId ulong Returns Entity Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetEntityByUniqueId(ulong) Gets the entity with the specified unique id. Requires trust on the client side. public Entity? GetEntityByUniqueId(ulong uniqueId) Parameters uniqueId ulong Returns Entity Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetPlayerByXuid(string) Gets the player with the specified xuid. Requires trust on the client side. public Player? GetPlayerByXuid(string xuid) Parameters xuid string Returns Player Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetServerPlayerByXuid(string) Gets the server player with the specified xuid. public ServerPlayer? GetServerPlayerByXuid(string xuid) Parameters xuid string Returns ServerPlayer IsSlimeChunk(ChunkPos) Determines whether the specified chunk position is a slime chunk. public bool IsSlimeChunk(ChunkPos pos) Parameters pos ChunkPos The chunk position to check. Returns bool True if the chunk is a slime chunk; otherwise, false."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.Scoreboard.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.Scoreboard.html",
    "title": "Class Scoreboard | Onix Plugin Documentation",
    "summary": "Class Scoreboard Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Represents a scoreboard, providing access to objectives, display objectives, and score manipulation methods. public class Scoreboard : MemoryAddressContainer Inheritance object MemoryAddressContainer Scoreboard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BelowNameObjective Gets the belowname display objective. public ScoreboardDisplayObjective? BelowNameObjective { get; } Property Value ScoreboardDisplayObjective DisplayObjectives Gets the display objectives in the scoreboard. public IReadOnlyDictionary<string, ScoreboardDisplayObjective> DisplayObjectives { get; } Property Value IReadOnlyDictionary<string, ScoreboardDisplayObjective> ListObjective Gets the list display objective. public ScoreboardDisplayObjective? ListObjective { get; } Property Value ScoreboardDisplayObjective Objectives Gets the objectives in the scoreboard. public IReadOnlyDictionary<string, ScoreboardObjective> Objectives { get; } Property Value IReadOnlyDictionary<string, ScoreboardObjective> SidebarObjective Gets the sidebar display objective. public ScoreboardDisplayObjective? SidebarObjective { get; } Property Value ScoreboardDisplayObjective Methods AddScore(ScoreboardObjective?, Entity, int) Adds to the score for the specified objective and entity or player. public int? AddScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. value int The value to add. Returns int? The resulting score, or null if not found or invalid. AddScore(ScoreboardObjective?, ScoreboardIdentity?, int) Adds to the score for the specified objective and identity. public int? AddScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. value int The value to add. Returns int? The resulting score, or null if not found or invalid. AddScore(ScoreboardObjective?, string, int) Adds to the score for the specified objective and fake player. public int? AddScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. value int The value to add. Returns int? The resulting score, or null if not found or invalid. AddScore(string, Entity, int) Adds to the score for the specified objective name and entity or player. public int? AddScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. value int The value to add. Returns int? The resulting score, or null if not found or invalid. AddScore(string, ScoreboardIdentity?, int) Adds to the score for the specified objective name and identity. public int? AddScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. value int The value to add. Returns int? The resulting score, or null if not found or invalid. AddScore(string, string, int) Adds to the score for the specified objective name and fake player. public int? AddScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. value int The value to add. Returns int? The resulting score, or null if not found or invalid. ClearDisplayObjective(ScoreboardDisplayObjectivePosition) Clears the display objective at the specified position enum. public void ClearDisplayObjective(ScoreboardDisplayObjectivePosition position) Parameters position ScoreboardDisplayObjectivePosition The display position as an enum. ClearDisplayObjective(string) Clears the display objective at the specified position. public void ClearDisplayObjective(string position) Parameters position string The display position. ClearScore(ScoreboardObjective?, Entity) Clears the score for the specified objective and entity or player. public void ClearScore(ScoreboardObjective? objective, Entity entityOrPlayer) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. ClearScore(ScoreboardObjective?, ScoreboardIdentity?) Clears the score for the specified objective and identity. public void ClearScore(ScoreboardObjective? objective, ScoreboardIdentity? identity) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. ClearScore(ScoreboardObjective?, string) Clears the score for the specified objective and fake player. public void ClearScore(ScoreboardObjective? objective, string fakePlayer) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. ClearScore(string, Entity) Clears the score for the specified objective name and entity or player. public void ClearScore(string objectiveName, Entity entityOrPlayer) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. ClearScore(string, ScoreboardIdentity?) Clears the score for the specified objective name and identity. public void ClearScore(string objectiveName, ScoreboardIdentity? identity) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. ClearScore(string, string) Clears the score for the specified objective name and fake player. public void ClearScore(string objectiveName, string fakePlayer) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. GetDisplayObjective(ScoreboardDisplayObjectivePosition) Gets a display objective by position enum. public ScoreboardDisplayObjective? GetDisplayObjective(ScoreboardDisplayObjectivePosition position) Parameters position ScoreboardDisplayObjectivePosition The display position as an enum. Returns ScoreboardDisplayObjective The ScoreboardDisplayObjective, or null if not found. GetDisplayObjective(string) Gets a display objective by position. public ScoreboardDisplayObjective? GetDisplayObjective(string position) Parameters position string The display position (e.g., sidebar, list, belowname). Returns ScoreboardDisplayObjective The ScoreboardDisplayObjective, or null if not found. GetEntityIdentity(Entity) Gets the identity for an entity or player. public ScoreboardIdentity? GetEntityIdentity(Entity entityOrPlayer) Parameters entityOrPlayer Entity The entity or player. Returns ScoreboardIdentity The ScoreboardIdentity for the entity or player, or null if not found. GetEntityIdentity(ulong) Gets the identity for an entity by unique ID. public ScoreboardIdentity? GetEntityIdentity(ulong entityUniqueId) Parameters entityUniqueId ulong The unique ID of the entity. Returns ScoreboardIdentity The ScoreboardIdentity for the entity, or null if not found. GetFakePlayerIdentity(string) Gets the identity for a fake player by name. public ScoreboardIdentity? GetFakePlayerIdentity(string name) Parameters name string The name of the fake player. Returns ScoreboardIdentity The ScoreboardIdentity for the fake player, or null if not found. GetObjective(string) Gets a scoreboard objective by name. public ScoreboardObjective? GetObjective(string name) Parameters name string The name of the objective. Returns ScoreboardObjective The ScoreboardObjective, or null if not found. GetPlayerIdentity(ulong) Gets the identity for a player by unique ID. public ScoreboardIdentity? GetPlayerIdentity(ulong playerUniqueId) Parameters playerUniqueId ulong The unique ID of the player. Returns ScoreboardIdentity The ScoreboardIdentity for the player, or null if not found. GetScore(ScoreboardObjective?, Entity) Gets the score for the specified objective and entity or player. public int? GetScore(ScoreboardObjective? objective, Entity entityOrPlayer) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. Returns int? The score, or null if not found or invalid. GetScore(ScoreboardObjective?, ScoreboardIdentity?) Gets the score for the specified objective and identity. public int? GetScore(ScoreboardObjective? objective, ScoreboardIdentity? identity) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. Returns int? The score, or null if not found or invalid. GetScore(ScoreboardObjective?, string) Gets the score for the specified objective and fake player. public int? GetScore(ScoreboardObjective? objective, string fakePlayer) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. Returns int? The score, or null if not found or invalid. GetScore(string, Entity) Gets the score for the specified objective name and entity or player. public int? GetScore(string objectiveName, Entity entityOrPlayer) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. Returns int? The score, or null if not found or invalid. GetScore(string, ScoreboardIdentity?) Gets the score for the specified objective name and identity. public int? GetScore(string objectiveName, ScoreboardIdentity? identity) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. Returns int? The score, or null if not found or invalid. GetScore(string, string) Gets the score for the specified objective name and fake player. public int? GetScore(string objectiveName, string fakePlayer) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. Returns int? The score, or null if not found or invalid. ModifyScore(ScoreboardObjective?, Entity, ScoreboardScoreOperation, int) Modifies the score for the specified objective and entity or player. public int? ModifyScore(ScoreboardObjective? objective, Entity entityOrPlayer, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. ModifyScore(ScoreboardObjective?, ScoreboardIdentity?, ScoreboardScoreOperation, int) Modifies the score for the specified objective and identity using the given operation and value. public int? ModifyScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. ModifyScore(ScoreboardObjective?, string, ScoreboardScoreOperation, int) Modifies the score for the specified objective and fake player. public int? ModifyScore(ScoreboardObjective? objective, string fakePlayer, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. ModifyScore(string, Entity, ScoreboardScoreOperation, int) Modifies the score for the specified objective name and entity or player. public int? ModifyScore(string objectiveName, Entity entityOrPlayer, ScoreboardScoreOperation operation, int value) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. ModifyScore(string, ScoreboardIdentity?, ScoreboardScoreOperation, int) Modifies the score for the specified objective name and identity. public int? ModifyScore(string objectiveName, ScoreboardIdentity? identity, ScoreboardScoreOperation operation, int value) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. ModifyScore(string, string, ScoreboardScoreOperation, int) Modifies the score for the specified objective name and fake player. public int? ModifyScore(string objectiveName, string fakePlayer, ScoreboardScoreOperation operation, int value) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. operation ScoreboardScoreOperation The score operation. value int The value to use in the operation. Returns int? The resulting score, or null if not found or invalid. SetDisplayObjective(ScoreboardObjective?, ScoreboardDisplayObjectivePosition, ScoreboardObjectiveSortOrder) Sets the display objective by objective and position enum. public void SetDisplayObjective(ScoreboardObjective? objective, ScoreboardDisplayObjectivePosition position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Ascending) Parameters objective ScoreboardObjective The objective to display. position ScoreboardDisplayObjectivePosition The display position as an enum. sortOrder ScoreboardObjectiveSortOrder The sort order for the objective. SetDisplayObjective(ScoreboardObjective?, string, ScoreboardObjectiveSortOrder) Sets the display objective at the specified position. public void SetDisplayObjective(ScoreboardObjective? objective, string position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Descending) Parameters objective ScoreboardObjective The objective to display. position string The display position. sortOrder ScoreboardObjectiveSortOrder The sort order for the objective. SetDisplayObjective(string, ScoreboardDisplayObjectivePosition, ScoreboardObjectiveSortOrder) Sets the display objective by objective name and position enum. public void SetDisplayObjective(string objectiveName, ScoreboardDisplayObjectivePosition position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Ascending) Parameters objectiveName string The name of the objective. position ScoreboardDisplayObjectivePosition The display position as an enum. sortOrder ScoreboardObjectiveSortOrder The sort order for the objective. SetDisplayObjective(string, string, ScoreboardObjectiveSortOrder) Sets the display objective by objective name and position. public void SetDisplayObjective(string objectiveName, string position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Descending) Parameters objectiveName string The name of the objective. position string The display position. sortOrder ScoreboardObjectiveSortOrder The sort order for the objective. SetScore(ScoreboardObjective?, Entity, int) Sets the score for the specified objective and entity or player. public void SetScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. value int The value to set. SetScore(ScoreboardObjective?, ScoreboardIdentity?, int) Sets the score for the specified objective and identity. public void SetScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. value int The value to set. SetScore(ScoreboardObjective?, string, int) Sets the score for the specified objective and fake player. public void SetScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. value int The value to set. SetScore(string, Entity, int) Sets the score for the specified objective name and entity or player. public void SetScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. value int The value to set. SetScore(string, ScoreboardIdentity?, int) Sets the score for the specified objective name and identity. public void SetScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. value int The value to set. SetScore(string, string, int) Sets the score for the specified objective name and fake player. public void SetScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. value int The value to set. SubtractScore(ScoreboardObjective?, Entity, int) Subtracts from the score for the specified objective and entity or player. public int? SubtractScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. entityOrPlayer Entity The entity or player. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid. SubtractScore(ScoreboardObjective?, ScoreboardIdentity?, int) Subtracts from the score for the specified objective and identity. public int? SubtractScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective The scoreboard objective. identity ScoreboardIdentity The scoreboard identity. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid. SubtractScore(ScoreboardObjective?, string, int) Subtracts from the score for the specified objective and fake player. public int? SubtractScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective The scoreboard objective. fakePlayer string The fake player name. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid. SubtractScore(string, Entity, int) Subtracts from the score for the specified objective name and entity or player. public int? SubtractScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string The name of the objective. entityOrPlayer Entity The entity or player. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid. SubtractScore(string, ScoreboardIdentity?, int) Subtracts from the score for the specified objective name and identity. public int? SubtractScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string The name of the objective. identity ScoreboardIdentity The scoreboard identity. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid. SubtractScore(string, string, int) Subtracts from the score for the specified objective name and fake player. public int? SubtractScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string The name of the objective. fakePlayer string The fake player name. value int The value to subtract. Returns int? The resulting score, or null if not found or invalid."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.html",
    "title": "Class ScoreboardDisplayObjective | Onix Plugin Documentation",
    "summary": "Class ScoreboardDisplayObjective Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Represents a display objective in the scoreboard, providing access to sort order and ordered scores. public class ScoreboardDisplayObjective : ScoreboardObjective Inheritance object MemoryAddressContainer ScoreboardObjective ScoreboardDisplayObjective Inherited Members ScoreboardObjective.Scores ScoreboardObjective.Name ScoreboardObjective.DisplayName ScoreboardObjective.IsReadOnly ScoreboardObjective.CriteriaName ScoreboardObjective.RenderType ScoreboardObjective.GetScore(ScoreboardIdentity) ScoreboardObjective.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SortOrder Gets the sort order for the display objective. public ScoreboardObjectiveSortOrder SortOrder { get; } Property Value ScoreboardObjectiveSortOrder Methods GetOrderedScores() Gets the ordered scores for the display objective using the default sort order. public List<KeyValuePair<ScoreboardIdentity, int>> GetOrderedScores() Returns List<KeyValuePair<ScoreboardIdentity, int>> A list of key-value pairs of scoreboard identities and their scores, ordered by the sort order. GetOrderedScores(ScoreboardObjectiveSortOrder) Gets the ordered scores for the display objective using the specified sort order. public List<KeyValuePair<ScoreboardIdentity, int>> GetOrderedScores(ScoreboardObjectiveSortOrder overridenSortOrder) Parameters overridenSortOrder ScoreboardObjectiveSortOrder The sort order to use. Returns List<KeyValuePair<ScoreboardIdentity, int>> A list of key-value pairs of scoreboard identities and their scores, ordered by the specified sort order."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition.html",
    "title": "Enum ScoreboardDisplayObjectivePosition | Onix Plugin Documentation",
    "summary": "Enum ScoreboardDisplayObjectivePosition Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Specifies the display position for a scoreboard objective. public enum ScoreboardDisplayObjectivePosition Fields BelowName = 2 BelowName display position. List = 1 List display position. Sidebar = 0 Sidebar display position."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.html",
    "title": "Enum ScoreboardIdentity.IdentityType | Onix Plugin Documentation",
    "summary": "Enum ScoreboardIdentity.IdentityType Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardIdentity.IdentityType Fields Entity = 2 Entity identity type. FakePlayer = 3 Fake player identity type. Invalid = 0 Invalid identity type. Player = 1 Player identity type."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.html",
    "title": "Class ScoreboardIdentity | Onix Plugin Documentation",
    "summary": "Class ScoreboardIdentity Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll public class ScoreboardIdentity Inheritance object ScoreboardIdentity Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties EntityUniqueId Gets the unique ID if this identity is an entity or player; otherwise, null. public ulong? EntityUniqueId { get; } Property Value ulong? FakePlayerName Gets the fake player name if this identity is a fake player; otherwise, null. public string? FakePlayerName { get; } Property Value string IsEntityOrPlayer Gets a value indicating whether this identity is an entity or player. public bool IsEntityOrPlayer { get; } Property Value bool IsHiddenFakePlayer Gets a value indicating whether this identity is a hidden fake player. public bool IsHiddenFakePlayer { get; } Property Value bool PlayerUniqueId Gets the player unique ID if this identity is an entity or player; otherwise, null. public ulong? PlayerUniqueId { get; } Property Value ulong? ScoreboardId Gets the scoreboard ID for this identity. public ulong ScoreboardId { get; } Property Value ulong Type Gets the type of the identity. public ScoreboardIdentity.IdentityType Type { get; } Property Value ScoreboardIdentity.IdentityType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetDisplayName(RuntimeWorld, bool) Gets the display name for this identity in the specified world. public string GetDisplayName(RuntimeWorld world, bool includeEntityNametag = true) Parameters world RuntimeWorld The runtime world. includeEntityNametag bool By default it just puts the entity id with no effort. Returns string The display name for the identity. GetEntity(RuntimeWorld) Gets the entity associated with this identity from the specified world. public Entity? GetEntity(RuntimeWorld world) Parameters world RuntimeWorld The runtime world. Returns Entity The entity, or null if not found or not an entity/player. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetPlayer(RuntimeWorld) Gets the player associated with this identity from the specified world. public Player? GetPlayer(RuntimeWorld world) Parameters world RuntimeWorld The runtime world. Returns Player The player, or null if not found or not a player. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetServerPlayer(RuntimeWorld) Gets the server player associated with this identity from the specified world. public ServerPlayer? GetServerPlayer(RuntimeWorld world) Parameters world RuntimeWorld The runtime world. Returns ServerPlayer The server player, or null if not found or not a server player. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.html",
    "title": "Class ScoreboardObjective | Onix Plugin Documentation",
    "summary": "Class ScoreboardObjective Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Represents a scoreboard objective, providing access to its properties and scores. public class ScoreboardObjective : MemoryAddressContainer Inheritance object MemoryAddressContainer ScoreboardObjective Derived ScoreboardDisplayObjective Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CriteriaName Gets the criteria name for the objective. public string CriteriaName { get; } Property Value string DisplayName Gets the display name of the objective. public string DisplayName { get; } Property Value string IsReadOnly Gets a value indicating whether the objective is read-only. public bool IsReadOnly { get; } Property Value bool Name Gets the name of the objective. public string Name { get; } Property Value string RenderType Gets the render type for the objective. public ScoreboardObjectiveRenderType RenderType { get; } Property Value ScoreboardObjectiveRenderType Scores Gets the scores for this objective. public IReadOnlyDictionary<ScoreboardIdentity, int> Scores { get; } Property Value IReadOnlyDictionary<ScoreboardIdentity, int> Methods GetScore(ScoreboardIdentity?) Gets the score for the specified identity. public int? GetScore(ScoreboardIdentity? identity) Parameters identity ScoreboardIdentity The scoreboard identity. Returns int? The score for the identity, or null if not found. ToString() Returns a string representation of the scoreboard objective. public override string ToString() Returns string A string containing the name and display name."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveRenderType.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveRenderType.html",
    "title": "Enum ScoreboardObjectiveRenderType | Onix Plugin Documentation",
    "summary": "Enum ScoreboardObjectiveRenderType Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Specifies the render type for a scoreboard objective. public enum ScoreboardObjectiveRenderType Fields Hearts = 1 Hearts render type. Integer = 0 Integer render type."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder.html",
    "title": "Enum ScoreboardObjectiveSortOrder | Onix Plugin Documentation",
    "summary": "Enum ScoreboardObjectiveSortOrder Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Specifies the sort order for a scoreboard objective. public enum ScoreboardObjectiveSortOrder Fields Ascending = 0 Ascending sort order. Descending = 1 Descending sort order."
  },
  "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.html",
    "title": "Enum ScoreboardScoreOperation | Onix Plugin Documentation",
    "summary": "Enum ScoreboardScoreOperation Namespace OnixRuntime.Api.World.Scoreboards Assembly OnixRuntime.dll Specifies the operation to perform on a scoreboard score. public enum ScoreboardScoreOperation Fields Add = 1 Max = 4 Min = 3 Set = 0 Subtract = 2"
  },
  "docs/OnixRuntime.Api.World.Scoreboards.html": {
    "href": "docs/OnixRuntime.Api.World.Scoreboards.html",
    "title": "Namespace OnixRuntime.Api.World.Scoreboards | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.World.Scoreboards Classes Scoreboard Represents a scoreboard, providing access to objectives, display objectives, and score manipulation methods. ScoreboardDisplayObjective Represents a display objective in the scoreboard, providing access to sort order and ordered scores. ScoreboardIdentity ScoreboardObjective Represents a scoreboard objective, providing access to its properties and scores. Enums ScoreboardDisplayObjectivePosition Specifies the display position for a scoreboard objective. ScoreboardIdentity.IdentityType ScoreboardObjectiveRenderType Specifies the render type for a scoreboard objective. ScoreboardObjectiveSortOrder Specifies the sort order for a scoreboard objective. ScoreboardScoreOperation Specifies the operation to perform on a scoreboard score."
  },
  "docs/OnixRuntime.Api.World.WorldBlocks.BlockUpdateType.html": {
    "href": "docs/OnixRuntime.Api.World.WorldBlocks.BlockUpdateType.html",
    "title": "Enum WorldBlocks.BlockUpdateType | Onix Plugin Documentation",
    "summary": "Enum WorldBlocks.BlockUpdateType Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the type of block update to perform. [Flags] public enum WorldBlocks.BlockUpdateType Fields All = Default | NoGraphicsAndNoPriority AllButNoGraphics = Neighbors | NetworkAndNoPriority Default = Neighbors | Network Neighbors = 1 NeighborsAndNetwork = Neighbors | Network NeighborsAndNoGraphics = Neighbors | NoGraphics NeighborsAndNoPriority = Neighbors | Priority Network = 2 NetworkAndNoGraphics = Network | NoGraphics NetworkAndNoPriority = Network | Priority NoGraphics = 4 NoGraphicsAndNoPriority = NoGraphics | Priority None = 0 Priority = 8"
  },
  "docs/OnixRuntime.Api.World.WorldBlocks.html": {
    "href": "docs/OnixRuntime.Api.World.WorldBlocks.html",
    "title": "Class WorldBlocks | Onix Plugin Documentation",
    "summary": "Class WorldBlocks Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Provides access to world blocks, including block retrieval, setting, biome, lighting, collisions, and raycasting. public class WorldBlocks : MemoryAddressContainer Inheritance object MemoryAddressContainer WorldBlocks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dimension Gets the dimension associated with these world blocks. public Dimension Dimension { get; } Property Value Dimension MaxHeight Gets the maximum height of the world. public int MaxHeight { get; } Property Value int MinHeight Gets the minimum height of the world. public int MinHeight { get; } Property Value int World Gets the runtime world associated with these world blocks. public RuntimeWorld World { get; } Property Value RuntimeWorld WorldChunks Going this path could lead to instabilities and crashes. public WorldChunks WorldChunks { get; } Property Value WorldChunks Methods GetBiome(BlockPos) Gets the biome at the specified world position. public Biome GetBiome(BlockPos worldPosition) Parameters worldPosition BlockPos The world position to get the biome from. Returns Biome The Biome at the specified position. GetBiomeTintedColors(BlockPos) Gets the biome tint colors at the specified world position. public BiomeTintColors GetBiomeTintedColors(BlockPos worldPosition) Parameters worldPosition BlockPos The world position to get biome tint colors from. Returns BiomeTintColors The BiomeTintColors at the specified position. GetBlock(BlockPos) Gets the block at the specified world position. public Block GetBlock(BlockPos worldPosition) Parameters worldPosition BlockPos The world position of the block. Returns Block The Block at the specified position. GetBlock(int, int, int) Gets the block at the specified coordinates. public Block GetBlock(int x, int y, int z) Parameters x int The x-coordinate. y int The y-coordinate. z int The z-coordinate. Returns Block The Block at the specified coordinates. GetBlockEntity(BlockPos) Gets the block entity at the specified world position. public BlockEntity? GetBlockEntity(BlockPos worldPosition) Parameters worldPosition BlockPos The world position of the block entity. Returns BlockEntity The BlockEntity at the specified position, or null if none exists. GetBlockEntity(int, int, int) Gets the block entity at the specified coordinates. public BlockEntity? GetBlockEntity(int x, int y, int z) Parameters x int The x-coordinate. y int The y-coordinate. z int The z-coordinate. Returns BlockEntity The BlockEntity at the specified coordinates, or null if none exists. GetBrightness(BlockPos) Gets the brightness levels at the specified world position. public BrightnessLevels GetBrightness(BlockPos worldPosition) Parameters worldPosition BlockPos The world position to get brightness from. Returns BrightnessLevels The BrightnessLevels at the specified position. GetChunk(ChunkPos, bool) Accessing chunk data could be unstable and lead to crashes if the chunk were to unload before you finish using it. public WorldChunk? GetChunk(ChunkPos chunkPosition, bool mustBeLoaded = true) Parameters chunkPosition ChunkPos The position of the chunk to get. mustBeLoaded bool If the chunk has to be fully loaded and ready to obtain it. Returns WorldChunk The WorldChunk at the specified position, or null if not found. GetCollisions(BlockPos, bool) Gets the collision bounding boxes at the specified block position. The positions returned are in world coordinates. public BoundingBox[] GetCollisions(BlockPos position, bool includeUnloadedChunks = true) Parameters position BlockPos The block position to check for collisions. includeUnloadedChunks bool Whether to include unloaded chunks. Returns BoundingBox[] An array of BoundingBox representing the collisions. GetCollisions(BoundingBox, bool) Gets the collision bounding boxes in the specified area. The positions returned are in world coordinates. public BoundingBox[] GetCollisions(BoundingBox areaToCheck, bool includeUnloadedChunks = true) Parameters areaToCheck BoundingBox The area to check for collisions. includeUnloadedChunks bool Whether to include unloaded chunks. Returns BoundingBox[] An array of BoundingBox representing the collisions. GetMapColor(BlockPos) Gets the map color at the specified world position. public ColorF GetMapColor(BlockPos worldPosition) Parameters worldPosition BlockPos The world position to get the map color from. Returns ColorF The ColorF representing the map color at the specified position. Raycast(Vec3, Vec3, bool, bool, bool, bool, int) Performs a raycast in the world. public RaycastResult Raycast(Vec3 origin, Vec3 target, bool solidBlocksOnly = true, bool hitLiquid = false, bool fullBlocksOnly = false, bool ignoreBorderBlocks = false, int maxDistance = 500000) Parameters origin Vec3 The origin of the ray. target Vec3 The target of the ray. solidBlocksOnly bool Whether to only hit solid blocks. hitLiquid bool Whether to hit liquid blocks. fullBlocksOnly bool Whether to only hit full blocks. ignoreBorderBlocks bool Whether to ignore border blocks. maxDistance int The maximum distance for the raycast. Returns RaycastResult The RaycastResult of the raycast. SetBlock(BlockPos, Block, BlockUpdateType) Sets the block at the specified world position. public void SetBlock(BlockPos worldPosition, Block block, WorldBlocks.BlockUpdateType updateType = BlockUpdateType.Default) Parameters worldPosition BlockPos The world position to set the block at. block Block The block to set. updateType WorldBlocks.BlockUpdateType The type of block update to perform."
  },
  "docs/OnixRuntime.Api.World.WorldChunk.ChunkState.html": {
    "href": "docs/OnixRuntime.Api.World.WorldChunk.ChunkState.html",
    "title": "Enum WorldChunk.ChunkState | Onix Plugin Documentation",
    "summary": "Enum WorldChunk.ChunkState Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Specifies the state of a chunk. public enum WorldChunk.ChunkState Fields CheckingForReplacementData = 5 Generated = 2 Generating = 1 Lighting = 7 LightingFinished = 8 Loaded = 9 NeedsLighting = 6 PostProcessed = 4 PostProcessing = 3 Unloaded = 0"
  },
  "docs/OnixRuntime.Api.World.WorldChunk.FoundBlock.html": {
    "href": "docs/OnixRuntime.Api.World.WorldChunk.FoundBlock.html",
    "title": "Struct WorldChunk.FoundBlock | Onix Plugin Documentation",
    "summary": "Struct WorldChunk.FoundBlock Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a block found in the chunk using FindBlock. public struct WorldChunk.FoundBlock Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Data The block's data value, what Block.Data would give you. public int Data Field Value int Position The position of the block in the world. public BlockPos Position Field Value BlockPos Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "docs/OnixRuntime.Api.World.WorldChunk.html": {
    "href": "docs/OnixRuntime.Api.World.WorldChunk.html",
    "title": "Class WorldChunk | Onix Plugin Documentation",
    "summary": "Class WorldChunk Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a chunk in the world, providing access to its properties, state, and block data. public class WorldChunk : MemoryAddressContainer Inheritance object MemoryAddressContainer WorldChunk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dimension Gets the dimension associated with this chunk. public Dimension Dimension { get; } Property Value Dimension LastTick Gets the last tick value for the chunk. public int LastTick { get; } Property Value int LoadState Gets the current load state of the chunk. public WorldChunk.ChunkState LoadState { get; } Property Value WorldChunk.ChunkState MaxHeight Gets the maximum height of the chunk. public int MaxHeight { get; } Property Value int MinHeight Gets the minimum height of the chunk. public int MinHeight { get; } Property Value int Position Gets the chunk position. public ChunkPos Position { get; } Property Value ChunkPos World Gets the runtime world associated with this chunk. public RuntimeWorld World { get; } Property Value RuntimeWorld WorldPosMax Gets the maximum world position of the chunk. public BlockPos WorldPosMax { get; } Property Value BlockPos WorldPosMin Gets the minimum world position of the chunk. public BlockPos WorldPosMin { get; } Property Value BlockPos Methods FindBlocks(Block?, bool) Finds every position/instances of that block in the chunk. public WorldChunk.FoundBlock[] FindBlocks(Block? block, bool discriminateState) Parameters block Block The block to search for. discriminateState bool True if only that state/data of the block will be considered the same blocks, false if any state/data of that block is fine. Returns FoundBlock[] The list of blocks it found. This has the Data and it's position. GetBlock(int, int, int) Gets the block at the specified coordinates within the chunk. public Block? GetBlock(int inChunkX, int inChunkY, int inChunkZ) Parameters inChunkX int The X coordinate within the chunk. inChunkY int The Y coordinate within the chunk. inChunkZ int The Z coordinate within the chunk. Returns Block The Block at the specified coordinates, or null if not found. GetHeightAt(int, int) Gets the height at the specified relative coordinates in the chunk. public int GetHeightAt(int relativeX, int relativeZ) Parameters relativeX int The relative X coordinate in the chunk. relativeZ int The relative Z coordinate in the chunk. Returns int The height at the specified coordinates. GetRainHeightAt(int, int) Gets the rain height at the specified relative coordinates in the chunk. public int GetRainHeightAt(int relativeX, int relativeZ) Parameters relativeX int The relative X coordinate in the chunk. relativeZ int The relative Z coordinate in the chunk. Returns int The rain height at the specified coordinates."
  },
  "docs/OnixRuntime.Api.World.WorldChunks.html": {
    "href": "docs/OnixRuntime.Api.World.WorldChunks.html",
    "title": "Class WorldChunks | Onix Plugin Documentation",
    "summary": "Class WorldChunks Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Represents a collection of world chunks, providing access to chunk positions, dimension, world, and chunk retrieval. public class WorldChunks : MemoryAddressContainer, IEnumerable<WorldChunk>, IEnumerable Inheritance object MemoryAddressContainer WorldChunks Implements IEnumerable<WorldChunk> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChunkPositions Note that this may contain chunks that are no longer valid or not loaded. You should use GetChunk to get only valid/loaded chunks or the IEnumerable public ChunkPos[] ChunkPositions { get; } Property Value ChunkPos[] Dimension Gets the dimension associated with these world chunks. public Dimension Dimension { get; } Property Value Dimension World Gets the runtime world associated with these world chunks. public RuntimeWorld World { get; } Property Value RuntimeWorld Methods FindBlocks(Block?, bool) Finds every position/instances of that block in every loaded chunks. public WorldChunk.FoundBlock[] FindBlocks(Block? block, bool discriminateState) Parameters block Block The block to search for. discriminateState bool True if only that state/data of the block will be considered the same blocks, false if any state/data of that block is fine. Returns FoundBlock[] The list of blocks it found. This has the Data and it's position. GetChunk(ChunkPos, bool) Gets the chunk at the specified position. public WorldChunk? GetChunk(ChunkPos pos, bool requireLoaded = true) Parameters pos ChunkPos The chunk position. requireLoaded bool Whether to require the chunk to be loaded. Returns WorldChunk The WorldChunk at the specified position, or null if not found or not loaded. GetEnumerator() Returns an enumerator that iterates through the loaded world chunks. public IEnumerator<WorldChunk> GetEnumerator() Returns IEnumerator<WorldChunk> An enumerator for the loaded world chunks. GetEnumerator(bool) Returns an enumerator that iterates through the world chunks, optionally requiring them to be loaded. public IEnumerator<WorldChunk> GetEnumerator(bool requireLoaded) Parameters requireLoaded bool Whether to require the chunk to be loaded. Returns IEnumerator<WorldChunk> An enumerator for the world chunks."
  },
  "docs/OnixRuntime.Api.World.WorldChunksIterator.html": {
    "href": "docs/OnixRuntime.Api.World.WorldChunksIterator.html",
    "title": "Class WorldChunksIterator | Onix Plugin Documentation",
    "summary": "Class WorldChunksIterator Namespace OnixRuntime.Api.World Assembly OnixRuntime.dll Enumerates the world chunks in a WorldChunks collection. public class WorldChunksIterator : IEnumerator<WorldChunk>, IEnumerator, IDisposable Inheritance object WorldChunksIterator Implements IEnumerator<WorldChunk> IEnumerator IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldChunksIterator(WorldChunks, bool) public WorldChunksIterator(WorldChunks chunks, bool requireLoaded = true) Parameters chunks WorldChunks requireLoaded bool Properties Current Gets the element in the collection at the current position of the enumerator. public WorldChunk Current { get; } Property Value WorldChunk The element in the collection at the current position of the enumerator. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "docs/OnixRuntime.Api.World.html": {
    "href": "docs/OnixRuntime.Api.World.html",
    "title": "Namespace OnixRuntime.Api.World | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api.World Classes Biome Represents a biome in the world, providing access to its properties such as temperature, humidity, and densities. Block Represents a block in the world, providing access to its properties, states, and permutations. BlockEntity Represents a block entity in the world, providing access to its block, position, bounding box, and container. BlockRegistry Provides access to the block registry, allowing retrieval of blocks by name, state, runtime ID, or index. BlockState Represents a block state, providing access to its properties and NBT conversion. Dimension Represents a dimension in the world, providing access to its type, name, world, blocks, chunks, and weather. EndDimension Represents the End dimension. NetherDimension Represents the Nether dimension. OverworldDimension Represents the Overworld dimension. RaycastResult Represents the result of a raycast operation, including hit type, position, face, and entity. RuntimeWorld Represents a runtime world, providing access to world properties, players, entities, registries, and utility methods. WorldBlocks Provides access to world blocks, including block retrieval, setting, biome, lighting, collisions, and raycasting. WorldChunk Represents a chunk in the world, providing access to its properties, state, and block data. WorldChunks Represents a collection of world chunks, providing access to chunk positions, dimension, world, and chunk retrieval. WorldChunksIterator Enumerates the world chunks in a WorldChunks collection. Structs BiomeTintColors Represents the biome tint colors at a block position. BrightnessLevels Represents the brightness levels at a block position. DimensionWeather Represents the weather state of a dimension, including rain, lightning, and fog levels. WorldChunk.FoundBlock Represents a block found in the chunk using FindBlock. Enums BlockFace Specifies the face of a block that was hit by a raycast. CreativeItemCategory Specifies the creative item category for a block. Difficulty Specifies the difficulty level of the world. DimensionType Specifies the type of dimension. RaycastResultType Specifies the type of result returned by a raycast operation. WorldBlocks.BlockUpdateType Specifies the type of block update to perform. WorldChunk.ChunkState Specifies the state of a chunk."
  },
  "docs/OnixRuntime.Api.html": {
    "href": "docs/OnixRuntime.Api.html",
    "title": "Namespace OnixRuntime.Api | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Api Classes Logger Onix Provides static access to core Onix runtime components, such as game, events, player, world, input, server, connection, rendering, client, and GUI. OnixClientThings Provides access to Onix client-specific features such as notifications, tooltips, modules, and settings. OnixGame Provides access to core Onix game features, including version, pack managers, chat, commands, and language code. Enums ClientNotificationType Specifies the type of client notification. Logger.Level"
  },
  "docs/OnixRuntime.CodeGenerators.OnixSettingRedirectorCodeGenerator.html": {
    "href": "docs/OnixRuntime.CodeGenerators.OnixSettingRedirectorCodeGenerator.html",
    "title": "Class OnixSettingRedirectorCodeGenerator | Onix Plugin Documentation",
    "summary": "Class OnixSettingRedirectorCodeGenerator Namespace OnixRuntime.CodeGenerators Assembly OnixRuntime.CodeGenerators.dll [Generator] public class OnixSettingRedirectorCodeGenerator : ISourceGenerator Inheritance object OnixSettingRedirectorCodeGenerator Implements ISourceGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(GeneratorExecutionContext) Called to perform source generation. A generator can use the context to add source files via the AddSource(string, SourceText) method. public void Execute(GeneratorExecutionContext context) Parameters context GeneratorExecutionContext The GeneratorExecutionContext to add source to Remarks This call represents the main generation step. It is called after a Compilation is created that contains the user written code. A generator can use the Compilation property to discover information about the users compilation and make decisions on what source to provide. GetVisibility(SyntaxTokenList) public static string GetVisibility(SyntaxTokenList classDeclaration) Parameters classDeclaration SyntaxTokenList Returns string Initialize(GeneratorInitializationContext) Called before generation occurs. A generator can use the context to register callbacks required to perform generation. public void Initialize(GeneratorInitializationContext context) Parameters context GeneratorInitializationContext The GeneratorInitializationContext to register callbacks on"
  },
  "docs/OnixRuntime.CodeGenerators.html": {
    "href": "docs/OnixRuntime.CodeGenerators.html",
    "title": "Namespace OnixRuntime.CodeGenerators | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.CodeGenerators Classes OnixSettingRedirectorCodeGenerator"
  },
  "docs/OnixRuntime.Core.ClientNotificationType.html": {
    "href": "docs/OnixRuntime.Core.ClientNotificationType.html",
    "title": "Enum ClientNotificationType | Onix Plugin Documentation",
    "summary": "Enum ClientNotificationType Namespace OnixRuntime.Core Assembly OnixRuntime.dll public enum ClientNotificationType Fields Banner = 0 Tray = 1"
  },
  "docs/OnixRuntime.Core.Connection.ConnectionInfo.html": {
    "href": "docs/OnixRuntime.Core.Connection.ConnectionInfo.html",
    "title": "Class ConnectionInfo | Onix Plugin Documentation",
    "summary": "Class ConnectionInfo Namespace OnixRuntime.Core.Connection Assembly OnixRuntime.dll public class ConnectionInfo : MemoryAddressContainer Inheritance object MemoryAddressContainer ConnectionInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AveragePing public int AveragePing { get; } Property Value int ConnectedIp public string ConnectedIp { get; } Property Value string CurrentPing public int CurrentPing { get; } Property Value int IsLocal public bool IsLocal { get; } Property Value bool JoinedIp public string JoinedIp { get; } Property Value string Port public int Port { get; } Property Value int Realm public RealmWorld? Realm { get; } Property Value RealmWorld"
  },
  "docs/OnixRuntime.Core.Connection.LocalGameServer.html": {
    "href": "docs/OnixRuntime.Core.Connection.LocalGameServer.html",
    "title": "Class LocalGameServer | Onix Plugin Documentation",
    "summary": "Class LocalGameServer Namespace OnixRuntime.Core.Connection Assembly OnixRuntime.dll public class LocalGameServer : MemoryAddressContainer Inheritance object MemoryAddressContainer LocalGameServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LocalPlayer public ServerPlayer? LocalPlayer { get; } Property Value ServerPlayer World public RuntimeWorld World { get; } Property Value RuntimeWorld Methods BroadcastTextMessage(string, ChatMessageType, string?) public void BroadcastTextMessage(string message, ChatMessageType type = ChatMessageType.Raw, string? username = null) Parameters message string type ChatMessageType username string"
  },
  "docs/OnixRuntime.Core.Connection.RealmWorld.html": {
    "href": "docs/OnixRuntime.Core.Connection.RealmWorld.html",
    "title": "Class RealmWorld | Onix Plugin Documentation",
    "summary": "Class RealmWorld Namespace OnixRuntime.Core.Connection Assembly OnixRuntime.dll public class RealmWorld : MemoryAddressContainer Inheritance object MemoryAddressContainer RealmWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClubId public string ClubId { get; } Property Value string Description public string Description { get; } Property Value string Name public string Name { get; } Property Value string OwnerXuid public string OwnerXuid { get; } Property Value string RealmId public ulong RealmId { get; } Property Value ulong"
  },
  "docs/OnixRuntime.Core.Connection.html": {
    "href": "docs/OnixRuntime.Core.Connection.html",
    "title": "Namespace OnixRuntime.Core.Connection | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Connection Classes ConnectionInfo LocalGameServer RealmWorld"
  },
  "docs/OnixRuntime.Core.Entities.CommandPermissionLevel.html": {
    "href": "docs/OnixRuntime.Core.Entities.CommandPermissionLevel.html",
    "title": "Enum CommandPermissionLevel | Onix Plugin Documentation",
    "summary": "Enum CommandPermissionLevel Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum CommandPermissionLevel Fields Admin = 2 Any = 0 GameDirectors = 1 Host = 3 Internal = 5 Owner = 4"
  },
  "docs/OnixRuntime.Core.Entities.Entity.html": {
    "href": "docs/OnixRuntime.Core.Entities.Entity.html",
    "title": "Class Entity | Onix Plugin Documentation",
    "summary": "Class Entity Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll Represents an entity in the world. Those functions are only available from a game logic thread. public class Entity : MemoryAddressContainer Inheritance object MemoryAddressContainer Entity Derived ItemEntity Mob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AliveDuration public TimeSpan AliveDuration { get; } Property Value TimeSpan AliveTicks public int AliveTicks { get; } Property Value int ArmorItems public virtual ItemStack[] ArmorItems { get; set; } Property Value ItemStack[] Attributes public Dictionary<EntityAttributeId, EntityAttribute> Attributes { get; } Property Value Dictionary<EntityAttributeId, EntityAttribute> BlockPosition public BlockPos BlockPosition { get; } Property Value BlockPos BootsItem public virtual ItemStack BootsItem { get; set; } Property Value ItemStack BoundingBox public BoundingBox BoundingBox { get; } Property Value BoundingBox BoundingBoxRaw public BoundingBox BoundingBoxRaw { get; } Property Value BoundingBox BoundingBoxSize public Vec2 BoundingBoxSize { get; } Property Value Vec2 Categories public EntityCategory Categories { get; } Property Value EntityCategory ChestplateItem public virtual ItemStack ChestplateItem { get; set; } Property Value ItemStack ChunkPosition public ChunkPos ChunkPosition { get; } Property Value ChunkPos Dimension public Dimension Dimension { get; } Property Value Dimension Effects public MobEffectInstance[] Effects { get; } Property Value MobEffectInstance[] HeightOffset public float HeightOffset { get; } Property Value float HelmetItem public virtual ItemStack HelmetItem { get; set; } Property Value ItemStack IsClientSide public bool IsClientSide { get; } Property Value bool IsTargetable public bool IsTargetable { get; } Property Value bool LeggingsItem public virtual ItemStack LeggingsItem { get; set; } Property Value ItemStack MainHandItem public virtual ItemStack MainHandItem { get; set; } Property Value ItemStack Nametag public string Nametag { get; set; } Property Value string OffhandItem public virtual ItemStack OffhandItem { get; set; } Property Value ItemStack Position public Vec3 Position { get; set; } Property Value Vec3 RawPosition public Tuple<Vec3, Vec3> RawPosition { get; } Property Value Tuple<Vec3, Vec3> Region public WorldBlocks Region { get; } Property Value WorldBlocks RiddenBy public Entity? RiddenBy { get; } Property Value Entity Riding public Entity? Riding { get; } Property Value Entity Rotation public Angles Rotation { get; } Property Value Angles RuntimeId public ulong RuntimeId { get; } Property Value ulong ScoreboardIdentity public ScoreboardIdentity? ScoreboardIdentity { get; } Property Value ScoreboardIdentity SimpleMolangVariables public Dictionary<string, float> SimpleMolangVariables { get; } Property Value Dictionary<string, float> StepHeight public float StepHeight { get; } Property Value float TypeName public string TypeName { get; } Property Value string TypeNameFull public string TypeNameFull { get; } Property Value string TypeNamespace public string TypeNamespace { get; } Property Value string UniqueId public ulong UniqueId { get; } Property Value ulong Velocity public Vec3 Velocity { get; } Property Value Vec3 World public RuntimeWorld World { get; } Property Value RuntimeWorld Methods ForwardPosition(float) public Vec3 ForwardPosition(float distance = 1) Parameters distance float Returns Vec3 GetAttribute(EntityAttributeId) public EntityAttribute GetAttribute(EntityAttributeId attributeId) Parameters attributeId EntityAttributeId Returns EntityAttribute GetAttribute(string) public EntityAttribute? GetAttribute(string attributeName) Parameters attributeName string Returns EntityAttribute HasCategory(EntityCategory) public bool HasCategory(EntityCategory category) Parameters category EntityCategory Returns bool HasFlag(EntityFlag) public bool HasFlag(EntityFlag flag) Parameters flag EntityFlag Returns bool SetFlag(EntityFlag, bool) public bool SetFlag(EntityFlag flag, bool value) Parameters flag EntityFlag value bool Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.Entities.EntityAttribute.html": {
    "href": "docs/OnixRuntime.Core.Entities.EntityAttribute.html",
    "title": "Class EntityAttribute | Onix Plugin Documentation",
    "summary": "Class EntityAttribute Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class EntityAttribute Inheritance object EntityAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultMaxValue public float DefaultMaxValue { get; } Property Value float DefaultMinValue public float DefaultMinValue { get; } Property Value float DefaultValue public float DefaultValue { get; } Property Value float Id public EntityAttributeId Id { get; } Property Value EntityAttributeId MaxValue public float MaxValue { get; } Property Value float MinValue public float MinValue { get; } Property Value float Name public string Name { get; } Property Value string Value public float Value { get; } Property Value float"
  },
  "docs/OnixRuntime.Core.Entities.EntityAttributeId.html": {
    "href": "docs/OnixRuntime.Core.Entities.EntityAttributeId.html",
    "title": "Enum EntityAttributeId | Onix Plugin Documentation",
    "summary": "Enum EntityAttributeId Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum EntityAttributeId Fields Absorption = 14 AttackDamage = 13 Exhaustion = 3 Experience = 5 FollowRange = 8 Health = 7 Hunger = 1 JumpStrength = 16 KnockbackResistance = 9 LavaMovementSpeed = 12 Level = 4 Luck = 15 MovementSpeed = 10 Saturation = 2 UnderwaterMovementSpeed = 11"
  },
  "docs/OnixRuntime.Core.Entities.EntityCategory.html": {
    "href": "docs/OnixRuntime.Core.Entities.EntityCategory.html",
    "title": "Enum EntityCategory | Onix Plugin Documentation",
    "summary": "Enum EntityCategory Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum EntityCategory : uint Fields Ambient = 2048 Animal = 16 Arthropod = 8192 Boat = 131072 BoatRideable = 131328 EvocationIllagerMonster = 4108 Humandoid = 8 HumanoidMonster = 12 Item = 1024 Minecart = 65536 MinecartRidable = 65792 Mob = 2 Monster = 4 NonTargetable = 262144 None = 0 Pathable = 64 Player = 1 Predictable = 524288 Ridable = 256 Tamable = 128 TamableAnimal = 144 Undead = 16384 UndeadMob = 16388 Villager = 4096 WaterAnimal = 48 WaterSpawning = 32 Zombie = 32768 ZombieMonster = 32772"
  },
  "docs/OnixRuntime.Core.Entities.EntityFlag.html": {
    "href": "docs/OnixRuntime.Core.Entities.EntityFlag.html",
    "title": "Enum EntityFlag | Onix Plugin Documentation",
    "summary": "Enum EntityFlag Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum EntityFlag Fields Admiring = 93 AlwaysShowName = 15 Angry = 25 Baby = 11 BlockedUsingDamagedShield = 74 BlockedUsingShield = 73 Blocking = 71 BreakingObstruction = 79 Breathing = 35 Bribed = 57 CanClimb = 19 CanFly = 21 CanPowerJump = 45 CanShowName = 14 CanSwim = 20 CanWalk = 22 Casting = 42 Celebrating = 92 CelebratingSpecial = 94 Charged = 27 Charging = 43 Chested = 36 ContainerIsPrivate = 53 Converting = 12 Critical = 13 Croaking = 100 DamageNearbyMobs = 55 Dancing = 50 DelayedAttack = 84 DoorBreaker = 78 DoorOpener = 80 EatMob = 101 Eating = 62 Elder = 33 Emoting = 91 Enchanted = 51 FacingTargetToRangeAttack = 87 FallThroughScaffolding = 70 FireImmune = 49 Gliding = 32 HasCollision = 47 HasGravity = 48 HiddenWhenInvisible = 88 Idling = 41 Ignited = 10 Immobile = 16 InAscendableBlock = 98 InLove = 7 InScaffolding = 68 Interested = 26 Invisible = 5 IsAvoidingBlock = 86 IsAvoidingMobs = 85 IsIllagerCaptain = 81 IsInUi = 89 IsOnFire = 0 IsPregnant = 58 IsTransforming = 54 LayingDown = 63 LayingEgg = 59 Leashed = 30 Lingering = 46 Moving = 34 Orphaned = 29 OutOfControl = 95 OverDescendableBlock = 99 OverScaffolding = 69 PlayingDead = 97 Powered = 9 RamAttack = 96 Resting = 23 ReturnTrident = 52 RiderCanPick = 60 Roaring = 83 Rolling = 66 Saddled = 8 Scared = 67 Shaking = 40 Sheared = 31 ShowBottom = 38 Silent = 17 Sitting = 24 Sleeping = 75 Sneaking = 1 Sneezing = 64 Sprinting = 3 Stackable = 37 Stalking = 90 Standing = 39 Stunned = 82 Swimming = 56 Tamed = 28 Tempted = 6 TradeInterest = 77 TransitionBlocking = 72 TransitionSitting = 61 Trusting = 65 Unknown = -1 UsingItem = 4 WallClimbing = 18 WantsToWake = 76 WasdControlled = 44"
  },
  "docs/OnixRuntime.Core.Entities.GameBuildPlatform.html": {
    "href": "docs/OnixRuntime.Core.Entities.GameBuildPlatform.html",
    "title": "Enum GameBuildPlatform | Onix Plugin Documentation",
    "summary": "Enum GameBuildPlatform Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum GameBuildPlatform Fields Amazon = 4 Android = 1 DedicatedServer = 9 GearVR = 5 MacOS = 3 Playstation = 11 Switch = 12 UWP = 7 Unknown = -1 Win32 = 8 WindowsPhone = 14 Xbox = 13 iOS = 2"
  },
  "docs/OnixRuntime.Core.Entities.GameType.html": {
    "href": "docs/OnixRuntime.Core.Entities.GameType.html",
    "title": "Enum GameType | Onix Plugin Documentation",
    "summary": "Enum GameType Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum GameType Fields Adventure = 2 Creative = 1 Default = 5 Spectator = 6 Survival = 0"
  },
  "docs/OnixRuntime.Core.Entities.ItemEntity.html": {
    "href": "docs/OnixRuntime.Core.Entities.ItemEntity.html",
    "title": "Class ItemEntity | Onix Plugin Documentation",
    "summary": "Class ItemEntity Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class ItemEntity : Entity Inheritance object MemoryAddressContainer Entity ItemEntity Inherited Members Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.HasFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.MainHandItem Entity.OffhandItem Entity.HelmetItem Entity.ChestplateItem Entity.LeggingsItem Entity.BootsItem Entity.ArmorItems Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Item public ItemStack Item { get; } Property Value ItemStack"
  },
  "docs/OnixRuntime.Core.Entities.LocalPlayer.html": {
    "href": "docs/OnixRuntime.Core.Entities.LocalPlayer.html",
    "title": "Class LocalPlayer | Onix Plugin Documentation",
    "summary": "Class LocalPlayer Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class LocalPlayer : Player Inheritance object MemoryAddressContainer Entity Mob Player LocalPlayer Inherited Members Player.CommandPermissionLevel Player.PermissionLevel Player.Username Player.Skin Player.ServerConnectedPlayerEntry Player.Inventory Player.SetInventoryItem(ItemStack, int) Player.UIContainer Player.RemainingItemUseDurationTicks Player.RemainingItemUseDuration Player.SelectedSlot Player.GameType Player.GameTypeOrDefault Player.IsDestroyingBlock Player.DestroyBlockProgress Player.AuthenticatedUsername Player.Xuid Player.SetSkin(PlayerSkin, bool) Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.HasFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties MainHandItem public override ItemStack MainHandItem { get; set; } Property Value ItemStack MovementInputs The movement input state, tells you if the LocalPlayer is moving forward or jumping, etc. public PlayerMovementInputs MovementInputs { get; } Property Value PlayerMovementInputs Raycast The raycast result of the LocalPlayer. public RaycastResult Raycast { get; } Property Value RaycastResult Methods AddRotation(Angles) Adds rotation to the player rotation (This also changes the camera) public void AddRotation(Angles angles) Parameters angles Angles The angles to add to the current rotation in degrees. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. AddRotation(float, float) Adds rotation to the player rotation (This also changes the camera) public void AddRotation(float yaw, float pitch) Parameters yaw float The yaw to add to the current rotation in degrees. pitch float The pitch to add to the current rotation in degrees. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Attack(Entity) Makes the player attack an entity. public void Attack(Entity entity) Parameters entity Entity The entity to attack. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BreakBlock() Tries to break a block using the current Raycast. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock() Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(BlockPos, BlockFace) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(BlockPos position, BlockFace face) Parameters position BlockPos The position of the block to be broken. face BlockFace The face of the block being broken. Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(BlockPos, BlockFace, Vec3) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(BlockPos position, BlockFace face, Vec3 raycastHitPosition) Parameters position BlockPos The position of the block to be broken. face BlockFace The face of the block being broken. raycastHitPosition Vec3 Where the raycast would have hit the block in world coordinates. Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(RaycastResult) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(RaycastResult raycast) Parameters raycast RaycastResult The raycast to extract the information from. Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(int, int, int, BlockFace) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(int x, int y, int z, BlockFace face) Parameters x int The X position of the block to be broken. y int The Y position of the block to be broken. z int The Z position of the block to be broken. face BlockFace The face of the block being broken. Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BreakBlock(int, int, int, BlockFace, Vec3) Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one. public bool BreakBlock(int x, int y, int z, BlockFace face, Vec3 raycastHitPosition) Parameters x int The X position of the block to be broken. y int The Y position of the block to be broken. z int The Z position of the block to be broken. face BlockFace The face of the block being broken. raycastHitPosition Vec3 Where the raycast would have hit the block in world coordinates. Returns bool Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. OnixRuntimeException Thrown when you call this twice in the same tick without having broken the block last time. BuildBlock() Builds a new block from the current Raycast. public void BuildBlock() Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(BlockPos, BlockFace) Builds a new block on face of position. public void BuildBlock(BlockPos position, BlockFace face) Parameters position BlockPos The position of the block being used as a base to place the new block. face BlockFace The face of the base block (determines which side of the base block the new one gets placed.) Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(RaycastResult) Builds a new block at the position specified by the raycast result. public void BuildBlock(RaycastResult raycast) Parameters raycast RaycastResult The raycast result containing the position to place the block. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. BuildBlock(int, int, int, BlockFace) Builds a new block at the specified coordinates. public void BuildBlock(int x, int y, int z, BlockFace face) Parameters x int The X position of the block to be placed. y int The Y position of the block to be placed. z int The Z position of the block to be placed. face BlockFace The face of the base block (determines which side of the base block the new one gets placed.) Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Interact(Entity) Makes the player interact with an entity. public void Interact(Entity entity) Parameters entity Entity The entity to interact with. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Interact(Entity, Vec3) Makes the player interact with an entity. public void Interact(Entity entity, Vec3 hitPosition) Parameters entity Entity The entity to interact with. hitPosition Vec3 The world position where the player hit the entity's hitbox. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(BlockPos, BlockFace, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(BlockPos worldPosition, BlockFace face, bool changeY = true) Parameters worldPosition BlockPos The block in 3d space to look at. face BlockFace The face of the block look at. changeY bool If the player's view should also change on the up/down axis. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(BlockPos, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(BlockPos worldPosition, bool changeY = true) Parameters worldPosition BlockPos The point in 3d space to look at. (The center will be chosen) changeY bool If the player's view should also change on the up/down axis. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetFacingXYZ(Vec3, bool) Sets the rotation of the player to be facing that world position. (This also changes the camera) public void SetFacingXYZ(Vec3 worldPosition, bool changeY = true) Parameters worldPosition Vec3 The point in 3d space to look at. changeY bool If the player's view should also change on the up/down axis. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetRotation(Angles) Sets the rotation of the player. (This also changes the camera) public void SetRotation(Angles angles) Parameters angles Angles The angles to set as the current rotation in degrees. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. SetRotation(float, float) Sets the rotation of the player. (This also changes the camera) public void SetRotation(float yaw, float pitch) Parameters yaw float The yaw to set as the current rotation in degrees. pitch float The pitch to set as the current rotation in degrees. Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. StopUsingItem() Stops using the item in the player's hand (will shoot the arrow out of a bow or cancel eating). public void StopUsingItem() Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. UseItem() Makes the player use the item in their main hand. You can shoot a bow/cancel eating by calling StopUsingItem() public void UseItem() Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this."
  },
  "docs/OnixRuntime.Core.Entities.Mob.html": {
    "href": "docs/OnixRuntime.Core.Entities.Mob.html",
    "title": "Class Mob | Onix Plugin Documentation",
    "summary": "Class Mob Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class Mob : Entity Inheritance object MemoryAddressContainer Entity Mob Derived Player Inherited Members Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.HasFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ArmorItems public override ItemStack[] ArmorItems { get; set; } Property Value ItemStack[] BootsItem public override ItemStack BootsItem { get; set; } Property Value ItemStack CardinalHeadRotation public float CardinalHeadRotation { get; } Property Value float ChestplateItem public override ItemStack ChestplateItem { get; set; } Property Value ItemStack FallTime public float FallTime { get; } Property Value float HelmetItem public override ItemStack HelmetItem { get; set; } Property Value ItemStack HurtTime public int HurtTime { get; } Property Value int LeggingsItem public override ItemStack LeggingsItem { get; set; } Property Value ItemStack MainHandItem public override ItemStack MainHandItem { get; set; } Property Value ItemStack OffhandItem public override ItemStack OffhandItem { get; set; } Property Value ItemStack RawBodyRot public float RawBodyRot { get; } Property Value float RawBodyRotOld public float RawBodyRotOld { get; } Property Value float RawHeadRot public float RawHeadRot { get; } Property Value float RawHeadRotOld public float RawHeadRotOld { get; } Property Value float Methods SendInventory(bool) public void SendInventory(bool open = false) Parameters open bool"
  },
  "docs/OnixRuntime.Core.Entities.MobEffectId.html": {
    "href": "docs/OnixRuntime.Core.Entities.MobEffectId.html",
    "title": "Enum MobEffectId | Onix Plugin Documentation",
    "summary": "Enum MobEffectId Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum MobEffectId Extension Methods MobEffectIdExtensions.GetIcon(MobEffectId) MobEffectIdExtensions.ToIdentifier(MobEffectId) Fields Absorption = 22 BadOmen = 28 Blindness = 15 ConduitPower = 26 Darkness = 30 FatalPoison = 25 FireResistance = 12 Haste = 3 HealthBoost = 21 Hunger = 17 Infested = 35 InstantDamage = 7 InstantHealth = 6 Invisibility = 14 JumpBoost = 8 Levitation = 24 MiningFatigue = 4 Nausea = 9 NightVision = 16 None = 0 Oozing = 34 Poison = 19 RaidOmen = 36 Regeneration = 10 Resistance = 11 Saturation = 23 SlowFalling = 27 Slowness = 2 Speed = 1 Strength = 5 TrialOmen = 31 VillageHero = 29 WaterBreathing = 13 Weakness = 18 Weaving = 33 WindCharged = 32 Wither = 20"
  },
  "docs/OnixRuntime.Core.Entities.MobEffectIdExtensions.html": {
    "href": "docs/OnixRuntime.Core.Entities.MobEffectIdExtensions.html",
    "title": "Class MobEffectIdExtensions | Onix Plugin Documentation",
    "summary": "Class MobEffectIdExtensions Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public static class MobEffectIdExtensions Inheritance object MobEffectIdExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromInt(int) public static MobEffectId FromInt(int id) Parameters id int Returns MobEffectId GetIcon(MobEffectId) public static TexturePath GetIcon(this MobEffectId id) Parameters id MobEffectId Returns TexturePath ToIdentifier(MobEffectId) public static string ToIdentifier(this MobEffectId id) Parameters id MobEffectId Returns string"
  },
  "docs/OnixRuntime.Core.Entities.MobEffectInstance.html": {
    "href": "docs/OnixRuntime.Core.Entities.MobEffectInstance.html",
    "title": "Class MobEffectInstance | Onix Plugin Documentation",
    "summary": "Class MobEffectInstance Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class MobEffectInstance Inheritance object MobEffectInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ambient public bool Ambient { get; } Property Value bool Amplifier Note: The amplifier is 0 based, so 0 means it will show I in the UI and 1 would be II. public int Amplifier { get; } Property Value int DisplayOnScreenAnimation public bool DisplayOnScreenAnimation { get; } Property Value bool Duration The TimeSpan ticks do not represent minecraft ticks. public TimeSpan Duration { get; } Property Value TimeSpan Id public MobEffectId Id { get; } Property Value MobEffectId IsActive public bool IsActive { get; } Property Value bool NoCounter public bool NoCounter { get; } Property Value bool Visible public bool Visible { get; } Property Value bool"
  },
  "docs/OnixRuntime.Core.Entities.Player.html": {
    "href": "docs/OnixRuntime.Core.Entities.Player.html",
    "title": "Class Player | Onix Plugin Documentation",
    "summary": "Class Player Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class Player : Mob Inheritance object MemoryAddressContainer Entity Mob Player Derived LocalPlayer ServerPlayer Inherited Members Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.HasFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AuthenticatedUsername public string AuthenticatedUsername { get; } Property Value string CommandPermissionLevel public CommandPermissionLevel CommandPermissionLevel { get; } Property Value CommandPermissionLevel DestroyBlockProgress public float DestroyBlockProgress { get; } Property Value float GameType public GameType GameType { get; } Property Value GameType GameTypeOrDefault public GameType GameTypeOrDefault { get; } Property Value GameType Inventory public ItemContainer Inventory { get; } Property Value ItemContainer IsDestroyingBlock public bool IsDestroyingBlock { get; } Property Value bool MainHandItem public override ItemStack MainHandItem { get; set; } Property Value ItemStack PermissionLevel public PlayerPermissionLevel PermissionLevel { get; } Property Value PlayerPermissionLevel RemainingItemUseDuration public TimeSpan RemainingItemUseDuration { get; } Property Value TimeSpan RemainingItemUseDurationTicks public int RemainingItemUseDurationTicks { get; } Property Value int SelectedSlot public int SelectedSlot { get; set; } Property Value int ServerConnectedPlayerEntry public ServerConnectedPlayer? ServerConnectedPlayerEntry { get; } Property Value ServerConnectedPlayer Skin public PlayerSkin Skin { get; set; } Property Value PlayerSkin UIContainer public ItemContainer UIContainer { get; } Property Value ItemContainer Username public string Username { get; } Property Value string Xuid public string Xuid { get; } Property Value string Methods SetInventoryItem(ItemStack, int) public void SetInventoryItem(ItemStack item, int slot) Parameters item ItemStack slot int SetSkin(PlayerSkin, bool) public void SetSkin(PlayerSkin skin, bool onlyAffectClient = false) Parameters skin PlayerSkin onlyAffectClient bool"
  },
  "docs/OnixRuntime.Core.Entities.PlayerMovementInputs.html": {
    "href": "docs/OnixRuntime.Core.Entities.PlayerMovementInputs.html",
    "title": "Class PlayerMovementInputs | Onix Plugin Documentation",
    "summary": "Class PlayerMovementInputs Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class PlayerMovementInputs : MemoryAddressContainer Inheritance object MemoryAddressContainer PlayerMovementInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Backward If the LocalPlayer is moving backward. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Backward { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Forward If the LocalPlayer is moving forward. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Forward { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Jump If the LocalPlayer is jumping. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Jump { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Left If the LocalPlayer is moving left. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Left { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. MoveVector Both values range from -1 to 1 with 0 being no movement. The Y is forward and backward movement (1 = forward and -1 = backwards). The X is left and right movement (1 = left and -1 = right). public Vec2 MoveVector { get; } Property Value Vec2 Right If the LocalPlayer is moving right. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Right { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Sneak If the LocalPlayer is sneaking. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Sneak { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Sprint If the LocalPlayer is sprinting. Get can be accessed from any logic callback on the client. Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public bool Sprint { get; set; } Property Value bool Exceptions NotServerGameTickEventException Thrown when you set it outside its event. InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Methods Reset() Stops all movement. MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level public void Reset() Exceptions NotServerGameTickEventException Thrown when you set it outside its event."
  },
  "docs/OnixRuntime.Core.Entities.PlayerPermissionLevel.html": {
    "href": "docs/OnixRuntime.Core.Entities.PlayerPermissionLevel.html",
    "title": "Enum PlayerPermissionLevel | Onix Plugin Documentation",
    "summary": "Enum PlayerPermissionLevel Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum PlayerPermissionLevel Fields Custom = 3 Member = 1 Operator = 2 Visitor = 0"
  },
  "docs/OnixRuntime.Core.Entities.PlayerSkin.html": {
    "href": "docs/OnixRuntime.Core.Entities.PlayerSkin.html",
    "title": "Class PlayerSkin | Onix Plugin Documentation",
    "summary": "Class PlayerSkin Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class PlayerSkin : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer PlayerSkin Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerSkin() public PlayerSkin() Properties ArmSize public string ArmSize { get; set; } Property Value string CapeId public string CapeId { get; set; } Property Value string CapeImage public RawImageData CapeImage { get; set; } Property Value RawImageData DefaultGeometryName public string DefaultGeometryName { get; set; } Property Value string FullId public string FullId { get; set; } Property Value string Geometry public string Geometry { get; set; } Property Value string GeometryName public string GeometryName { get; set; } Property Value string Id public string Id { get; set; } Property Value string IgnoreCape public bool IgnoreCape { get; set; } Property Value bool IsPersona public bool IsPersona { get; set; } Property Value bool IsPremium public bool IsPremium { get; set; } Property Value bool PlayFabId public string PlayFabId { get; set; } Property Value string ResourcePatch public string ResourcePatch { get; set; } Property Value string SkinImage public RawImageData SkinImage { get; set; } Property Value RawImageData Trust public PlayerSkinTrust Trust { get; set; } Property Value PlayerSkinTrust Methods ChangeCape(RawImageData, string?) public void ChangeCape(RawImageData image, string? capeId) Parameters image RawImageData capeId string ChangeSkin(RawImageData) public void ChangeSkin(RawImageData image) Parameters image RawImageData Clone() public PlayerSkin Clone() Returns PlayerSkin GenerateNewIds() public void GenerateNewIds() GenerateNewIds(bool) public void GenerateNewIds(bool capeId) Parameters capeId bool RemoveCape() public void RemoveCape()"
  },
  "docs/OnixRuntime.Core.Entities.PlayerSkinTrust.html": {
    "href": "docs/OnixRuntime.Core.Entities.PlayerSkinTrust.html",
    "title": "Enum PlayerSkinTrust | Onix Plugin Documentation",
    "summary": "Enum PlayerSkinTrust Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public enum PlayerSkinTrust Fields Trusted = 2 Unknown = 0 Untrusted = 1"
  },
  "docs/OnixRuntime.Core.Entities.ServerConnectedPlayer.html": {
    "href": "docs/OnixRuntime.Core.Entities.ServerConnectedPlayer.html",
    "title": "Class ServerConnectedPlayer | Onix Plugin Documentation",
    "summary": "Class ServerConnectedPlayer Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class ServerConnectedPlayer : MemoryAddressContainer Inheritance object MemoryAddressContainer ServerConnectedPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientPlayer Tries to get the client player entity from the player entry. Wont work if the entity is not loaded. Requires trust. public Player? ClientPlayer { get; } Property Value Player Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. Platform public GameBuildPlatform Platform { get; } Property Value GameBuildPlatform ServerPlayer public ServerPlayer ServerPlayer { get; } Property Value ServerPlayer Skin public PlayerSkin Skin { get; set; } Property Value PlayerSkin UniqueEntityId public ulong UniqueEntityId { get; } Property Value ulong Username public string Username { get; } Property Value string Xuid public string Xuid { get; } Property Value string Methods SetSkin(PlayerSkin, bool) public void SetSkin(PlayerSkin skin, bool onlyAffectsClient = false) Parameters skin PlayerSkin onlyAffectsClient bool"
  },
  "docs/OnixRuntime.Core.Entities.ServerPlayer.html": {
    "href": "docs/OnixRuntime.Core.Entities.ServerPlayer.html",
    "title": "Class ServerPlayer | Onix Plugin Documentation",
    "summary": "Class ServerPlayer Namespace OnixRuntime.Core.Entities Assembly OnixRuntime.dll public class ServerPlayer : Player Inheritance object MemoryAddressContainer Entity Mob Player ServerPlayer Inherited Members Player.CommandPermissionLevel Player.PermissionLevel Player.Username Player.Skin Player.ServerConnectedPlayerEntry Player.Inventory Player.SetInventoryItem(ItemStack, int) Player.UIContainer Player.MainHandItem Player.RemainingItemUseDurationTicks Player.RemainingItemUseDuration Player.SelectedSlot Player.GameType Player.GameTypeOrDefault Player.IsDestroyingBlock Player.DestroyBlockProgress Player.AuthenticatedUsername Player.Xuid Player.SetSkin(PlayerSkin, bool) Mob.RawBodyRot Mob.RawBodyRotOld Mob.RawHeadRot Mob.RawHeadRotOld Mob.HurtTime Mob.FallTime Mob.CardinalHeadRotation Mob.SendInventory(bool) Mob.OffhandItem Mob.HelmetItem Mob.ChestplateItem Mob.LeggingsItem Mob.BootsItem Mob.ArmorItems Entity.Categories Entity.IsClientSide Entity.HasCategory(EntityCategory) Entity.HasFlag(EntityFlag) Entity.SetFlag(EntityFlag, bool) Entity.IsTargetable Entity.Nametag Entity.RawPosition Entity.Position Entity.ForwardPosition(float) Entity.BlockPosition Entity.ChunkPosition Entity.Velocity Entity.Rotation Entity.TypeName Entity.TypeNamespace Entity.TypeNameFull Entity.UniqueId Entity.RuntimeId Entity.ScoreboardIdentity Entity.HeightOffset Entity.StepHeight Entity.AliveDuration Entity.AliveTicks Entity.Attributes Entity.GetAttribute(EntityAttributeId) Entity.GetAttribute(string) Entity.Effects Entity.BoundingBox Entity.BoundingBoxRaw Entity.BoundingBoxSize Entity.SimpleMolangVariables Entity.Dimension Entity.Region Entity.World Entity.Riding Entity.RiddenBy Entity.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods SendTextMessage(string, ChatMessageType, string?) public void SendTextMessage(string message, ChatMessageType type = ChatMessageType.Raw, string? authorName = null) Parameters message string type ChatMessageType authorName string"
  },
  "docs/OnixRuntime.Core.Entities.html": {
    "href": "docs/OnixRuntime.Core.Entities.html",
    "title": "Namespace OnixRuntime.Core.Entities | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Entities Classes Entity Represents an entity in the world. Those functions are only available from a game logic thread. EntityAttribute ItemEntity LocalPlayer Mob MobEffectIdExtensions MobEffectInstance Player PlayerMovementInputs PlayerSkin ServerConnectedPlayer ServerPlayer Enums CommandPermissionLevel EntityAttributeId EntityCategory EntityFlag GameBuildPlatform GameType MobEffectId PlayerPermissionLevel PlayerSkinTrust"
  },
  "docs/OnixRuntime.Core.Errors.CheatsModeRequiredException.html": {
    "href": "docs/OnixRuntime.Core.Errors.CheatsModeRequiredException.html",
    "title": "Class CheatsModeRequiredException | Onix Plugin Documentation",
    "summary": "Class CheatsModeRequiredException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class CheatsModeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException CheatsModeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CheatsModeRequiredException() public CheatsModeRequiredException()"
  },
  "docs/OnixRuntime.Core.Errors.ClientOnlyObjectException.html": {
    "href": "docs/OnixRuntime.Core.Errors.ClientOnlyObjectException.html",
    "title": "Class ClientOnlyObjectException | Onix Plugin Documentation",
    "summary": "Class ClientOnlyObjectException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class ClientOnlyObjectException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ClientOnlyObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClientOnlyObjectException() public ClientOnlyObjectException()"
  },
  "docs/OnixRuntime.Core.Errors.InsufficientTrustException.html": {
    "href": "docs/OnixRuntime.Core.Errors.InsufficientTrustException.html",
    "title": "Class InsufficientTrustException | Onix Plugin Documentation",
    "summary": "Class InsufficientTrustException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class InsufficientTrustException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException InsufficientTrustException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InsufficientTrustException() public InsufficientTrustException()"
  },
  "docs/OnixRuntime.Core.Errors.NotClientGameTickEventException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotClientGameTickEventException.html",
    "title": "Class NotClientGameTickEventException | Onix Plugin Documentation",
    "summary": "Class NotClientGameTickEventException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotClientGameTickEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotClientGameTickEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotClientGameTickEventException() public NotClientGameTickEventException()"
  },
  "docs/OnixRuntime.Core.Errors.NotClientThreadException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotClientThreadException.html",
    "title": "Class NotClientThreadException | Onix Plugin Documentation",
    "summary": "Class NotClientThreadException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotClientThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotClientThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotClientThreadException() public NotClientThreadException()"
  },
  "docs/OnixRuntime.Core.Errors.NotGameMovementTickCallbackException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotGameMovementTickCallbackException.html",
    "title": "Class NotGameMovementTickCallbackException | Onix Plugin Documentation",
    "summary": "Class NotGameMovementTickCallbackException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotGameMovementTickCallbackException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotGameMovementTickCallbackException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotGameMovementTickCallbackException() public NotGameMovementTickCallbackException()"
  },
  "docs/OnixRuntime.Core.Errors.NotInRuntimeWorldException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotInRuntimeWorldException.html",
    "title": "Class NotInRuntimeWorldException | Onix Plugin Documentation",
    "summary": "Class NotInRuntimeWorldException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotInRuntimeWorldException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotInRuntimeWorldException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotInRuntimeWorldException() public NotInRuntimeWorldException()"
  },
  "docs/OnixRuntime.Core.Errors.NotServerGameTickEventException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotServerGameTickEventException.html",
    "title": "Class NotServerGameTickEventException | Onix Plugin Documentation",
    "summary": "Class NotServerGameTickEventException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotServerGameTickEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotServerGameTickEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotServerGameTickEventException() public NotServerGameTickEventException()"
  },
  "docs/OnixRuntime.Core.Errors.NotServerThreadException.html": {
    "href": "docs/OnixRuntime.Core.Errors.NotServerThreadException.html",
    "title": "Class NotServerThreadException | Onix Plugin Documentation",
    "summary": "Class NotServerThreadException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class NotServerThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException NotServerThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotServerThreadException() public NotServerThreadException()"
  },
  "docs/OnixRuntime.Core.Errors.OnixRuntimeException.html": {
    "href": "docs/OnixRuntime.Core.Errors.OnixRuntimeException.html",
    "title": "Class OnixRuntimeException | Onix Plugin Documentation",
    "summary": "Class OnixRuntimeException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class OnixRuntimeException : Exception, ISerializable Inheritance object Exception OnixRuntimeException Implements ISerializable Derived CheatsModeRequiredException ClientOnlyObjectException InsufficientTrustException NotClientGameTickEventException NotClientThreadException NotGameMovementTickCallbackException NotInRuntimeWorldException NotServerGameTickEventException NotServerThreadException OperatorOrCheatsModeRequiredException OperatorPrivilegeRequiredException RequiresDirect2DEventException RequiresGameLogicThreadException RequiresRenderThreadAndEventException RequiresWorldRenderThreadAndEventException ServerOnlyObjectException ThreadTypeMismatchException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnixRuntimeException(string) public OnixRuntimeException(string message) Parameters message string"
  },
  "docs/OnixRuntime.Core.Errors.OperatorOrCheatsModeRequiredException.html": {
    "href": "docs/OnixRuntime.Core.Errors.OperatorOrCheatsModeRequiredException.html",
    "title": "Class OperatorOrCheatsModeRequiredException | Onix Plugin Documentation",
    "summary": "Class OperatorOrCheatsModeRequiredException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class OperatorOrCheatsModeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException OperatorOrCheatsModeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OperatorOrCheatsModeRequiredException() public OperatorOrCheatsModeRequiredException()"
  },
  "docs/OnixRuntime.Core.Errors.OperatorPrivilegeRequiredException.html": {
    "href": "docs/OnixRuntime.Core.Errors.OperatorPrivilegeRequiredException.html",
    "title": "Class OperatorPrivilegeRequiredException | Onix Plugin Documentation",
    "summary": "Class OperatorPrivilegeRequiredException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class OperatorPrivilegeRequiredException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException OperatorPrivilegeRequiredException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OperatorPrivilegeRequiredException() public OperatorPrivilegeRequiredException()"
  },
  "docs/OnixRuntime.Core.Errors.RequiresDirect2DEventException.html": {
    "href": "docs/OnixRuntime.Core.Errors.RequiresDirect2DEventException.html",
    "title": "Class RequiresDirect2DEventException | Onix Plugin Documentation",
    "summary": "Class RequiresDirect2DEventException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class RequiresDirect2DEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresDirect2DEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresDirect2DEventException() public RequiresDirect2DEventException()"
  },
  "docs/OnixRuntime.Core.Errors.RequiresGameLogicThreadException.html": {
    "href": "docs/OnixRuntime.Core.Errors.RequiresGameLogicThreadException.html",
    "title": "Class RequiresGameLogicThreadException | Onix Plugin Documentation",
    "summary": "Class RequiresGameLogicThreadException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class RequiresGameLogicThreadException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresGameLogicThreadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresGameLogicThreadException() public RequiresGameLogicThreadException()"
  },
  "docs/OnixRuntime.Core.Errors.RequiresRenderThreadAndEventException.html": {
    "href": "docs/OnixRuntime.Core.Errors.RequiresRenderThreadAndEventException.html",
    "title": "Class RequiresRenderThreadAndEventException | Onix Plugin Documentation",
    "summary": "Class RequiresRenderThreadAndEventException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class RequiresRenderThreadAndEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresRenderThreadAndEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresRenderThreadAndEventException() public RequiresRenderThreadAndEventException()"
  },
  "docs/OnixRuntime.Core.Errors.RequiresWorldRenderThreadAndEventException.html": {
    "href": "docs/OnixRuntime.Core.Errors.RequiresWorldRenderThreadAndEventException.html",
    "title": "Class RequiresWorldRenderThreadAndEventException | Onix Plugin Documentation",
    "summary": "Class RequiresWorldRenderThreadAndEventException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class RequiresWorldRenderThreadAndEventException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException RequiresWorldRenderThreadAndEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RequiresWorldRenderThreadAndEventException() public RequiresWorldRenderThreadAndEventException()"
  },
  "docs/OnixRuntime.Core.Errors.ServerOnlyObjectException.html": {
    "href": "docs/OnixRuntime.Core.Errors.ServerOnlyObjectException.html",
    "title": "Class ServerOnlyObjectException | Onix Plugin Documentation",
    "summary": "Class ServerOnlyObjectException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class ServerOnlyObjectException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ServerOnlyObjectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ServerOnlyObjectException() public ServerOnlyObjectException()"
  },
  "docs/OnixRuntime.Core.Errors.ThreadTypeMismatchException.html": {
    "href": "docs/OnixRuntime.Core.Errors.ThreadTypeMismatchException.html",
    "title": "Class ThreadTypeMismatchException | Onix Plugin Documentation",
    "summary": "Class ThreadTypeMismatchException Namespace OnixRuntime.Core.Errors Assembly OnixRuntime.dll public class ThreadTypeMismatchException : OnixRuntimeException, ISerializable Inheritance object Exception OnixRuntimeException ThreadTypeMismatchException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ThreadTypeMismatchException() public ThreadTypeMismatchException()"
  },
  "docs/OnixRuntime.Core.Errors.html": {
    "href": "docs/OnixRuntime.Core.Errors.html",
    "title": "Namespace OnixRuntime.Core.Errors | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Errors Classes CheatsModeRequiredException ClientOnlyObjectException InsufficientTrustException NotClientGameTickEventException NotClientThreadException NotGameMovementTickCallbackException NotInRuntimeWorldException NotServerGameTickEventException NotServerThreadException OnixRuntimeException OperatorOrCheatsModeRequiredException OperatorPrivilegeRequiredException RequiresDirect2DEventException RequiresGameLogicThreadException RequiresRenderThreadAndEventException RequiresWorldRenderThreadAndEventException ServerOnlyObjectException ThreadTypeMismatchException"
  },
  "docs/OnixRuntime.Core.Events.OnixEventCommon.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventCommon.html",
    "title": "Class OnixEventCommon | Onix Plugin Documentation",
    "summary": "Class OnixEventCommon Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEventCommon Inheritance object OnixEventCommon Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnChatMessage public event OnixEventSessionChat.OnReceiveDelegate OnChatMessage Event Type OnixEventSessionChat.OnReceiveDelegate OnHudInput public event OnixEventInputs.OnInputDelegate? OnHudInput Event Type OnixEventInputs.OnInputDelegate OnHudRender public event OnixEventRendering.OnHudRenderDelegate? OnHudRender Event Type OnixEventRendering.OnHudRenderDelegate OnHudRenderDirect2D public event OnixEventRendering.OnRenderHudDirect2DDelegate? OnHudRenderDirect2D Event Type OnixEventRendering.OnRenderHudDirect2DDelegate OnTick public event OnixEventsSession.OnTickDelegate? OnTick Event Type OnixEventsSession.OnTickDelegate OnWorldRender public event OnixEventRendering.OnWorldRenderDelegate? OnWorldRender Event Type OnixEventRendering.OnWorldRenderDelegate"
  },
  "docs/OnixRuntime.Core.Events.OnixEventInputs.OnInputDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventInputs.OnInputDelegate.html",
    "title": "Delegate OnixEventInputs.OnInputDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnInputDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate bool OnixEventInputs.OnInputDelegate(InputKey key, bool isDown) Parameters key InputKey isDown bool Returns bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventInputs.OnPlayerInputTickDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventInputs.OnPlayerInputTickDelegate.html",
    "title": "Delegate OnixEventInputs.OnPlayerInputTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnPlayerInputTickDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventInputs.OnPlayerInputTickDelegate(PlayerMovementInputs movementInputs) Parameters movementInputs PlayerMovementInputs"
  },
  "docs/OnixRuntime.Core.Events.OnixEventInputs.OnShouldCancelAnalogMovementDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventInputs.OnShouldCancelAnalogMovementDelegate.html",
    "title": "Delegate OnixEventInputs.OnShouldCancelAnalogMovementDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventInputs.OnShouldCancelAnalogMovementDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate bool OnixEventInputs.OnShouldCancelAnalogMovementDelegate() Returns bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventInputs.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventInputs.html",
    "title": "Class OnixEventInputs | Onix Plugin Documentation",
    "summary": "Class OnixEventInputs Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEventInputs Inheritance object OnixEventInputs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnInput public event OnixEventInputs.OnInputDelegate? OnInput Event Type OnixEventInputs.OnInputDelegate OnInputHud public event OnixEventInputs.OnInputDelegate? OnInputHud Event Type OnixEventInputs.OnInputDelegate OnPlayerInputTick public event OnixEventInputs.OnPlayerInputTickDelegate? OnPlayerInputTick Event Type OnixEventInputs.OnPlayerInputTickDelegate OnShouldCancelAnalogMovement public event OnixEventInputs.OnShouldCancelAnalogMovementDelegate? OnShouldCancelAnalogMovement Event Type OnixEventInputs.OnShouldCancelAnalogMovementDelegate"
  },
  "docs/OnixRuntime.Core.Events.OnixEventLocalServer.OnPlayerChat.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventLocalServer.OnPlayerChat.html",
    "title": "Delegate OnixEventLocalServer.OnPlayerChat | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServer.OnPlayerChat Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate bool OnixEventLocalServer.OnPlayerChat(ServerPlayer player, string message) Parameters player ServerPlayer message string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventLocalServer.OnTickDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventLocalServer.OnTickDelegate.html",
    "title": "Delegate OnixEventLocalServer.OnTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventLocalServer.OnTickDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventLocalServer.OnTickDelegate()"
  },
  "docs/OnixRuntime.Core.Events.OnixEventLocalServer.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventLocalServer.html",
    "title": "Class OnixEventLocalServer | Onix Plugin Documentation",
    "summary": "Class OnixEventLocalServer Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEventLocalServer Inheritance object OnixEventLocalServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnPlayerChatEvent public event OnixEventLocalServer.OnPlayerChat? OnPlayerChatEvent Event Type OnixEventLocalServer.OnPlayerChat OnTick public event OnixEventLocalServer.OnTickDelegate? OnTick Event Type OnixEventLocalServer.OnTickDelegate"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnHudRenderDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnHudRenderDelegate.html",
    "title": "Delegate OnixEventRendering.OnHudRenderDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnHudRenderDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnHudRenderDelegate(RendererGame gfx, float delta) Parameters gfx RendererGame delta float"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnPreRenderScreenDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnPreRenderScreenDelegate.html",
    "title": "Delegate OnixEventRendering.OnPreRenderScreenDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnPreRenderScreenDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnPreRenderScreenDelegate(RendererGame gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererGame delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnPreRenderScreenDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnPreRenderScreenDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnPreRenderScreenDirect2DDelegate(RendererDirect2D gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererDirect2D delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderHudDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderHudDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderHudDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderHudDirect2DDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderHudDirect2DDelegate(RendererDirect2D gfx, float delta) Parameters gfx RendererDirect2D delta float"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderScreenDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderScreenDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderScreenDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderScreenDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderScreenDelegate(RendererGame gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererGame delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderScreenDirect2DDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnRenderScreenDirect2DDelegate.html",
    "title": "Delegate OnixEventRendering.OnRenderScreenDirect2DDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnRenderScreenDirect2DDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnRenderScreenDirect2DDelegate(RendererDirect2D gfx, float delta, string screenName, bool isHudHidden, bool isClientUI) Parameters gfx RendererDirect2D delta float screenName string isHudHidden bool isClientUI bool"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.OnWorldRenderDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.OnWorldRenderDelegate.html",
    "title": "Delegate OnixEventRendering.OnWorldRenderDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventRendering.OnWorldRenderDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventRendering.OnWorldRenderDelegate(RendererWorld gfx, float delta) Parameters gfx RendererWorld delta float"
  },
  "docs/OnixRuntime.Core.Events.OnixEventRendering.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventRendering.html",
    "title": "Class OnixEventRendering | Onix Plugin Documentation",
    "summary": "Class OnixEventRendering Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEventRendering Inheritance object OnixEventRendering Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnHudRender public event OnixEventRendering.OnHudRenderDelegate? OnHudRender Event Type OnixEventRendering.OnHudRenderDelegate OnPreRenderScreen public event OnixEventRendering.OnPreRenderScreenDelegate? OnPreRenderScreen Event Type OnixEventRendering.OnPreRenderScreenDelegate OnPreRenderScreenDirect2D public event OnixEventRendering.OnPreRenderScreenDirect2DDelegate? OnPreRenderScreenDirect2D Event Type OnixEventRendering.OnPreRenderScreenDirect2DDelegate OnRenderHudDirect2D public event OnixEventRendering.OnRenderHudDirect2DDelegate? OnRenderHudDirect2D Event Type OnixEventRendering.OnRenderHudDirect2DDelegate OnRenderScreen public event OnixEventRendering.OnRenderScreenDelegate? OnRenderScreen Event Type OnixEventRendering.OnRenderScreenDelegate OnRenderScreenDirect2D public event OnixEventRendering.OnRenderScreenDirect2DDelegate? OnRenderScreenDirect2D Event Type OnixEventRendering.OnRenderScreenDirect2DDelegate OnWorldRender public event OnixEventRendering.OnWorldRenderDelegate? OnWorldRender Event Type OnixEventRendering.OnWorldRenderDelegate"
  },
  "docs/OnixRuntime.Core.Events.OnixEvents.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEvents.html",
    "title": "Class OnixEvents | Onix Plugin Documentation",
    "summary": "Class OnixEvents Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEvents Inheritance object OnixEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Common public OnixEventCommon Common { get; } Property Value OnixEventCommon Input public OnixEventInputs Input { get; } Property Value OnixEventInputs LocalServer public OnixEventLocalServer LocalServer { get; } Property Value OnixEventLocalServer Rendering public OnixEventRendering Rendering { get; } Property Value OnixEventRendering Session public OnixEventsSession Session { get; } Property Value OnixEventsSession"
  },
  "docs/OnixRuntime.Core.Events.OnixEventsSession.OnDimensionChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventsSession.OnDimensionChangedDelegate.html",
    "title": "Delegate OnixEventsSession.OnDimensionChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnDimensionChangedDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventsSession.OnDimensionChangedDelegate(Dimension dimension) Parameters dimension Dimension"
  },
  "docs/OnixRuntime.Core.Events.OnixEventsSession.OnSessionJoinedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventsSession.OnSessionJoinedDelegate.html",
    "title": "Delegate OnixEventsSession.OnSessionJoinedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnSessionJoinedDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventsSession.OnSessionJoinedDelegate()"
  },
  "docs/OnixRuntime.Core.Events.OnixEventsSession.OnSessionLeftDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventsSession.OnSessionLeftDelegate.html",
    "title": "Delegate OnixEventsSession.OnSessionLeftDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnSessionLeftDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventsSession.OnSessionLeftDelegate()"
  },
  "docs/OnixRuntime.Core.Events.OnixEventsSession.OnTickDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventsSession.OnTickDelegate.html",
    "title": "Delegate OnixEventsSession.OnTickDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventsSession.OnTickDelegate Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public delegate void OnixEventsSession.OnTickDelegate()"
  },
  "docs/OnixRuntime.Core.Events.OnixEventsSession.html": {
    "href": "docs/OnixRuntime.Core.Events.OnixEventsSession.html",
    "title": "Class OnixEventsSession | Onix Plugin Documentation",
    "summary": "Class OnixEventsSession Namespace OnixRuntime.Core.Events Assembly OnixRuntime.dll public class OnixEventsSession Inheritance object OnixEventsSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chat public OnixEventSessionChat Chat { get; } Property Value OnixEventSessionChat ModalForm public OnixEventSessionModalForms ModalForm { get; } Property Value OnixEventSessionModalForms Title public OnixEventSessionTitle Title { get; } Property Value OnixEventSessionTitle Events OnDimensionChanged public event OnixEventsSession.OnDimensionChangedDelegate? OnDimensionChanged Event Type OnixEventsSession.OnDimensionChangedDelegate OnSessionJoined Note: This event will be called after you start listening to it or when you get enabled even if the world was not just joined. That means you can rely on it to know when the player is in a world. public event OnixEventsSession.OnSessionJoinedDelegate? OnSessionJoined Event Type OnixEventsSession.OnSessionJoinedDelegate OnSessionLeft public event OnixEventsSession.OnSessionLeftDelegate? OnSessionLeft Event Type OnixEventsSession.OnSessionLeftDelegate OnTick public event OnixEventsSession.OnTickDelegate? OnTick Event Type OnixEventsSession.OnTickDelegate"
  },
  "docs/OnixRuntime.Core.Events.Session.GameTitleType.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.GameTitleType.html",
    "title": "Enum GameTitleType | Onix Plugin Documentation",
    "summary": "Enum GameTitleType Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public enum GameTitleType Fields Actionbar = 4 Clear = 0 Reset = 1 Subtitle = 3 Times = 5 Title = 2"
  },
  "docs/OnixRuntime.Core.Events.Session.IModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.IModalFormReplyer.html",
    "title": "Interface IModalFormReplyer | Onix Plugin Documentation",
    "summary": "Interface IModalFormReplyer Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public interface IModalFormReplyer Properties FormId uint FormId { get; } Property Value uint HasBeenRepliedAlready bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson string ResponseJson { get; } Property Value string"
  },
  "docs/OnixRuntime.Core.Events.Session.ModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.ModalFormReplyer.html",
    "title": "Class ModalFormReplyer | Onix Plugin Documentation",
    "summary": "Class ModalFormReplyer Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public class ModalFormReplyer : IModalFormReplyer Inheritance object ModalFormReplyer Implements IModalFormReplyer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FormId public uint FormId { get; } Property Value uint HasBeenRepliedAlready public bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson public string ResponseJson { get; } Property Value string"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnReceiveDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnReceiveDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnReceiveDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnReceiveDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionChat.OnReceiveDelegate(string message, string username, string xuid, ChatMessageType type) Parameters message string username string xuid string type ChatMessageType Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnSendCommandDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnSendCommandDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnSendCommandDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnSendCommandDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionChat.OnSendCommandDelegate(string command) Parameters command string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnSendMessageDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.OnSendMessageDelegate.html",
    "title": "Delegate OnixEventSessionChat.OnSendMessageDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionChat.OnSendMessageDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionChat.OnSendMessageDelegate(string message) Parameters message string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionChat.html",
    "title": "Class OnixEventSessionChat | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionChat Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public class OnixEventSessionChat Inheritance object OnixEventSessionChat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnReceive public event OnixEventSessionChat.OnReceiveDelegate? OnReceive Event Type OnixEventSessionChat.OnReceiveDelegate OnSend public event OnixEventSessionChat.OnSendMessageDelegate? OnSend Event Type OnixEventSessionChat.OnSendMessageDelegate OnSendCommand public event OnixEventSessionChat.OnSendCommandDelegate? OnSendCommand Event Type OnixEventSessionChat.OnSendCommandDelegate"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.OnRawModalFormRequestDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.OnRawModalFormRequestDelegate.html",
    "title": "Delegate OnixEventSessionModalForms.OnRawModalFormRequestDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionModalForms.OnRawModalFormRequestDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionModalForms.OnRawModalFormRequestDelegate(uint formId, string requestJson, IModalFormReplyer replyer) Parameters formId uint requestJson string replyer IModalFormReplyer Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.OnRawModalFormResponseDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.OnRawModalFormResponseDelegate.html",
    "title": "Delegate OnixEventSessionModalForms.OnRawModalFormResponseDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionModalForms.OnRawModalFormResponseDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionModalForms.OnRawModalFormResponseDelegate(uint formId, string responseJson, IModalFormReplyer replyer) Parameters formId uint responseJson string replyer IModalFormReplyer Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionModalForms.html",
    "title": "Class OnixEventSessionModalForms | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionModalForms Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public class OnixEventSessionModalForms Inheritance object OnixEventSessionModalForms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnRawModalFormRequest public event OnixEventSessionModalForms.OnRawModalFormRequestDelegate? OnRawModalFormRequest Event Type OnixEventSessionModalForms.OnRawModalFormRequestDelegate OnRawModalFormResponse public event OnixEventSessionModalForms.OnRawModalFormResponseDelegate? OnRawModalFormResponse Event Type OnixEventSessionModalForms.OnRawModalFormResponseDelegate"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnActionBarChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnActionBarChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnActionBarChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnActionBarChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionTitle.OnActionBarChangedDelegate(string actionbar) Parameters actionbar string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnAnyTitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnAnyTitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnAnyTitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnAnyTitleChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate void OnixEventSessionTitle.OnAnyTitleChangedDelegate(GameTitleType type, string title) Parameters type GameTitleType title string"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnClearedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnClearedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnClearedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnClearedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionTitle.OnClearedDelegate() Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnResetDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnResetDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnResetDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnResetDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionTitle.OnResetDelegate() Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnSubtitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnSubtitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnSubtitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnSubtitleChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionTitle.OnSubtitleChangedDelegate(string subtitle) Parameters subtitle string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTimesChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTimesChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTimesChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTimesChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate void OnixEventSessionTitle.OnTimesChangedDelegate(TimeSpan fadeInTime, TimeSpan duration, TimeSpan fadeOutTime) Parameters fadeInTime TimeSpan duration TimeSpan fadeOutTime TimeSpan"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTimesTickChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTimesTickChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTimesTickChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTimesTickChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate void OnixEventSessionTitle.OnTimesTickChangedDelegate(int fadeInTicks, int durationTicks, int fadeOutTicks) Parameters fadeInTicks int durationTicks int fadeOutTicks int"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTitleChangedDelegate.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.OnTitleChangedDelegate.html",
    "title": "Delegate OnixEventSessionTitle.OnTitleChangedDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixEventSessionTitle.OnTitleChangedDelegate Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public delegate bool OnixEventSessionTitle.OnTitleChangedDelegate(string title) Parameters title string Returns bool"
  },
  "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.OnixEventSessionTitle.html",
    "title": "Class OnixEventSessionTitle | Onix Plugin Documentation",
    "summary": "Class OnixEventSessionTitle Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public class OnixEventSessionTitle Inheritance object OnixEventSessionTitle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnActionBar public event OnixEventSessionTitle.OnActionBarChangedDelegate? OnActionBar Event Type OnixEventSessionTitle.OnActionBarChangedDelegate OnAnyTitleChanged public event OnixEventSessionTitle.OnAnyTitleChangedDelegate? OnAnyTitleChanged Event Type OnixEventSessionTitle.OnAnyTitleChangedDelegate OnCleared public event OnixEventSessionTitle.OnClearedDelegate? OnCleared Event Type OnixEventSessionTitle.OnClearedDelegate OnReset public event OnixEventSessionTitle.OnResetDelegate? OnReset Event Type OnixEventSessionTitle.OnResetDelegate OnSubtitle public event OnixEventSessionTitle.OnSubtitleChangedDelegate? OnSubtitle Event Type OnixEventSessionTitle.OnSubtitleChangedDelegate OnTimesChanged public event OnixEventSessionTitle.OnTimesChangedDelegate? OnTimesChanged Event Type OnixEventSessionTitle.OnTimesChangedDelegate OnTimesTickChanged public event OnixEventSessionTitle.OnTimesTickChangedDelegate? OnTimesTickChanged Event Type OnixEventSessionTitle.OnTimesTickChangedDelegate OnTitle public event OnixEventSessionTitle.OnTitleChangedDelegate? OnTitle Event Type OnixEventSessionTitle.OnTitleChangedDelegate"
  },
  "docs/OnixRuntime.Core.Events.Session.RawModalFormReplyer.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.RawModalFormReplyer.html",
    "title": "Class RawModalFormReplyer | Onix Plugin Documentation",
    "summary": "Class RawModalFormReplyer Namespace OnixRuntime.Core.Events.Session Assembly OnixRuntime.dll public class RawModalFormReplyer : IModalFormReplyer Inheritance object RawModalFormReplyer Implements IModalFormReplyer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FormId public uint FormId { get; } Property Value uint HasBeenRepliedAlready public bool HasBeenRepliedAlready { get; } Property Value bool ResponseJson public string ResponseJson { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Core.Events.Session.html": {
    "href": "docs/OnixRuntime.Core.Events.Session.html",
    "title": "Namespace OnixRuntime.Core.Events.Session | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Events.Session Classes ModalFormReplyer OnixEventSessionChat OnixEventSessionModalForms OnixEventSessionTitle RawModalFormReplyer Interfaces IModalFormReplyer Enums GameTitleType Delegates OnixEventSessionChat.OnReceiveDelegate OnixEventSessionChat.OnSendCommandDelegate OnixEventSessionChat.OnSendMessageDelegate OnixEventSessionModalForms.OnRawModalFormRequestDelegate OnixEventSessionModalForms.OnRawModalFormResponseDelegate OnixEventSessionTitle.OnActionBarChangedDelegate OnixEventSessionTitle.OnAnyTitleChangedDelegate OnixEventSessionTitle.OnClearedDelegate OnixEventSessionTitle.OnResetDelegate OnixEventSessionTitle.OnSubtitleChangedDelegate OnixEventSessionTitle.OnTimesChangedDelegate OnixEventSessionTitle.OnTimesTickChangedDelegate OnixEventSessionTitle.OnTitleChangedDelegate"
  },
  "docs/OnixRuntime.Core.Events.html": {
    "href": "docs/OnixRuntime.Core.Events.html",
    "title": "Namespace OnixRuntime.Core.Events | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Events Classes OnixEventCommon OnixEventInputs OnixEventLocalServer OnixEventRendering OnixEvents OnixEventsSession Delegates OnixEventInputs.OnInputDelegate OnixEventInputs.OnPlayerInputTickDelegate OnixEventInputs.OnShouldCancelAnalogMovementDelegate OnixEventLocalServer.OnPlayerChat OnixEventLocalServer.OnTickDelegate OnixEventRendering.OnHudRenderDelegate OnixEventRendering.OnPreRenderScreenDelegate OnixEventRendering.OnPreRenderScreenDirect2DDelegate OnixEventRendering.OnRenderHudDirect2DDelegate OnixEventRendering.OnRenderScreenDelegate OnixEventRendering.OnRenderScreenDirect2DDelegate OnixEventRendering.OnWorldRenderDelegate OnixEventsSession.OnDimensionChangedDelegate OnixEventsSession.OnSessionJoinedDelegate OnixEventsSession.OnSessionLeftDelegate OnixEventsSession.OnTickDelegate"
  },
  "docs/OnixRuntime.Core.Inputs.ControllerMappingLayout.html": {
    "href": "docs/OnixRuntime.Core.Inputs.ControllerMappingLayout.html",
    "title": "Class ControllerMappingLayout | Onix Plugin Documentation",
    "summary": "Class ControllerMappingLayout Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public class ControllerMappingLayout : InputMappingLayout Inheritance object MemoryAddressContainer InputMappingLayout ControllerMappingLayout Inherited Members InputMappingLayout.Current InputMappingLayout.Default InputMappingLayout.GetKeys(string) InputMappingLayout.GetDefaultKeys(string) InputMappingLayout.HasKey(string, InputKey) InputMappingLayout.HasDefaultKey(string, InputKey) InputMappingLayout.IsKeyAssigned(InputKey) InputMappingLayout.IsDefaultKeyAssigned(InputKey) InputMappingLayout.Forward InputMappingLayout.Back InputMappingLayout.Left InputMappingLayout.Right InputMappingLayout.Jump InputMappingLayout.Sneak InputMappingLayout.Sprint InputMappingLayout.Inventory InputMappingLayout.Drop InputMappingLayout.Use InputMappingLayout.Attack InputMappingLayout.PickBlock InputMappingLayout.Chat InputMappingLayout.Hotbar1 InputMappingLayout.Hotbar2 InputMappingLayout.Hotbar3 InputMappingLayout.Hotbar4 InputMappingLayout.Hotbar5 InputMappingLayout.Hotbar6 InputMappingLayout.Hotbar7 InputMappingLayout.Hotbar8 InputMappingLayout.Hotbar9 InputMappingLayout.Hotbar InputMappingLayout.GetHotbar(int) InputMappingLayout.GetDefaultHotbar(int) InputMappingLayout.TogglePerspective InputMappingLayout.MobEffects InputMappingLayout.Command InputMappingLayout.CopyCoordinates InputMappingLayout.CopyFacingCoordinates InputMappingLayout.Emote InputMappingLayout.Screenshot InputMappingLayout.MenuTabLeft InputMappingLayout.MenuTabRight InputMappingLayout.MenuCancel InputMappingLayout.Pause InputMappingLayout.CycleItemLeft InputMappingLayout.CycleItemRight InputMappingLayout.DefaultForward InputMappingLayout.DefaultBack InputMappingLayout.DefaultLeft InputMappingLayout.DefaultRight InputMappingLayout.DefaultJump InputMappingLayout.DefaultSneak InputMappingLayout.DefaultSprint InputMappingLayout.DefaultInventory InputMappingLayout.DefaultDrop InputMappingLayout.DefaultUse InputMappingLayout.DefaultAttack InputMappingLayout.DefaultPickBlock InputMappingLayout.DefaultChat InputMappingLayout.DefaultHotbar1 InputMappingLayout.DefaultHotbar2 InputMappingLayout.DefaultHotbar3 InputMappingLayout.DefaultHotbar4 InputMappingLayout.DefaultHotbar5 InputMappingLayout.DefaultHotbar6 InputMappingLayout.DefaultHotbar7 InputMappingLayout.DefaultHotbar8 InputMappingLayout.DefaultHotbar9 InputMappingLayout.DefaultHotbar InputMappingLayout.DefaultTogglePerspective InputMappingLayout.DefaultMobEffects InputMappingLayout.DefaultCommand InputMappingLayout.DefaultCopyCoordinates InputMappingLayout.DefaultCopyFacingCoordinates InputMappingLayout.DefaultEmote InputMappingLayout.DefaultScreenshot InputMappingLayout.DefaultMenuTabLeft InputMappingLayout.DefaultMenuTabRight InputMappingLayout.DefaultMenuCancel InputMappingLayout.DefaultPause InputMappingLayout.DefaultCycleItemLeft InputMappingLayout.DefaultCycleItemRight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsController protected override bool IsController { get; } Property Value bool"
  },
  "docs/OnixRuntime.Core.Inputs.GameInputHandler.html": {
    "href": "docs/OnixRuntime.Core.Inputs.GameInputHandler.html",
    "title": "Class GameInputHandler | Onix Plugin Documentation",
    "summary": "Class GameInputHandler Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public class GameInputHandler : MemoryAddressContainer Inheritance object MemoryAddressContainer GameInputHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ControllerMapping public ControllerMappingLayout ControllerMapping { get; } Property Value ControllerMappingLayout CurrentGameplay public string CurrentGameplay { get; } Property Value string IsFlying public bool IsFlying { get; } Property Value bool KeyboardMapping public KeyboardMappingLayout KeyboardMapping { get; } Property Value KeyboardMappingLayout"
  },
  "docs/OnixRuntime.Core.Inputs.InputKey.GamepadInputType.html": {
    "href": "docs/OnixRuntime.Core.Inputs.InputKey.GamepadInputType.html",
    "title": "Enum InputKey.GamepadInputType | Onix Plugin Documentation",
    "summary": "Enum InputKey.GamepadInputType Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public enum InputKey.GamepadInputType Fields GamepadA = 1 GamepadB = 2 GamepadDPadDown = 6 GamepadDPadLeft = 7 GamepadDPadRight = 8 GamepadDPadUp = 5 GamepadLB = 11 GamepadLeftStick = 9 GamepadLeftTrigger = -100 GamepadMenu = 14 GamepadRB = 12 GamepadRightStick = 10 GamepadRightTrigger = -99 GamepadView = 13 GamepadX = 3 GamepadY = 4 None = 0"
  },
  "docs/OnixRuntime.Core.Inputs.InputKey.Type.html": {
    "href": "docs/OnixRuntime.Core.Inputs.InputKey.Type.html",
    "title": "Enum InputKey.Type | Onix Plugin Documentation",
    "summary": "Enum InputKey.Type Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public enum InputKey.Type Fields A = 65 Add = 107 Alt = 18 Application = 93 B = 66 Backspace = 8 C = 67 CapsLock = 20 Clear = 12 ContextMenu = 93 Ctrl = 17 D = 68 Decimal = 110 Delete = 46 Divide = 111 Down = 40 E = 69 End = 35 Enter = 13 Escape = 27 Execute = 43 F = 70 F1 = 112 F10 = 121 F11 = 122 F12 = 123 F13 = 124 F14 = 125 F15 = 126 F16 = 127 F17 = 128 F18 = 129 F19 = 130 F2 = 113 F20 = 131 F21 = 132 F22 = 133 F23 = 134 F24 = 135 F3 = 114 F4 = 115 F5 = 116 F6 = 117 F7 = 118 F8 = 119 F9 = 120 G = 71 GamepadA = -199 GamepadB = -198 GamepadDPadDown = -194 GamepadDPadLeft = -193 GamepadDPadRight = -192 GamepadDPadUp = -195 GamepadLB = -189 GamepadLT = -300 GamepadLeftStick = -191 GamepadMenu = -186 GamepadRB = -188 GamepadRT = -299 GamepadRightStick = -190 GamepadView = -187 GamepadX = -197 GamepadY = -196 H = 72 Help = 47 Home = 36 I = 73 Insert = 45 J = 74 K = 75 L = 76 LAlt = 164 LCtrl = 162 LMB = -99 LShift = 160 LWindows = 91 Left = 37 M = 77 MMB = -97 MouseButton5 = -95 MouseButton6 = -94 Multiply = 106 N = 78 None = 0 Num0 = 48 Num1 = 49 Num2 = 50 Num3 = 51 Num4 = 52 Num5 = 53 Num6 = 54 Num7 = 55 Num8 = 56 Num9 = 57 Numlock = 144 Numpad0 = 96 Numpad1 = 97 Numpad2 = 98 Numpad3 = 99 Numpad4 = 100 Numpad5 = 101 Numpad6 = 102 Numpad7 = 103 Numpad8 = 104 Numpad9 = 105 O = 79 P = 80 PageDown = 34 PageUp = 33 Pause = 19 Print = 42 PrintScreen = 44 Q = 81 R = 82 RAlt = 165 RCtrl = 163 RMB = -98 RShift = 161 RWindows = 92 Return = 13 Right = 39 S = 83 Scroll = -96 ScrollLock = 145 Select = 41 Separator = 108 Shift = 16 Sleep = 95 Space = 32 Substract = 109 T = 84 Tab = 9 U = 85 UnknownMB1 = -93 Up = 38 V = 86 W = 87 X = 88 Y = 89 Z = 90"
  },
  "docs/OnixRuntime.Core.Inputs.InputKey.html": {
    "href": "docs/OnixRuntime.Core.Inputs.InputKey.html",
    "title": "Class InputKey | Onix Plugin Documentation",
    "summary": "Class InputKey Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public class InputKey Inheritance object InputKey Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InputKey(GamepadInputType) public InputKey(InputKey.GamepadInputType input) Parameters input InputKey.GamepadInputType InputKey(Type) public InputKey(InputKey.Type input) Parameters input InputKey.Type Properties GamepadInput public InputKey.GamepadInputType GamepadInput { get; } Property Value InputKey.GamepadInputType IsGamepad public bool IsGamepad { get; } Property Value bool IsMouse public bool IsMouse { get; } Property Value bool Key public InputKey.Type Key { get; } Property Value InputKey.Type Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(InputKey, InputKey) public static bool operator ==(InputKey lhs, InputKey rhs) Parameters lhs InputKey rhs InputKey Returns bool operator ==(InputKey, GamepadInputType) public static bool operator ==(InputKey lhs, InputKey.GamepadInputType rhs) Parameters lhs InputKey rhs InputKey.GamepadInputType Returns bool operator ==(InputKey, Type) public static bool operator ==(InputKey lhs, InputKey.Type rhs) Parameters lhs InputKey rhs InputKey.Type Returns bool operator !=(InputKey, InputKey) public static bool operator !=(InputKey lhs, InputKey rhs) Parameters lhs InputKey rhs InputKey Returns bool operator !=(InputKey, GamepadInputType) public static bool operator !=(InputKey lhs, InputKey.GamepadInputType rhs) Parameters lhs InputKey rhs InputKey.GamepadInputType Returns bool operator !=(InputKey, Type) public static bool operator !=(InputKey lhs, InputKey.Type rhs) Parameters lhs InputKey rhs InputKey.Type Returns bool"
  },
  "docs/OnixRuntime.Core.Inputs.InputMappingLayout.html": {
    "href": "docs/OnixRuntime.Core.Inputs.InputMappingLayout.html",
    "title": "Class InputMappingLayout | Onix Plugin Documentation",
    "summary": "Class InputMappingLayout Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public class InputMappingLayout : MemoryAddressContainer Inheritance object MemoryAddressContainer InputMappingLayout Derived ControllerMappingLayout KeyboardMappingLayout Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attack public InputKey[] Attack { get; } Property Value InputKey[] Back public InputKey[] Back { get; } Property Value InputKey[] Chat public InputKey[] Chat { get; } Property Value InputKey[] Command public InputKey[] Command { get; } Property Value InputKey[] CopyCoordinates public InputKey[] CopyCoordinates { get; } Property Value InputKey[] CopyFacingCoordinates public InputKey[] CopyFacingCoordinates { get; } Property Value InputKey[] Current public IReadOnlyDictionary<string, InputKey[]> Current { get; } Property Value IReadOnlyDictionary<string, InputKey[]> CycleItemLeft Controller only public InputKey[] CycleItemLeft { get; } Property Value InputKey[] CycleItemRight Controller only public InputKey[] CycleItemRight { get; } Property Value InputKey[] Default public IReadOnlyDictionary<string, InputKey[]> Default { get; } Property Value IReadOnlyDictionary<string, InputKey[]> DefaultAttack public InputKey[] DefaultAttack { get; } Property Value InputKey[] DefaultBack public InputKey[] DefaultBack { get; } Property Value InputKey[] DefaultChat public InputKey[] DefaultChat { get; } Property Value InputKey[] DefaultCommand public InputKey[] DefaultCommand { get; } Property Value InputKey[] DefaultCopyCoordinates public InputKey[] DefaultCopyCoordinates { get; } Property Value InputKey[] DefaultCopyFacingCoordinates public InputKey[] DefaultCopyFacingCoordinates { get; } Property Value InputKey[] DefaultCycleItemLeft Controller only public InputKey[] DefaultCycleItemLeft { get; } Property Value InputKey[] DefaultCycleItemRight Controller only public InputKey[] DefaultCycleItemRight { get; } Property Value InputKey[] DefaultDrop public InputKey[] DefaultDrop { get; } Property Value InputKey[] DefaultEmote public InputKey[] DefaultEmote { get; } Property Value InputKey[] DefaultForward public InputKey[] DefaultForward { get; } Property Value InputKey[] DefaultHotbar public InputKey[][] DefaultHotbar { get; } Property Value InputKey[][] DefaultHotbar1 public InputKey[] DefaultHotbar1 { get; } Property Value InputKey[] DefaultHotbar2 public InputKey[] DefaultHotbar2 { get; } Property Value InputKey[] DefaultHotbar3 public InputKey[] DefaultHotbar3 { get; } Property Value InputKey[] DefaultHotbar4 public InputKey[] DefaultHotbar4 { get; } Property Value InputKey[] DefaultHotbar5 public InputKey[] DefaultHotbar5 { get; } Property Value InputKey[] DefaultHotbar6 public InputKey[] DefaultHotbar6 { get; } Property Value InputKey[] DefaultHotbar7 public InputKey[] DefaultHotbar7 { get; } Property Value InputKey[] DefaultHotbar8 public InputKey[] DefaultHotbar8 { get; } Property Value InputKey[] DefaultHotbar9 public InputKey[] DefaultHotbar9 { get; } Property Value InputKey[] DefaultInventory public InputKey[] DefaultInventory { get; } Property Value InputKey[] DefaultJump public InputKey[] DefaultJump { get; } Property Value InputKey[] DefaultLeft public InputKey[] DefaultLeft { get; } Property Value InputKey[] DefaultMenuCancel public InputKey[] DefaultMenuCancel { get; } Property Value InputKey[] DefaultMenuTabLeft public InputKey[] DefaultMenuTabLeft { get; } Property Value InputKey[] DefaultMenuTabRight public InputKey[] DefaultMenuTabRight { get; } Property Value InputKey[] DefaultMobEffects public InputKey[] DefaultMobEffects { get; } Property Value InputKey[] DefaultPause public InputKey[] DefaultPause { get; } Property Value InputKey[] DefaultPickBlock public InputKey[] DefaultPickBlock { get; } Property Value InputKey[] DefaultRight public InputKey[] DefaultRight { get; } Property Value InputKey[] DefaultScreenshot public InputKey[] DefaultScreenshot { get; } Property Value InputKey[] DefaultSneak public InputKey[] DefaultSneak { get; } Property Value InputKey[] DefaultSprint public InputKey[] DefaultSprint { get; } Property Value InputKey[] DefaultTogglePerspective public InputKey[] DefaultTogglePerspective { get; } Property Value InputKey[] DefaultUse public InputKey[] DefaultUse { get; } Property Value InputKey[] Drop public InputKey[] Drop { get; } Property Value InputKey[] Emote public InputKey[] Emote { get; } Property Value InputKey[] Forward public InputKey[] Forward { get; } Property Value InputKey[] Hotbar public InputKey[][] Hotbar { get; } Property Value InputKey[][] Hotbar1 public InputKey[] Hotbar1 { get; } Property Value InputKey[] Hotbar2 public InputKey[] Hotbar2 { get; } Property Value InputKey[] Hotbar3 public InputKey[] Hotbar3 { get; } Property Value InputKey[] Hotbar4 public InputKey[] Hotbar4 { get; } Property Value InputKey[] Hotbar5 public InputKey[] Hotbar5 { get; } Property Value InputKey[] Hotbar6 public InputKey[] Hotbar6 { get; } Property Value InputKey[] Hotbar7 public InputKey[] Hotbar7 { get; } Property Value InputKey[] Hotbar8 public InputKey[] Hotbar8 { get; } Property Value InputKey[] Hotbar9 public InputKey[] Hotbar9 { get; } Property Value InputKey[] Inventory public InputKey[] Inventory { get; } Property Value InputKey[] IsController protected virtual bool IsController { get; } Property Value bool Jump public InputKey[] Jump { get; } Property Value InputKey[] Left public InputKey[] Left { get; } Property Value InputKey[] MenuCancel public InputKey[] MenuCancel { get; } Property Value InputKey[] MenuTabLeft public InputKey[] MenuTabLeft { get; } Property Value InputKey[] MenuTabRight public InputKey[] MenuTabRight { get; } Property Value InputKey[] MobEffects public InputKey[] MobEffects { get; } Property Value InputKey[] Pause public InputKey[] Pause { get; } Property Value InputKey[] PickBlock public InputKey[] PickBlock { get; } Property Value InputKey[] Right public InputKey[] Right { get; } Property Value InputKey[] Screenshot public InputKey[] Screenshot { get; } Property Value InputKey[] Sneak public InputKey[] Sneak { get; } Property Value InputKey[] Sprint public InputKey[] Sprint { get; } Property Value InputKey[] TogglePerspective public InputKey[] TogglePerspective { get; } Property Value InputKey[] Use public InputKey[] Use { get; } Property Value InputKey[] Methods GetDefaultHotbar(int) public InputKey[] GetDefaultHotbar(int slot) Parameters slot int Returns InputKey[] GetDefaultKeys(string) public InputKey[] GetDefaultKeys(string action) Parameters action string Returns InputKey[] GetHotbar(int) public InputKey[] GetHotbar(int slot) Parameters slot int Returns InputKey[] GetKeys(string) public InputKey[] GetKeys(string action) Parameters action string Returns InputKey[] HasDefaultKey(string, InputKey) public bool HasDefaultKey(string action, InputKey key) Parameters action string key InputKey Returns bool HasKey(string, InputKey) public bool HasKey(string action, InputKey key) Parameters action string key InputKey Returns bool IsDefaultKeyAssigned(InputKey) public bool IsDefaultKeyAssigned(InputKey key) Parameters key InputKey Returns bool IsKeyAssigned(InputKey) public bool IsKeyAssigned(InputKey key) Parameters key InputKey Returns bool"
  },
  "docs/OnixRuntime.Core.Inputs.KeyboardMappingLayout.html": {
    "href": "docs/OnixRuntime.Core.Inputs.KeyboardMappingLayout.html",
    "title": "Class KeyboardMappingLayout | Onix Plugin Documentation",
    "summary": "Class KeyboardMappingLayout Namespace OnixRuntime.Core.Inputs Assembly OnixRuntime.dll public class KeyboardMappingLayout : InputMappingLayout Inheritance object MemoryAddressContainer InputMappingLayout KeyboardMappingLayout Inherited Members InputMappingLayout.Current InputMappingLayout.Default InputMappingLayout.GetKeys(string) InputMappingLayout.GetDefaultKeys(string) InputMappingLayout.HasKey(string, InputKey) InputMappingLayout.HasDefaultKey(string, InputKey) InputMappingLayout.IsKeyAssigned(InputKey) InputMappingLayout.IsDefaultKeyAssigned(InputKey) InputMappingLayout.Forward InputMappingLayout.Back InputMappingLayout.Left InputMappingLayout.Right InputMappingLayout.Jump InputMappingLayout.Sneak InputMappingLayout.Sprint InputMappingLayout.Inventory InputMappingLayout.Drop InputMappingLayout.Use InputMappingLayout.Attack InputMappingLayout.PickBlock InputMappingLayout.Chat InputMappingLayout.Hotbar1 InputMappingLayout.Hotbar2 InputMappingLayout.Hotbar3 InputMappingLayout.Hotbar4 InputMappingLayout.Hotbar5 InputMappingLayout.Hotbar6 InputMappingLayout.Hotbar7 InputMappingLayout.Hotbar8 InputMappingLayout.Hotbar9 InputMappingLayout.Hotbar InputMappingLayout.GetHotbar(int) InputMappingLayout.GetDefaultHotbar(int) InputMappingLayout.TogglePerspective InputMappingLayout.MobEffects InputMappingLayout.Command InputMappingLayout.CopyCoordinates InputMappingLayout.CopyFacingCoordinates InputMappingLayout.Emote InputMappingLayout.Screenshot InputMappingLayout.MenuTabLeft InputMappingLayout.MenuTabRight InputMappingLayout.MenuCancel InputMappingLayout.Pause InputMappingLayout.CycleItemLeft InputMappingLayout.CycleItemRight InputMappingLayout.DefaultForward InputMappingLayout.DefaultBack InputMappingLayout.DefaultLeft InputMappingLayout.DefaultRight InputMappingLayout.DefaultJump InputMappingLayout.DefaultSneak InputMappingLayout.DefaultSprint InputMappingLayout.DefaultInventory InputMappingLayout.DefaultDrop InputMappingLayout.DefaultUse InputMappingLayout.DefaultAttack InputMappingLayout.DefaultPickBlock InputMappingLayout.DefaultChat InputMappingLayout.DefaultHotbar1 InputMappingLayout.DefaultHotbar2 InputMappingLayout.DefaultHotbar3 InputMappingLayout.DefaultHotbar4 InputMappingLayout.DefaultHotbar5 InputMappingLayout.DefaultHotbar6 InputMappingLayout.DefaultHotbar7 InputMappingLayout.DefaultHotbar8 InputMappingLayout.DefaultHotbar9 InputMappingLayout.DefaultHotbar InputMappingLayout.DefaultTogglePerspective InputMappingLayout.DefaultMobEffects InputMappingLayout.DefaultCommand InputMappingLayout.DefaultCopyCoordinates InputMappingLayout.DefaultCopyFacingCoordinates InputMappingLayout.DefaultEmote InputMappingLayout.DefaultScreenshot InputMappingLayout.DefaultMenuTabLeft InputMappingLayout.DefaultMenuTabRight InputMappingLayout.DefaultMenuCancel InputMappingLayout.DefaultPause InputMappingLayout.DefaultCycleItemLeft InputMappingLayout.DefaultCycleItemRight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsController protected override bool IsController { get; } Property Value bool"
  },
  "docs/OnixRuntime.Core.Inputs.html": {
    "href": "docs/OnixRuntime.Core.Inputs.html",
    "title": "Namespace OnixRuntime.Core.Inputs | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Inputs Classes ControllerMappingLayout GameInputHandler InputKey InputMappingLayout KeyboardMappingLayout Enums InputKey.GamepadInputType InputKey.Type"
  },
  "docs/OnixRuntime.Core.Internal.MemoryAddressContainer.html": {
    "href": "docs/OnixRuntime.Core.Internal.MemoryAddressContainer.html",
    "title": "Class MemoryAddressContainer | Onix Plugin Documentation",
    "summary": "Class MemoryAddressContainer Namespace OnixRuntime.Core.Internal Assembly OnixRuntime.dll public class MemoryAddressContainer Inheritance object MemoryAddressContainer Derived ConnectionInfo LocalGameServer RealmWorld Entity PlayerMovementInputs ServerConnectedPlayer GameInputHandler InputMappingLayout Item ItemContainer ItemRegistry ChatMessage GameGuiInfo GameMeshBuilder Biome Block BlockEntity BlockRegistry Dimension RuntimeWorld Scoreboard ScoreboardObjective WorldBlocks WorldChunk WorldChunks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MemoryAddressContainer(nint) protected MemoryAddressContainer(nint currentMemoryAddress) Parameters currentMemoryAddress nint"
  },
  "docs/OnixRuntime.Core.Internal.MightOwnMemoryAddressContainer.html": {
    "href": "docs/OnixRuntime.Core.Internal.MightOwnMemoryAddressContainer.html",
    "title": "Class MightOwnMemoryAddressContainer | Onix Plugin Documentation",
    "summary": "Class MightOwnMemoryAddressContainer Namespace OnixRuntime.Core.Internal Assembly OnixRuntime.dll public class MightOwnMemoryAddressContainer : IDisposable Inheritance object MightOwnMemoryAddressContainer Implements IDisposable Derived PlayerSkin ItemStack TexturePath RaycastResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MightOwnMemoryAddressContainer(nint, nint) protected MightOwnMemoryAddressContainer(nint currentMemoryAddress, nint destructor = 0) Parameters currentMemoryAddress nint destructor nint Properties HasMemoryOwnership protected bool HasMemoryOwnership { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~MightOwnMemoryAddressContainer() protected ~MightOwnMemoryAddressContainer() SetMemoryAddressValues(nint, nint) protected void SetMemoryAddressValues(nint currentMemoryAddress, nint destructor = 0) Parameters currentMemoryAddress nint destructor nint"
  },
  "docs/OnixRuntime.Core.Internal.html": {
    "href": "docs/OnixRuntime.Core.Internal.html",
    "title": "Namespace OnixRuntime.Core.Internal | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Internal Classes MemoryAddressContainer MightOwnMemoryAddressContainer"
  },
  "docs/OnixRuntime.Core.Items.EnchantType.html": {
    "href": "docs/OnixRuntime.Core.Items.EnchantType.html",
    "title": "Enum EnchantType | Onix Plugin Documentation",
    "summary": "Enum EnchantType Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public enum EnchantType Extension Methods EnchantmentTypesExtensions.ToNameIdentifier(EnchantType) EnchantmentTypesExtensions.ToNameTranslationKey(EnchantType) Fields AquaAffinity = 8 BaneOfArthropods = 11 BlastProtection = 3 Breach = 40 Channeling = 32 CurseOfBinding = 27 CurseOfVanishing = 28 Density = 39 DepthStrider = 7 Efficiency = 15 FeatherFalling = 2 FireAspect = 13 FireProtection = 1 Flame = 21 Fortune = 18 FrostWalker = 25 Impaling = 29 Infinity = 22 Knockback = 12 Looting = 14 Loyalty = 31 LuckOfTheSea = 23 Lure = 24 Mending = 26 Multishot = 33 Piercing = 34 Power = 19 ProjectileProtection = 4 Protection = 0 Punch = 20 QuickCharge = 35 Respiration = 6 Riptide = 30 Sharpness = 9 SilkTouch = 16 Smite = 10 SoulSpeed = 36 SwiftSneak = 37 Thorns = 5 Unbreaking = 17 WindBurst = 38"
  },
  "docs/OnixRuntime.Core.Items.EnchantmentInstance.html": {
    "href": "docs/OnixRuntime.Core.Items.EnchantmentInstance.html",
    "title": "Class EnchantmentInstance | Onix Plugin Documentation",
    "summary": "Class EnchantmentInstance Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public class EnchantmentInstance Inheritance object EnchantmentInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnchantmentInstance() public EnchantmentInstance() EnchantmentInstance(EnchantType, int) public EnchantmentInstance(EnchantType type, int level) Parameters type EnchantType level int Fields Level public int Level Field Value int Type public EnchantType Type Field Value EnchantType"
  },
  "docs/OnixRuntime.Core.Items.EnchantmentTypesExtensions.html": {
    "href": "docs/OnixRuntime.Core.Items.EnchantmentTypesExtensions.html",
    "title": "Class EnchantmentTypesExtensions | Onix Plugin Documentation",
    "summary": "Class EnchantmentTypesExtensions Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public static class EnchantmentTypesExtensions Inheritance object EnchantmentTypesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNameIdentifier(EnchantType) public static string ToNameIdentifier(this EnchantType ench) Parameters ench EnchantType Returns string ToNameTranslationKey(EnchantType) public static string ToNameTranslationKey(this EnchantType ench) Parameters ench EnchantType Returns string"
  },
  "docs/OnixRuntime.Core.Items.Item.html": {
    "href": "docs/OnixRuntime.Core.Items.Item.html",
    "title": "Class Item | Onix Plugin Documentation",
    "summary": "Class Item Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public class Item : MemoryAddressContainer Inheritance object MemoryAddressContainer Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AllowsOffhand If this item can be placed in the offhand. public bool AllowsOffhand { get; } Property Value bool CanExplode If this item can be destroyed by explosions. public bool CanExplode { get; } Property Value bool CreativeCategory Which part of the creative menu this item belongs to. public CreativeItemCategory CreativeCategory { get; } Property Value CreativeItemCategory DefaultBlock If this item is a block this will be its default Block State public Block? DefaultBlock { get; } Property Value Block HasEnchantedOverlay If this item has the enchanted overlay without being enchanted (like enchanted golden apples.) public bool HasEnchantedOverlay { get; } Property Value bool Id This id might not be reliable across versions/servers. public int Id { get; } Property Value int IsFireResistant If this item cannot be destroyed by fire. public bool IsFireResistant { get; } Property Value bool IsHandEquipped If this item can be equipped from right-clicking it in your hand. public bool IsHandEquipped { get; } Property Value bool IsStackedByData If the item is stacked by data (like different colored wool.) public bool IsStackedByData { get; } Property Value bool MaxDamage How much damage does that item need to take before it breaks. Zero means that it does not have durability. public int MaxDamage { get; } Property Value int MaxStackSize What is the max size of a stack of this item. Note that this is not accurate for all items. public int MaxStackSize { get; } Property Value int MaxUseDuration How long does it take to use the item. public TimeSpan MaxUseDuration { get; } Property Value TimeSpan MaxUseDurationTicks How long does it take to use the item in game ticks. public int MaxUseDurationTicks { get; } Property Value int Name The name of the item like \"diamond_sword\" public string Name { get; } Property Value string NameFull The full name of the item like \"minecraft:diamond_sword\" public string NameFull { get; } Property Value string Namespace The namespace this item is in like \"minecraft\" public string Namespace { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.Items.ItemContainer.html": {
    "href": "docs/OnixRuntime.Core.Items.ItemContainer.html",
    "title": "Class ItemContainer | Onix Plugin Documentation",
    "summary": "Class ItemContainer Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public class ItemContainer : MemoryAddressContainer Inheritance object MemoryAddressContainer ItemContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Size public int Size { get; } Property Value int Slots public ItemStack[] Slots { get; } Property Value ItemStack[] Methods GetItem(int) public ItemStack GetItem(int index) Parameters index int Returns ItemStack SetItem(int, ItemStack) Sets an item in a container. You will need trust if on client. public void SetItem(int index, ItemStack item) Parameters index int The index of the item to set. item ItemStack The item to be set. Exceptions IndexOutOfRangeException Thrown if the index is out of range InsufficientTrustException Thrown when the user lacks the trust level necessary for this."
  },
  "docs/OnixRuntime.Core.Items.ItemRegistry.html": {
    "href": "docs/OnixRuntime.Core.Items.ItemRegistry.html",
    "title": "Class ItemRegistry | Onix Plugin Documentation",
    "summary": "Class ItemRegistry Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll public class ItemRegistry : MemoryAddressContainer Inheritance object MemoryAddressContainer ItemRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RuntimeItems public IEnumerable<Item> RuntimeItems { get; } Property Value IEnumerable<Item> Methods GetItem(string) public Item? GetItem(string name) Parameters name string Returns Item"
  },
  "docs/OnixRuntime.Core.Items.ItemStack.html": {
    "href": "docs/OnixRuntime.Core.Items.ItemStack.html",
    "title": "Class ItemStack | Onix Plugin Documentation",
    "summary": "Class ItemStack Namespace OnixRuntime.Core.Items Assembly OnixRuntime.dll Creation must be done in a game logic thread. The other functions are fine but avoid reading from random threads/places if you don't own it. If you get it from the source every time it should be safe to read. public class ItemStack : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer ItemStack Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ItemStack() Creation must be done in a game logic thread. public ItemStack() ItemStack(Item, int, int) Creation must be done in a game logic thread. public ItemStack(Item item, int count, int aux = 0) Parameters item Item count int aux int ItemStack(ObjectTag) Creation must be done in a game logic thread. public ItemStack(ObjectTag tag) Parameters tag ObjectTag ItemStack(Block, int) Creation must be done in a game logic thread. public ItemStack(Block block, int count) Parameters block Block count int ItemStack(string, int, int) Creation must be done in a game logic thread. public ItemStack(string itemName, int count, int aux = 0) Parameters itemName string count int aux int Properties Aux public int Aux { get; set; } Property Value int Block public Block? Block { get; } Property Value Block CanBeDamaged public bool CanBeDamaged { get; } Property Value bool Count public int Count { get; set; } Property Value int CustomName public string CustomName { get; set; } Property Value string Damage public int Damage { get; set; } Property Value int DisplayName public string DisplayName { get; } Property Value string Durability public int Durability { get; set; } Property Value int Enchants public EnchantmentInstance[] Enchants { get; set; } Property Value EnchantmentInstance[] IsEmpty public bool IsEmpty { get; } Property Value bool Item public Item? Item { get; } Property Value Item Lore public string[] Lore { get; set; } Property Value string[] Nbt public ObjectTag? Nbt { get; set; } Property Value ObjectTag ShowPickup public bool ShowPickup { get; set; } Property Value bool Methods AddEnchant(EnchantType, int) public void AddEnchant(EnchantType enchant, int level) Parameters enchant EnchantType level int AddEnchant(EnchantmentInstance) public void AddEnchant(EnchantmentInstance enchant) Parameters enchant EnchantmentInstance AddOrUpdateEnchant(EnchantType, int) public void AddOrUpdateEnchant(EnchantType enchant, int level) Parameters enchant EnchantType level int AddOrUpdateEnchant(EnchantmentInstance) public void AddOrUpdateEnchant(EnchantmentInstance enchant) Parameters enchant EnchantmentInstance Clone() Creation/Cloning must be done in a game logic thread. public ItemStack Clone() Returns ItemStack GetEnchant(EnchantType) public EnchantmentInstance? GetEnchant(EnchantType type) Parameters type EnchantType Returns EnchantmentInstance LoadFromNbt(ObjectTag) Creation/Initialization must be done in a game logic thread. public void LoadFromNbt(ObjectTag tag) Parameters tag ObjectTag Reinit(Item, int, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(Item item, int count, int aux = 0, bool keepNbt = false) Parameters item Item count int aux int keepNbt bool Reinit(Block, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(Block block, int count, bool keepNbt = false) Parameters block Block count int keepNbt bool Reinit(string, int, int, bool) Creation/Initialization must be done in a game logic thread. public void Reinit(string itemName, int count, int aux = 0, bool keepNbt = false) Parameters itemName string count int aux int keepNbt bool RemoveEnchant(EnchantType) public bool RemoveEnchant(EnchantType type) Parameters type EnchantType Returns bool SaveToNbt() public ObjectTag SaveToNbt() Returns ObjectTag SetEmpty() public void SetEmpty() ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.Items.html": {
    "href": "docs/OnixRuntime.Core.Items.html",
    "title": "Namespace OnixRuntime.Core.Items | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Items Classes EnchantmentInstance EnchantmentTypesExtensions Item ItemContainer ItemRegistry ItemStack Creation must be done in a game logic thread. The other functions are fine but avoid reading from random threads/places if you don't own it. If you get it from the source every time it should be safe to read. Enums EnchantType"
  },
  "docs/OnixRuntime.Core.Maths.Angles.html": {
    "href": "docs/OnixRuntime.Core.Maths.Angles.html",
    "title": "Struct Angles | Onix Plugin Documentation",
    "summary": "Struct Angles Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct Angles : IEquatable<Angles> Implements IEquatable<Angles> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Angles() public Angles() Angles(float, float) public Angles(float yaw, float pitch) Parameters yaw float pitch float Fields Pitch public float Pitch Field Value float Yaw public float Yaw Field Value float Properties Length public float Length { get; } Property Value float Magnitude public float Magnitude { get; } Property Value float MagnitudeSqr public float MagnitudeSqr { get; } Property Value float Normalized public Angles Normalized { get; } Property Value Angles Methods Angle(Angles) public float Angle(Angles vec) Parameters vec Angles Returns float AnglesRandom() public static Angles AnglesRandom() Returns Angles Clamp(Angles, Angles) public Angles Clamp(Angles min, Angles max) Parameters min Angles max Angles Returns Angles Clamp(float, float) public Angles Clamp(float min, float max) Parameters min float max float Returns Angles Cross(Angles) public float Cross(Angles vec) Parameters vec Angles Returns float Distance(Angles) public float Distance(Angles vec) Parameters vec Angles Returns float Dot(Angles) public float Dot(Angles vec) Parameters vec Angles Returns float Equals(Angles) Indicates whether the current object is equal to another object of the same type. public bool Equals(Angles other) Parameters other Angles An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Angles, float) public Angles Lerp(Angles vec, float t) Parameters vec Angles t float Returns Angles Max(Angles) public Angles Max(Angles vec) Parameters vec Angles Returns Angles Max(float) public Angles Max(float value) Parameters value float Returns Angles Min(Angles) public Angles Min(Angles vec) Parameters vec Angles Returns Angles Min(float) public Angles Min(float value) Parameters value float Returns Angles SetDirection(float) public void SetDirection(float angle) Parameters angle float SetMagnitude(float) public void SetMagnitude(float magnitude) Parameters magnitude float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string, CultureInfo?) public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string formatProvider CultureInfo Returns string Operators operator +(Angles, Angles) public static Angles operator +(Angles a, Angles b) Parameters a Angles b Angles Returns Angles operator +(Angles, float) public static Angles operator +(Angles a, float b) Parameters a Angles b float Returns Angles operator /(Angles, Angles) public static Angles operator /(Angles a, Angles b) Parameters a Angles b Angles Returns Angles operator /(Angles, float) public static Angles operator /(Angles a, float b) Parameters a Angles b float Returns Angles operator /(float, Angles) public static Angles operator /(float a, Angles b) Parameters a float b Angles Returns Angles operator ==(Angles, Angles) public static bool operator ==(Angles a, Angles b) Parameters a Angles b Angles Returns bool operator !=(Angles, Angles) public static bool operator !=(Angles a, Angles b) Parameters a Angles b Angles Returns bool operator *(Angles, Angles) public static Angles operator *(Angles a, Angles b) Parameters a Angles b Angles Returns Angles operator *(Angles, float) public static Angles operator *(Angles a, float b) Parameters a Angles b float Returns Angles operator *(float, Angles) public static Angles operator *(float a, Angles b) Parameters a float b Angles Returns Angles operator -(Angles, Angles) public static Angles operator -(Angles a, Angles b) Parameters a Angles b Angles Returns Angles operator -(Angles, float) public static Angles operator -(Angles a, float b) Parameters a Angles b float Returns Angles operator -(Angles) public static Angles operator -(Angles a) Parameters a Angles Returns Angles"
  },
  "docs/OnixRuntime.Core.Maths.BlockPos.html": {
    "href": "docs/OnixRuntime.Core.Maths.BlockPos.html",
    "title": "Struct BlockPos | Onix Plugin Documentation",
    "summary": "Struct BlockPos Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct BlockPos : IEquatable<BlockPos> Implements IEquatable<BlockPos> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BlockPos(Vec3) public BlockPos(Vec3 vec) Parameters vec Vec3 BlockPos(int, int, int) public BlockPos(int x, int y, int z) Parameters x int y int z int Fields X public int X Field Value int Y public int Y Field Value int Z public int Z Field Value int Properties BoundingBox public BoundingBox BoundingBox { get; } Property Value BoundingBox Center public Vec3 Center { get; } Property Value Vec3 Down public BlockPos Down { get; } Property Value BlockPos East public BlockPos East { get; } Property Value BlockPos Length public int Length { get; } Property Value int Normalized public Vec3 Normalized { get; } Property Value Vec3 North public BlockPos North { get; } Property Value BlockPos One public static BlockPos One { get; } Property Value BlockPos South public BlockPos South { get; } Property Value BlockPos Up public BlockPos Up { get; } Property Value BlockPos West public BlockPos West { get; } Property Value BlockPos Zero public static BlockPos Zero { get; } Property Value BlockPos Methods Add(BlockPos) public BlockPos Add(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos Add(int, int, int) public BlockPos Add(int x, int y, int z) Parameters x int y int z int Returns BlockPos Clamp(BlockPos, BlockPos) public BlockPos Clamp(BlockPos min, BlockPos max) Parameters min BlockPos max BlockPos Returns BlockPos Clamp(int, int) public BlockPos Clamp(int min, int max) Parameters min int max int Returns BlockPos Distance(BlockPos) public float Distance(BlockPos other) Parameters other BlockPos Returns float Div(BlockPos) public BlockPos Div(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos Div(int, int, int) public BlockPos Div(int x, int y, int z) Parameters x int y int z int Returns BlockPos Equals(BlockPos) Indicates whether the current object is equal to another object of the same type. public bool Equals(BlockPos other) Parameters other BlockPos An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(BlockPos, float) public BlockPos Lerp(BlockPos other, float t) Parameters other BlockPos t float Returns BlockPos Max(BlockPos) public BlockPos Max(BlockPos other) Parameters other BlockPos Returns BlockPos Max(int) public BlockPos Max(int other) Parameters other int Returns BlockPos Min(BlockPos) public BlockPos Min(BlockPos other) Parameters other BlockPos Returns BlockPos Min(int) public BlockPos Min(int other) Parameters other int Returns BlockPos Mod(BlockPos) public BlockPos Mod(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos Mod(int, int, int) public BlockPos Mod(int x, int y, int z) Parameters x int y int z int Returns BlockPos Mul(BlockPos) public BlockPos Mul(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos Mul(int, int, int) public BlockPos Mul(int x, int y, int z) Parameters x int y int z int Returns BlockPos Sub(BlockPos) public BlockPos Sub(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos Sub(int, int, int) public BlockPos Sub(int x, int y, int z) Parameters x int y int z int Returns BlockPos ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string) public string ToString(string format) Parameters format string Returns string Operators operator +(BlockPos, BlockPos) public static BlockPos operator +(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns BlockPos operator --(BlockPos) public static BlockPos operator --(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos operator /(BlockPos, BlockPos) public static BlockPos operator /(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns BlockPos operator /(BlockPos, int) public static BlockPos operator /(BlockPos lhs, int rhs) Parameters lhs BlockPos rhs int Returns BlockPos operator /(int, BlockPos) public static BlockPos operator /(int lhs, BlockPos rhs) Parameters lhs int rhs BlockPos Returns BlockPos operator ==(BlockPos, BlockPos) public static bool operator ==(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator >(BlockPos, BlockPos) public static bool operator >(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator >=(BlockPos, BlockPos) public static bool operator >=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator ++(BlockPos) public static BlockPos operator ++(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos operator !=(BlockPos, BlockPos) public static bool operator !=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator <(BlockPos, BlockPos) public static bool operator <(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator <=(BlockPos, BlockPos) public static bool operator <=(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns bool operator %(BlockPos, BlockPos) public static BlockPos operator %(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns BlockPos operator %(BlockPos, int) public static BlockPos operator %(BlockPos lhs, int rhs) Parameters lhs BlockPos rhs int Returns BlockPos operator %(int, BlockPos) public static BlockPos operator %(int lhs, BlockPos rhs) Parameters lhs int rhs BlockPos Returns BlockPos operator *(BlockPos, BlockPos) public static BlockPos operator *(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns BlockPos operator *(BlockPos, int) public static BlockPos operator *(BlockPos lhs, int rhs) Parameters lhs BlockPos rhs int Returns BlockPos operator *(int, BlockPos) public static BlockPos operator *(int lhs, BlockPos rhs) Parameters lhs int rhs BlockPos Returns BlockPos operator -(BlockPos, BlockPos) public static BlockPos operator -(BlockPos lhs, BlockPos rhs) Parameters lhs BlockPos rhs BlockPos Returns BlockPos operator -(BlockPos) public static BlockPos operator -(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos operator +(BlockPos) public static BlockPos operator +(BlockPos rhs) Parameters rhs BlockPos Returns BlockPos"
  },
  "docs/OnixRuntime.Core.Maths.BoundingBox.html": {
    "href": "docs/OnixRuntime.Core.Maths.BoundingBox.html",
    "title": "Struct BoundingBox | Onix Plugin Documentation",
    "summary": "Struct BoundingBox Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct BoundingBox : IEquatable<BoundingBox> Implements IEquatable<BoundingBox> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BoundingBox(Vec3, Vec3) public BoundingBox(Vec3 min, Vec3 max) Parameters min Vec3 max Vec3 Fields Maximum public Vec3 Maximum Field Value Vec3 Minimum public Vec3 Minimum Field Value Vec3 Properties BackBottomLeft public Vec3 BackBottomLeft { get; } Property Value Vec3 BackBottomRight public Vec3 BackBottomRight { get; } Property Value Vec3 BackBottomTop public Vec3 BackBottomTop { get; } Property Value Vec3 BackTopLeft public Vec3 BackTopLeft { get; } Property Value Vec3 BackTopRight public Vec3 BackTopRight { get; } Property Value Vec3 Center public Vec3 Center { get; } Property Value Vec3 Empty public bool Empty { get; } Property Value bool FrontBottomLeft public Vec3 FrontBottomLeft { get; } Property Value Vec3 FrontBottomRight public Vec3 FrontBottomRight { get; } Property Value Vec3 FrontTopLeft public Vec3 FrontTopLeft { get; } Property Value Vec3 FrontTopRight public Vec3 FrontTopRight { get; } Property Value Vec3 Size public Vec3 Size { get; } Property Value Vec3 Volume public float Volume { get; } Property Value float Methods Contains(BoundingBox) public bool Contains(BoundingBox box) Parameters box BoundingBox Returns bool Contains(Vec3) public bool Contains(Vec3 point) Parameters point Vec3 Returns bool Equals(BoundingBox) Indicates whether the current object is equal to another object of the same type. public bool Equals(BoundingBox other) Parameters other BoundingBox An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GrowToInclude(Vec3) public BoundingBox GrowToInclude(Vec3 point) Parameters point Vec3 Returns BoundingBox Inflate(Vec3) public BoundingBox Inflate(Vec3 amount) Parameters amount Vec3 Returns BoundingBox Inflate(float) public BoundingBox Inflate(float amount) Parameters amount float Returns BoundingBox Intersect(BoundingBox) public BoundingBox Intersect(BoundingBox box) Parameters box BoundingBox Returns BoundingBox Intersects(BoundingBox) public bool Intersects(BoundingBox box) Parameters box BoundingBox Returns bool Lerp(BoundingBox, float) public BoundingBox Lerp(BoundingBox other, float t) Parameters other BoundingBox t float Returns BoundingBox Merge(BoundingBox) public BoundingBox Merge(BoundingBox other) Parameters other BoundingBox Returns BoundingBox Normalize(Vec3) public Vec3 Normalize(Vec3 point) Parameters point Vec3 Returns Vec3 Offset(Vec3) public BoundingBox Offset(Vec3 offset) Parameters offset Vec3 Returns BoundingBox ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Union(BoundingBox) public BoundingBox Union(BoundingBox box) Parameters box BoundingBox Returns BoundingBox Operators operator ==(BoundingBox, BoundingBox) public static bool operator ==(BoundingBox a, BoundingBox b) Parameters a BoundingBox b BoundingBox Returns bool operator !=(BoundingBox, BoundingBox) public static bool operator !=(BoundingBox a, BoundingBox b) Parameters a BoundingBox b BoundingBox Returns bool"
  },
  "docs/OnixRuntime.Core.Maths.ChunkPos.html": {
    "href": "docs/OnixRuntime.Core.Maths.ChunkPos.html",
    "title": "Struct ChunkPos | Onix Plugin Documentation",
    "summary": "Struct ChunkPos Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct ChunkPos : IEquatable<ChunkPos> Implements IEquatable<ChunkPos> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChunkPos(BlockPos) public ChunkPos(BlockPos pos) Parameters pos BlockPos ChunkPos(int, int) public ChunkPos(int x, int y) Parameters x int y int Fields X public int X Field Value int Y public int Y Field Value int Methods Equals(ChunkPos) Indicates whether the current object is equal to another object of the same type. public bool Equals(ChunkPos other) Parameters other ChunkPos An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromWorld(BlockPos) public static ChunkPos FromWorld(BlockPos pos) Parameters pos BlockPos Returns ChunkPos FromWorld(int, int) public static ChunkPos FromWorld(int worldX, int worldZ) Parameters worldX int worldZ int Returns ChunkPos GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetInChunkBlockPos(int, int) public static ChunkPos GetInChunkBlockPos(int worldX, int worldZ) Parameters worldX int worldZ int Returns ChunkPos Operators operator ==(ChunkPos, ChunkPos) public static bool operator ==(ChunkPos lhs, ChunkPos rhs) Parameters lhs ChunkPos rhs ChunkPos Returns bool operator !=(ChunkPos, ChunkPos) public static bool operator !=(ChunkPos lhs, ChunkPos rhs) Parameters lhs ChunkPos rhs ChunkPos Returns bool"
  },
  "docs/OnixRuntime.Core.Maths.ColorF.html": {
    "href": "docs/OnixRuntime.Core.Maths.ColorF.html",
    "title": "Struct ColorF | Onix Plugin Documentation",
    "summary": "Struct ColorF Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct ColorF Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ColorF() public ColorF() ColorF(int, int, int, int) public ColorF(int r, int g, int b, int a = 255) Parameters r int g int b int a int ColorF(ReadOnlySpan<char>) public ColorF(ReadOnlySpan<char> hexCode) Parameters hexCode ReadOnlySpan<char> ColorF(float, float, float, float) public ColorF(float r, float g, float b, float a = 1) Parameters r float g float b float a float Fields A public float A Field Value float B public float B Field Value float G public float G Field Value float R public float R Field Value float Properties Aqua public static ColorF Aqua { get; } Property Value ColorF Black public static ColorF Black { get; } Property Value ColorF Blue public static ColorF Blue { get; } Property Value ColorF Bronze public static ColorF Bronze { get; } Property Value ColorF Brown public static ColorF Brown { get; } Property Value ColorF Cyan public static ColorF Cyan { get; } Property Value ColorF Gold public static ColorF Gold { get; } Property Value ColorF Gray public static ColorF Gray { get; } Property Value ColorF Green public static ColorF Green { get; } Property Value ColorF Grey public static ColorF Grey { get; } Property Value ColorF HexColor public string HexColor { get; } Property Value string Indigo public static ColorF Indigo { get; } Property Value ColorF Inverted public ColorF Inverted { get; } Property Value ColorF Lime public static ColorF Lime { get; } Property Value ColorF Magenta public static ColorF Magenta { get; } Property Value ColorF Maroon public static ColorF Maroon { get; } Property Value ColorF Navy public static ColorF Navy { get; } Property Value ColorF Olive public static ColorF Olive { get; } Property Value ColorF Opaque public ColorF Opaque { get; } Property Value ColorF Orange public static ColorF Orange { get; } Property Value ColorF Pink public static ColorF Pink { get; } Property Value ColorF Purple public static ColorF Purple { get; } Property Value ColorF Red public static ColorF Red { get; } Property Value ColorF Rose public static ColorF Rose { get; } Property Value ColorF Silver public static ColorF Silver { get; } Property Value ColorF Sky public static ColorF Sky { get; } Property Value ColorF Teal public static ColorF Teal { get; } Property Value ColorF Transparent public static ColorF Transparent { get; } Property Value ColorF Violet public static ColorF Violet { get; } Property Value ColorF White public static ColorF White { get; } Property Value ColorF Yellow public static ColorF Yellow { get; } Property Value ColorF Methods Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromRGBA(uint) public static ColorF FromRGBA(uint color) Parameters color uint Returns ColorF GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(ColorF, ColorF, float) public static ColorF Lerp(ColorF a, ColorF b, float amount) Parameters a ColorF b ColorF amount float Returns ColorF Lerp(Color, float) public ColorF Lerp(Color target, float amount) Parameters target Color amount float Returns ColorF MultiplyOpacity(float) public ColorF MultiplyOpacity(float targetOpacity) Parameters targetOpacity float Returns ColorF Opacity(ColorF, float) public static ColorF Opacity(ColorF color, float targetOpacity) Parameters color ColorF targetOpacity float Returns ColorF Opacity(float) public static ColorF Opacity(float targetOpacity) Parameters targetOpacity float Returns ColorF ToRGBA() public uint ToRGBA() Returns uint ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. WithOpacity(float) public ColorF WithOpacity(float targetOpacity) Parameters targetOpacity float Returns ColorF Operators operator +(ColorF, ColorF) public static ColorF operator +(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator /(ColorF, ColorF) public static ColorF operator /(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator /(ColorF, float) public static ColorF operator /(ColorF a, float b) Parameters a ColorF b float Returns ColorF operator /(float, ColorF) public static ColorF operator /(float a, ColorF b) Parameters a float b ColorF Returns ColorF operator ==(ColorF, ColorF) public static bool operator ==(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns bool implicit operator Color(ColorF) public static implicit operator Color(ColorF color) Parameters color ColorF Returns Color implicit operator ColorF(Color) public static implicit operator ColorF(Color color) Parameters color Color Returns ColorF operator !=(ColorF, ColorF) public static bool operator !=(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns bool operator *(ColorF, ColorF) public static ColorF operator *(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF operator *(ColorF, float) public static ColorF operator *(ColorF a, float b) Parameters a ColorF b float Returns ColorF operator *(float, ColorF) public static ColorF operator *(float a, ColorF b) Parameters a float b ColorF Returns ColorF operator -(ColorF, ColorF) public static ColorF operator -(ColorF a, ColorF b) Parameters a ColorF b ColorF Returns ColorF"
  },
  "docs/OnixRuntime.Core.Maths.Rect.html": {
    "href": "docs/OnixRuntime.Core.Maths.Rect.html",
    "title": "Struct Rect | Onix Plugin Documentation",
    "summary": "Struct Rect Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct Rect : IEquatable<Rect> Implements IEquatable<Rect> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Rect() public Rect() Rect(Vec2, Vec2) public Rect(Vec2 topLeft, Vec2 bottomRight) Parameters topLeft Vec2 bottomRight Vec2 Rect(Vec2, float, float) public Rect(Vec2 topLeft, float bottomRightX, float bottomRightY) Parameters topLeft Vec2 bottomRightX float bottomRightY float Rect(float, float, Vec2) public Rect(float topLeftX, float topLeftY, Vec2 bottomRight) Parameters topLeftX float topLeftY float bottomRight Vec2 Rect(float, float, float, float) public Rect(float topLeftX, float topLeftY, float bottomRightX, float bottomRightY) Parameters topLeftX float topLeftY float bottomRightX float bottomRightY float Fields W public float W Field Value float X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties AspectRatio public float AspectRatio { get; } Property Value float BottomLeft public Vec2 BottomLeft { get; } Property Value Vec2 BottomRight public Vec2 BottomRight { get; } Property Value Vec2 Center public Vec2 Center { get; } Property Value Vec2 Height public float Height { get; } Property Value float IsEmpty public bool IsEmpty { get; } Property Value bool Size public Vec2 Size { get; } Property Value Vec2 TopLeft public Vec2 TopLeft { get; } Property Value Vec2 TopRight public Vec2 TopRight { get; } Property Value Vec2 Width public float Width { get; } Property Value float Methods Absolute(Vec2) public Vec2 Absolute(Vec2 vec) Parameters vec Vec2 Returns Vec2 Absolute(float, float) public Vec2 Absolute(float x, float y) Parameters x float y float Returns Vec2 CenterInside(Rect) public Rect CenterInside(Rect rect) Parameters rect Rect Returns Rect CenterInside(Vec2) public Rect CenterInside(Vec2 size) Parameters size Vec2 Returns Rect Contains(Vec2) public bool Contains(Vec2 vec) Parameters vec Vec2 Returns bool Contains(float, float) public bool Contains(float x, float y) Parameters x float y float Returns bool Equals(Rect) Indicates whether the current object is equal to another object of the same type. public bool Equals(Rect other) Parameters other Rect An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Expand(Vec2) public Rect Expand(Vec2 vec) Parameters vec Vec2 Returns Rect Expand(float) public Rect Expand(float x) Parameters x float Returns Rect Expand(float, float) public Rect Expand(float x, float y) Parameters x float y float Returns Rect FromCenter(Vec2, Vec2) public static Rect FromCenter(Vec2 centerPoint, Vec2 totalSize) Parameters centerPoint Vec2 totalSize Vec2 Returns Rect FromCenter(Vec2, float, float) public static Rect FromCenter(Vec2 centerPoint, float totalSizeX, float totalSizeY) Parameters centerPoint Vec2 totalSizeX float totalSizeY float Returns Rect FromCenter(float, float, Vec2) public static Rect FromCenter(float centerX, float centerY, Vec2 totalSize) Parameters centerX float centerY float totalSize Vec2 Returns Rect FromCenter(float, float, float, float) public static Rect FromCenter(float centerX, float centerY, float totalSizeX, float totalSizeY) Parameters centerX float centerY float totalSizeX float totalSizeY float Returns Rect FromSize(Vec2, Vec2) public static Rect FromSize(Vec2 topLeft, Vec2 size) Parameters topLeft Vec2 size Vec2 Returns Rect FromSize(Vec2, float, float) public static Rect FromSize(Vec2 topLeft, float sizeX, float sizeY) Parameters topLeft Vec2 sizeX float sizeY float Returns Rect FromSize(float, float, Vec2) public static Rect FromSize(float topLeftX, float topLeftY, Vec2 size) Parameters topLeftX float topLeftY float size Vec2 Returns Rect FromSize(float, float, float, float) public static Rect FromSize(float topLeftX, float topLeftY, float sizeX, float sizeY) Parameters topLeftX float topLeftY float sizeX float sizeY float Returns Rect GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersection(Rect) public Rect Intersection(Rect rect) Parameters rect Rect Returns Rect MoveBy(Vec2) public Rect MoveBy(Vec2 amount) Parameters amount Vec2 Returns Rect MoveBy(float, float) public Rect MoveBy(float amountX, float amountY) Parameters amountX float amountY float Returns Rect MoveDown(float) public Rect MoveDown(float amount) Parameters amount float Returns Rect MoveLeft(float) public Rect MoveLeft(float amount) Parameters amount float Returns Rect MoveRight(float) public Rect MoveRight(float amount) Parameters amount float Returns Rect MoveTo(Vec2) public Rect MoveTo(Vec2 position) Parameters position Vec2 Returns Rect MoveUp(float) public Rect MoveUp(float amount) Parameters amount float Returns Rect Overlaps(Rect) public bool Overlaps(Rect rect) Parameters rect Rect Returns bool Relative(Vec2) public Vec2 Relative(Vec2 vec) Parameters vec Vec2 Returns Vec2 Relative(float, float) public Vec2 Relative(float x, float y) Parameters x float y float Returns Vec2 ResizeKeepingAspectRatio(Vec2) public Vec2 ResizeKeepingAspectRatio(Vec2 size) Parameters size Vec2 Returns Vec2 Shrink(Vec2) public Rect Shrink(Vec2 amount) Parameters amount Vec2 Returns Rect Shrink(float) public Rect Shrink(float amount) Parameters amount float Returns Rect Shrink(float, float) public Rect Shrink(float amountX, float amountY) Parameters amountX float amountY float Returns Rect ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. United(Rect) public Rect United(Rect rect) Parameters rect Rect Returns Rect Operators operator ==(Rect, Rect) public static bool operator ==(Rect left, Rect right) Parameters left Rect right Rect Returns bool implicit operator Rectangle(Rect) public static implicit operator Rectangle(Rect rect) Parameters rect Rect Returns Rectangle implicit operator RectangleF(Rect) public static implicit operator RectangleF(Rect rect) Parameters rect Rect Returns RectangleF implicit operator Rect(Rectangle) public static implicit operator Rect(Rectangle rect) Parameters rect Rectangle Returns Rect implicit operator Rect(RectangleF) public static implicit operator Rect(RectangleF rect) Parameters rect RectangleF Returns Rect operator !=(Rect, Rect) public static bool operator !=(Rect left, Rect right) Parameters left Rect right Rect Returns bool"
  },
  "docs/OnixRuntime.Core.Maths.TransformationMatrix.html": {
    "href": "docs/OnixRuntime.Core.Maths.TransformationMatrix.html",
    "title": "Struct TransformationMatrix | Onix Plugin Documentation",
    "summary": "Struct TransformationMatrix Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct TransformationMatrix Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransformationMatrix() public TransformationMatrix() Methods Identity() public static TransformationMatrix Identity() Returns TransformationMatrix Multiply(TransformationMatrix) public TransformationMatrix Multiply(TransformationMatrix other) Parameters other TransformationMatrix Returns TransformationMatrix MultiplyInplace(TransformationMatrix) public TransformationMatrix MultiplyInplace(TransformationMatrix other) Parameters other TransformationMatrix Returns TransformationMatrix Rotate(float) angle is in degrees, it will affect the Z axis public static TransformationMatrix Rotate(float angle) Parameters angle float Returns TransformationMatrix Rotate(float, Vec3) angle is in degrees public static TransformationMatrix Rotate(float angle, Vec3 axis) Parameters angle float axis Vec3 Returns TransformationMatrix Rotate(float, float, float, float) angle is in degrees public static TransformationMatrix Rotate(float angle, float axisX, float axisY, float axisZ = 0) Parameters angle float axisX float axisY float axisZ float Returns TransformationMatrix RotateX(float) angle is in degrees public static TransformationMatrix RotateX(float angle) Parameters angle float Returns TransformationMatrix RotateY(float) angle is in degrees public static TransformationMatrix RotateY(float angle) Parameters angle float Returns TransformationMatrix RotateZ(float) angle is in degrees public static TransformationMatrix RotateZ(float angle) Parameters angle float Returns TransformationMatrix Scale(Vec2, float) public static TransformationMatrix Scale(Vec2 scale2D, float z = 1) Parameters scale2D Vec2 z float Returns TransformationMatrix Scale(Vec3) public static TransformationMatrix Scale(Vec3 scale) Parameters scale Vec3 Returns TransformationMatrix Scale(float) public static TransformationMatrix Scale(float scale) Parameters scale float Returns TransformationMatrix Scale(float, float, float) public static TransformationMatrix Scale(float x, float y, float z = 1) Parameters x float y float z float Returns TransformationMatrix Transform(Vec2) public Vec2 Transform(Vec2 position) Parameters position Vec2 Returns Vec2 Transform(Vec3) public Vec3 Transform(Vec3 position) Parameters position Vec3 Returns Vec3 Transform(float, float) public Vec2 Transform(float x, float y) Parameters x float y float Returns Vec2 Transform(float, float, float) public Vec3 Transform(float x, float y, float z) Parameters x float y float z float Returns Vec3 Translate(Vec2, float) public static TransformationMatrix Translate(Vec2 position2D, float z = 0) Parameters position2D Vec2 z float Returns TransformationMatrix Translate(Vec3) public static TransformationMatrix Translate(Vec3 position) Parameters position Vec3 Returns TransformationMatrix Translate(float, float, float) public static TransformationMatrix Translate(float x, float y, float z = 0) Parameters x float y float z float Returns TransformationMatrix Operators operator *(TransformationMatrix, TransformationMatrix) public static TransformationMatrix operator *(TransformationMatrix left, TransformationMatrix right) Parameters left TransformationMatrix right TransformationMatrix Returns TransformationMatrix"
  },
  "docs/OnixRuntime.Core.Maths.Vec2.html": {
    "href": "docs/OnixRuntime.Core.Maths.Vec2.html",
    "title": "Struct Vec2 | Onix Plugin Documentation",
    "summary": "Struct Vec2 Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct Vec2 : IEquatable<Vec2> Implements IEquatable<Vec2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec2() public Vec2() Vec2(float) public Vec2(float value) Parameters value float Vec2(float, float) public Vec2(float x, float y) Parameters x float y float Fields X public float X Field Value float Y public float Y Field Value float Properties Length public float Length { get; } Property Value float Magnitude public float Magnitude { get; } Property Value float MagnitudeSqr public float MagnitudeSqr { get; } Property Value float Normalized public Vec2 Normalized { get; } Property Value Vec2 One public static Vec2 One { get; } Property Value Vec2 Zero public static Vec2 Zero { get; } Property Value Vec2 Methods Angle(Vec2) public float Angle(Vec2 vec) Parameters vec Vec2 Returns float Clamp(Vec2, Vec2) public Vec2 Clamp(Vec2 min, Vec2 max) Parameters min Vec2 max Vec2 Returns Vec2 Clamp(float, float) public Vec2 Clamp(float min, float max) Parameters min float max float Returns Vec2 Cross(Vec2) public float Cross(Vec2 vec) Parameters vec Vec2 Returns float Distance(Vec2) public float Distance(Vec2 vec) Parameters vec Vec2 Returns float Dot(Vec2) public float Dot(Vec2 vec) Parameters vec Vec2 Returns float Equals(Vec2) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec2 other) Parameters other Vec2 An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vec2, float) public Vec2 Lerp(Vec2 vec, float t) Parameters vec Vec2 t float Returns Vec2 Max(Vec2) public Vec2 Max(Vec2 vec) Parameters vec Vec2 Returns Vec2 Max(float) public Vec2 Max(float value) Parameters value float Returns Vec2 Min(Vec2) public Vec2 Min(Vec2 vec) Parameters vec Vec2 Returns Vec2 Min(float) public Vec2 Min(float value) Parameters value float Returns Vec2 SetDirection(float) public void SetDirection(float angle) Parameters angle float SetMagnitude(float) public void SetMagnitude(float magnitude) Parameters magnitude float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string, CultureInfo?) public string ToString(string format, CultureInfo? formatProvider = null) Parameters format string formatProvider CultureInfo Returns string Vec2Random() public static Vec2 Vec2Random() Returns Vec2 Operators operator +(Vec2, Vec2) public static Vec2 operator +(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator +(Vec2, float) public static Vec2 operator +(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator /(Vec2, Vec2) public static Vec2 operator /(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator /(Vec2, float) public static Vec2 operator /(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator /(float, Vec2) public static Vec2 operator /(float a, Vec2 b) Parameters a float b Vec2 Returns Vec2 operator ==(Vec2, Vec2) public static bool operator ==(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool implicit operator Vector2(Vec2) public static implicit operator Vector2(Vec2 value) Parameters value Vec2 Returns Vector2 implicit operator Vec2(Vector2) public static implicit operator Vec2(Vector2 value) Parameters value Vector2 Returns Vec2 operator !=(Vec2, Vec2) public static bool operator !=(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns bool operator *(Vec2, Vec2) public static Vec2 operator *(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator *(Vec2, float) public static Vec2 operator *(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator *(float, Vec2) public static Vec2 operator *(float a, Vec2 b) Parameters a float b Vec2 Returns Vec2 operator -(Vec2, Vec2) public static Vec2 operator -(Vec2 a, Vec2 b) Parameters a Vec2 b Vec2 Returns Vec2 operator -(Vec2, float) public static Vec2 operator -(Vec2 a, float b) Parameters a Vec2 b float Returns Vec2 operator -(Vec2) public static Vec2 operator -(Vec2 a) Parameters a Vec2 Returns Vec2"
  },
  "docs/OnixRuntime.Core.Maths.Vec3.html": {
    "href": "docs/OnixRuntime.Core.Maths.Vec3.html",
    "title": "Struct Vec3 | Onix Plugin Documentation",
    "summary": "Struct Vec3 Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct Vec3 : IEquatable<Vec3> Implements IEquatable<Vec3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec3() public Vec3() Vec3(BlockPos) public Vec3(BlockPos blockPos) Parameters blockPos BlockPos Vec3(Vector2, float) public Vec3(Vector2 xy, float z = 0) Parameters xy Vector2 z float Vec3(float) public Vec3(float value) Parameters value float Vec3(float, float, float) public Vec3(float x, float y, float z) Parameters x float y float z float Fields X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties Direction public Vec2 Direction { get; } Property Value Vec2 Length public float Length { get; } Property Value float Magnitude public float Magnitude { get; } Property Value float MagnitudeSqr public float MagnitudeSqr { get; } Property Value float Normalized public Vec3 Normalized { get; } Property Value Vec3 One public static Vec3 One { get; } Property Value Vec3 Zero public static Vec3 Zero { get; } Property Value Vec3 Methods Angle(Vec3) public float Angle(Vec3 vec) Parameters vec Vec3 Returns float Clamp(Vec3, Vec3) public Vec3 Clamp(Vec3 min, Vec3 max) Parameters min Vec3 max Vec3 Returns Vec3 Clamp(float, float) public Vec3 Clamp(float min, float max) Parameters min float max float Returns Vec3 Cross(Vec3) public Vec3 Cross(Vec3 vec) Parameters vec Vec3 Returns Vec3 Distance(Vec3) public float Distance(Vec3 vec) Parameters vec Vec3 Returns float Dot(Vec3) public float Dot(Vec3 vec) Parameters vec Vec3 Returns float Equals(Vec3) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec3 other) Parameters other Vec3 An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vec3, float) public Vec3 Lerp(Vec3 vec, float t) Parameters vec Vec3 t float Returns Vec3 Max(Vec3) public Vec3 Max(Vec3 vec) Parameters vec Vec3 Returns Vec3 Min(Vec3) public Vec3 Min(Vec3 vec) Parameters vec Vec3 Returns Vec3 Rotate(float, float) public Vec3 Rotate(float yaw, float pitch) Parameters yaw float pitch float Returns Vec3 SetDirection(Vec2) public void SetDirection(Vec2 direction) Parameters direction Vec2 SetMagnitude(float) public void SetMagnitude(float magnitude) Parameters magnitude float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string, CultureInfo?) public string ToString(string format, CultureInfo? culture = null) Parameters format string culture CultureInfo Returns string Operators operator +(Vec3, Vec3) public static Vec3 operator +(Vec3 left, Vec3 right) Parameters left Vec3 right Vec3 Returns Vec3 operator +(Vec3, float) public static Vec3 operator +(Vec3 vec, float value) Parameters vec Vec3 value float Returns Vec3 operator /(Vec3, Vec3) public static Vec3 operator /(Vec3 vec, Vec3 scalar) Parameters vec Vec3 scalar Vec3 Returns Vec3 operator /(Vec3, float) public static Vec3 operator /(Vec3 vec, float scalar) Parameters vec Vec3 scalar float Returns Vec3 operator ==(Vec3, Vec3) public static bool operator ==(Vec3 left, Vec3 right) Parameters left Vec3 right Vec3 Returns bool implicit operator Vector3(Vec3) public static implicit operator Vector3(Vec3 vec) Parameters vec Vec3 Returns Vector3 implicit operator Vec3(Vector3) public static implicit operator Vec3(Vector3 vec) Parameters vec Vector3 Returns Vec3 operator !=(Vec3, Vec3) public static bool operator !=(Vec3 left, Vec3 right) Parameters left Vec3 right Vec3 Returns bool operator *(Vec3, Vec3) public static Vec3 operator *(Vec3 vec, Vec3 other) Parameters vec Vec3 other Vec3 Returns Vec3 operator *(Vec3, float) public static Vec3 operator *(Vec3 vec, float scalar) Parameters vec Vec3 scalar float Returns Vec3 operator *(float, Vec3) public static Vec3 operator *(float scalar, Vec3 vec) Parameters scalar float vec Vec3 Returns Vec3 operator -(Vec3, Vec3) public static Vec3 operator -(Vec3 left, Vec3 right) Parameters left Vec3 right Vec3 Returns Vec3 operator -(Vec3, float) public static Vec3 operator -(Vec3 vec, float value) Parameters vec Vec3 value float Returns Vec3 operator -(Vec3) public static Vec3 operator -(Vec3 vec) Parameters vec Vec3 Returns Vec3"
  },
  "docs/OnixRuntime.Core.Maths.Vec4.html": {
    "href": "docs/OnixRuntime.Core.Maths.Vec4.html",
    "title": "Struct Vec4 | Onix Plugin Documentation",
    "summary": "Struct Vec4 Namespace OnixRuntime.Core.Maths Assembly OnixRuntime.dll public struct Vec4 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec4() public Vec4() Vec4(Vec3, float) public Vec4(Vec3 xyz, float w = 1) Parameters xyz Vec3 w float Vec4(float, float, float, float) public Vec4(float x, float y, float z, float w) Parameters x float y float z float w float Fields W public float W Field Value float X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Operators implicit operator Vector4(Vec4) public static implicit operator Vector4(Vec4 vec) Parameters vec Vec4 Returns Vector4 implicit operator Vec4(Vector4) public static implicit operator Vec4(Vector4 vec) Parameters vec Vector4 Returns Vec4"
  },
  "docs/OnixRuntime.Core.Maths.html": {
    "href": "docs/OnixRuntime.Core.Maths.html",
    "title": "Namespace OnixRuntime.Core.Maths | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Maths Structs Angles BlockPos BoundingBox ChunkPos ColorF Rect TransformationMatrix Vec2 Vec3 Vec4"
  },
  "docs/OnixRuntime.Core.NBT.ArrayListTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.ArrayListTag.html",
    "title": "Class ArrayListTag | Onix Plugin Documentation",
    "summary": "Class ArrayListTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class ArrayListTag : NbtTag, IEnumerable<NbtTag>, IEnumerable Inheritance object NbtTag ArrayListTag Implements IEnumerable<NbtTag> IEnumerable Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArrayListTag() public ArrayListTag() ArrayListTag(List<NbtTag>) public ArrayListTag(List<NbtTag> value) Parameters value List<NbtTag> Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public List<NbtTag> Value { get; set; } Property Value List<NbtTag> ValueTagType public NbtTagType ValueTagType { get; } Property Value NbtTagType Methods Add(NbtTag) public void Add(NbtTag tag) Parameters tag NbtTag GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<NbtTag> GetEnumerator() Returns IEnumerator<NbtTag> An enumerator that can be used to iterate through the collection."
  },
  "docs/OnixRuntime.Core.NBT.ByteArrayTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.ByteArrayTag.html",
    "title": "Class ByteArrayTag | Onix Plugin Documentation",
    "summary": "Class ByteArrayTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class ByteArrayTag : NbtTag Inheritance object NbtTag ByteArrayTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ByteArrayTag() public ByteArrayTag() ByteArrayTag(byte[]) public ByteArrayTag(byte[] value) Parameters value byte[] Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public byte[] Value { get; set; } Property Value byte[]"
  },
  "docs/OnixRuntime.Core.NBT.ByteTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.ByteTag.html",
    "title": "Class ByteTag | Onix Plugin Documentation",
    "summary": "Class ByteTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class ByteTag : NbtTag Inheritance object NbtTag ByteTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ByteTag() public ByteTag() ByteTag(byte) public ByteTag(byte value) Parameters value byte ByteTag(sbyte) public ByteTag(sbyte value) Parameters value sbyte Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public sbyte Value { get; set; } Property Value sbyte"
  },
  "docs/OnixRuntime.Core.NBT.DoubleTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.DoubleTag.html",
    "title": "Class DoubleTag | Onix Plugin Documentation",
    "summary": "Class DoubleTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class DoubleTag : NbtTag Inheritance object NbtTag DoubleTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DoubleTag() public DoubleTag() DoubleTag(double) public DoubleTag(double value) Parameters value double Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public double Value { get; set; } Property Value double"
  },
  "docs/OnixRuntime.Core.NBT.FloatTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.FloatTag.html",
    "title": "Class FloatTag | Onix Plugin Documentation",
    "summary": "Class FloatTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class FloatTag : NbtTag Inheritance object NbtTag FloatTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloatTag() public FloatTag() FloatTag(float) public FloatTag(float value) Parameters value float Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public float Value { get; set; } Property Value float"
  },
  "docs/OnixRuntime.Core.NBT.IntArrayTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.IntArrayTag.html",
    "title": "Class IntArrayTag | Onix Plugin Documentation",
    "summary": "Class IntArrayTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class IntArrayTag : NbtTag Inheritance object NbtTag IntArrayTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntArrayTag() public IntArrayTag() IntArrayTag(int[]) public IntArrayTag(int[] value) Parameters value int[] Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public int[] Value { get; set; } Property Value int[]"
  },
  "docs/OnixRuntime.Core.NBT.IntTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.IntTag.html",
    "title": "Class IntTag | Onix Plugin Documentation",
    "summary": "Class IntTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class IntTag : NbtTag Inheritance object NbtTag IntTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntTag() public IntTag() IntTag(int) public IntTag(int value) Parameters value int Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public int Value { get; set; } Property Value int"
  },
  "docs/OnixRuntime.Core.NBT.LongTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.LongTag.html",
    "title": "Class LongTag | Onix Plugin Documentation",
    "summary": "Class LongTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class LongTag : NbtTag Inheritance object NbtTag LongTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LongTag() public LongTag() LongTag(long) public LongTag(long value) Parameters value long Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public long Value { get; set; } Property Value long"
  },
  "docs/OnixRuntime.Core.NBT.NbtSerializer.html": {
    "href": "docs/OnixRuntime.Core.NBT.NbtSerializer.html",
    "title": "Class NbtSerializer | Onix Plugin Documentation",
    "summary": "Class NbtSerializer Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public static class NbtSerializer Inheritance object NbtSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeserializeBinaryTag(byte[]) public static NbtTag DeserializeBinaryTag(byte[] data) Parameters data byte[] Returns NbtTag DeserializeBinaryTag(BinaryReader) public static NbtTag DeserializeBinaryTag(BinaryReader br) Parameters br BinaryReader Returns NbtTag DeserializeBinaryTag(Stream) public static NbtTag DeserializeBinaryTag(Stream stream) Parameters stream Stream Returns NbtTag DeserializeJsonTag(string) public static NbtTag DeserializeJsonTag(string tagText) Parameters tagText string Returns NbtTag SerializeBinaryTag(NbtTag) public static byte[] SerializeBinaryTag(NbtTag tag) Parameters tag NbtTag Returns byte[] SerializeJsonTag(NbtTag, bool) public static string SerializeJsonTag(NbtTag tag, bool pretty = false) Parameters tag NbtTag pretty bool Returns string"
  },
  "docs/OnixRuntime.Core.NBT.NbtTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.NbtTag.html",
    "title": "Class NbtTag | Onix Plugin Documentation",
    "summary": "Class NbtTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public abstract class NbtTag Inheritance object NbtTag Derived ArrayListTag ByteArrayTag ByteTag DoubleTag FloatTag IntArrayTag IntTag LongTag ObjectTag ShortTag StringTag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TagType public abstract NbtTagType TagType { get; } Property Value NbtTagType Methods CreateTag(NbtTagType) public static NbtTag CreateTag(NbtTagType type) Parameters type NbtTagType Returns NbtTag"
  },
  "docs/OnixRuntime.Core.NBT.NbtTagType.html": {
    "href": "docs/OnixRuntime.Core.NBT.NbtTagType.html",
    "title": "Enum NbtTagType | Onix Plugin Documentation",
    "summary": "Enum NbtTagType Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public enum NbtTagType Fields ArrayList = 9 Byte = 1 ByteArray = 7 Double = 6 End = 0 Float = 5 Int = 3 IntArray = 11 Long = 4 Object = 10 Short = 2 String = 8"
  },
  "docs/OnixRuntime.Core.NBT.ObjectTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.ObjectTag.html",
    "title": "Class ObjectTag | Onix Plugin Documentation",
    "summary": "Class ObjectTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class ObjectTag : NbtTag Inheritance object NbtTag ObjectTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectTag() public ObjectTag() ObjectTag(Dictionary<string, NbtTag>) public ObjectTag(Dictionary<string, NbtTag> value) Parameters value Dictionary<string, NbtTag> Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public Dictionary<string, NbtTag> Value { get; set; } Property Value Dictionary<string, NbtTag>"
  },
  "docs/OnixRuntime.Core.NBT.ShortTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.ShortTag.html",
    "title": "Class ShortTag | Onix Plugin Documentation",
    "summary": "Class ShortTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class ShortTag : NbtTag Inheritance object NbtTag ShortTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShortTag() public ShortTag() ShortTag(short) public ShortTag(short value) Parameters value short Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public short Value { get; set; } Property Value short"
  },
  "docs/OnixRuntime.Core.NBT.StringTag.html": {
    "href": "docs/OnixRuntime.Core.NBT.StringTag.html",
    "title": "Class StringTag | Onix Plugin Documentation",
    "summary": "Class StringTag Namespace OnixRuntime.Core.NBT Assembly OnixRuntime.dll public class StringTag : NbtTag Inheritance object NbtTag StringTag Inherited Members NbtTag.CreateTag(NbtTagType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StringTag() public StringTag() StringTag(string) public StringTag(string value) Parameters value string Properties TagType public override NbtTagType TagType { get; } Property Value NbtTagType Value public string Value { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Core.NBT.html": {
    "href": "docs/OnixRuntime.Core.NBT.html",
    "title": "Namespace OnixRuntime.Core.NBT | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.NBT Classes ArrayListTag ByteArrayTag ByteTag DoubleTag FloatTag IntArrayTag IntTag LongTag NbtSerializer NbtTag ObjectTag ShortTag StringTag Enums NbtTagType"
  },
  "docs/OnixRuntime.Core.Onix.html": {
    "href": "docs/OnixRuntime.Core.Onix.html",
    "title": "Class Onix | Onix Plugin Documentation",
    "summary": "Class Onix Namespace OnixRuntime.Core Assembly OnixRuntime.dll public class Onix Inheritance object Onix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Client public static OnixClientThings Client { get; } Property Value OnixClientThings ConnectionInfo public static ConnectionInfo ConnectionInfo { get; } Property Value ConnectionInfo Events public static OnixEvents Events { get; } Property Value OnixEvents Game public static OnixGame Game { get; } Property Value OnixGame Gui public static GameGuiInfo Gui { get; } Property Value GameGuiInfo Input public static GameInputHandler Input { get; } Property Value GameInputHandler LocalPlayer public static LocalPlayer? LocalPlayer { get; } Property Value LocalPlayer LocalServer public static LocalGameServer? LocalServer { get; } Property Value LocalGameServer Render public static RenderContexes Render { get; } Property Value RenderContexes World public static RuntimeWorld? World { get; } Property Value RuntimeWorld"
  },
  "docs/OnixRuntime.Core.OnixClientThings.html": {
    "href": "docs/OnixRuntime.Core.OnixClientThings.html",
    "title": "Class OnixClientThings | Onix Plugin Documentation",
    "summary": "Class OnixClientThings Namespace OnixRuntime.Core Assembly OnixRuntime.dll public class OnixClientThings Inheritance object OnixClientThings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Notify(string, string, float, ClientNotificationType, bool) public void Notify(string title, string message = \"\", float duration = 5, ClientNotificationType type = ClientNotificationType.Banner, bool mute = false) Parameters title string message string duration float type ClientNotificationType mute bool NotifyBanner(string, string, float, bool) public void NotifyBanner(string title, string message = \"\", float duration = 5, bool mute = false) Parameters title string message string duration float mute bool NotifyTray(string, string, float, bool) public void NotifyTray(string title, string message = \"\", float duration = 5, bool mute = false) Parameters title string message string duration float mute bool OpenDirectory(string) public void OpenDirectory(string path) Parameters path string OpenFile(string) public void OpenFile(string path) Parameters path string OpenUrl(string) public void OpenUrl(string url) Parameters url string"
  },
  "docs/OnixRuntime.Core.OnixGame.html": {
    "href": "docs/OnixRuntime.Core.OnixGame.html",
    "title": "Class OnixGame | Onix Plugin Documentation",
    "summary": "Class OnixGame Namespace OnixRuntime.Core Assembly OnixRuntime.dll public class OnixGame Inheritance object OnixGame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LanguageCode public string LanguageCode { get; } Property Value string Version public PluginSemVersion Version { get; } Property Value PluginSemVersion Methods ExecuteCommand(string) public void ExecuteCommand(string command) Parameters command string SendChatMessage(string) public void SendChatMessage(string message) Parameters message string"
  },
  "docs/OnixRuntime.Core.Rendering.ChatMessage.html": {
    "href": "docs/OnixRuntime.Core.Rendering.ChatMessage.html",
    "title": "Class ChatMessage | Onix Plugin Documentation",
    "summary": "Class ChatMessage Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class ChatMessage : MemoryAddressContainer Inheritance object MemoryAddressContainer ChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComputedMessage public string ComputedMessage { get; set; } Property Value string Message public string Message { get; set; } Property Value string ScreenTime public float ScreenTime { get; set; } Property Value float TTSMessage public string TTSMessage { get; set; } Property Value string Type public ChatMessageType Type { get; } Property Value ChatMessageType Username public string Username { get; set; } Property Value string"
  },
  "docs/OnixRuntime.Core.Rendering.ChatMessageType.html": {
    "href": "docs/OnixRuntime.Core.Rendering.ChatMessageType.html",
    "title": "Enum ChatMessageType | Onix Plugin Documentation",
    "summary": "Enum ChatMessageType Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public enum ChatMessageType Fields Announcement = 8 Chat = 1 JukeboxPopup = 4 Popup = 3 Raw = 0 SystemMessage = 6 TextObject = 9 Tip = 5 Translate = 2 Whisper = 7"
  },
  "docs/OnixRuntime.Core.Rendering.GameGuiInfo.html": {
    "href": "docs/OnixRuntime.Core.Rendering.GameGuiInfo.html",
    "title": "Class GameGuiInfo | Onix Plugin Documentation",
    "summary": "Class GameGuiInfo Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class GameGuiInfo : MemoryAddressContainer Inheritance object MemoryAddressContainer GameGuiInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChatMessages public ChatMessage[] ChatMessages { get; } Property Value ChatMessage[] CurrentScreenName public string CurrentScreenName { get; } Property Value string GuiScale public float GuiScale { get; set; } Property Value float GuiScaleInverse public float GuiScaleInverse { get; } Property Value float MouseGrabbed public bool MouseGrabbed { get; set; } Property Value bool MousePosition public Vec2 MousePosition { get; } Property Value Vec2 RawScreenSize public Vec2 RawScreenSize { get; } Property Value Vec2 ScreenSize public Vec2 ScreenSize { get; } Property Value Vec2 TitleTimes public GameTitleTimes TitleTimes { get; set; } Property Value GameTitleTimes Methods ClearChatMessages() WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this public void ClearChatMessages() ClearTitle() public void ClearTitle() RemoveChatMessage(int) WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this public void RemoveChatMessage(int index) Parameters index int The 0 based index of the message to remove SetActionbarText(string) public void SetActionbarText(string text) Parameters text string SetSubTitleText(string) public void SetSubTitleText(string text) Parameters text string SetTitleText(string) public void SetTitleText(string text) Parameters text string SetTitleText(string, GameTitleType) public void SetTitleText(string text, GameTitleType type) Parameters text string type GameTitleType"
  },
  "docs/OnixRuntime.Core.Rendering.GameMeshBuilder.GameMeshBuilderSession.html": {
    "href": "docs/OnixRuntime.Core.Rendering.GameMeshBuilder.GameMeshBuilderSession.html",
    "title": "Struct GameMeshBuilder.GameMeshBuilderSession | Onix Plugin Documentation",
    "summary": "Struct GameMeshBuilder.GameMeshBuilderSession Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct GameMeshBuilder.GameMeshBuilderSession : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GameMeshBuilderSession(GameMeshBuilder, MeshBuilderPrimitiveType, ColorF?, TexturePath?) public GameMeshBuilderSession(GameMeshBuilder builder, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null) Parameters builder GameMeshBuilder primitiveType MeshBuilderPrimitiveType color ColorF? texture TexturePath GameMeshBuilderSession(GameMeshBuilder, TexturePath?, MeshBuilderPrimitiveType, ColorF?) public GameMeshBuilderSession(GameMeshBuilder builder, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null) Parameters builder GameMeshBuilder texture TexturePath primitiveType MeshBuilderPrimitiveType color ColorF? GameMeshBuilderSession(GameMeshBuilder, ColorF?, MeshBuilderPrimitiveType, TexturePath?) public GameMeshBuilderSession(GameMeshBuilder builder, ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null) Parameters builder GameMeshBuilder color ColorF? primitiveType MeshBuilderPrimitiveType texture TexturePath GameMeshBuilderSession(GameMeshBuilder, ColorF?, TexturePath?, MeshBuilderPrimitiveType) public GameMeshBuilderSession(GameMeshBuilder builder, ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters builder GameMeshBuilder color ColorF? texture TexturePath primitiveType MeshBuilderPrimitiveType Properties Builder public GameMeshBuilder Builder { get; } Property Value GameMeshBuilder Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.GameMeshBuilder.html": {
    "href": "docs/OnixRuntime.Core.Rendering.GameMeshBuilder.html",
    "title": "Class GameMeshBuilder | Onix Plugin Documentation",
    "summary": "Class GameMeshBuilder Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class GameMeshBuilder : MemoryAddressContainer Inheritance object MemoryAddressContainer GameMeshBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasStarted public bool HasStarted { get; } Property Value bool PrimitiveType public MeshBuilderPrimitiveType PrimitiveType { get; } Property Value MeshBuilderPrimitiveType Methods AddBoundingBoxVertices(BoundingBox) public void AddBoundingBoxVertices(BoundingBox box) Parameters box BoundingBox AddCircleOutlineVertices(Vec2, float, float, int) public void AddCircleOutlineVertices(Vec2 centerPosition, float radius, float lineWidth, int iterations) Parameters centerPosition Vec2 radius float lineWidth float iterations int AddCircleOutlineVertices(float, float, float, float, int) public void AddCircleOutlineVertices(float x, float y, float radius, float lineWidth, int iterations) Parameters x float y float radius float lineWidth float iterations int AddCircleVertices(Vec2, float, int) public void AddCircleVertices(Vec2 centerPosition, float radius, int iterations) Parameters centerPosition Vec2 radius float iterations int AddCircleVertices(float, float, float, int) public void AddCircleVertices(float x, float y, float radius, int iterations) Parameters x float y float radius float iterations int AddEllipseOutlineVertices(Vec2, Vec2, float, int) public void AddEllipseOutlineVertices(Vec2 centerPosition, Vec2 radius, float lineWidth, int iterations) Parameters centerPosition Vec2 radius Vec2 lineWidth float iterations int AddEllipseOutlineVertices(Vec2, float, float, float, int) public void AddEllipseOutlineVertices(Vec2 centerPosition, float radiusX, float radiusY, float lineWidth, int iterations) Parameters centerPosition Vec2 radiusX float radiusY float lineWidth float iterations int AddEllipseOutlineVertices(float, float, Vec2, float, int) public void AddEllipseOutlineVertices(float x, float y, Vec2 radius, float lineWidth, int iterations) Parameters x float y float radius Vec2 lineWidth float iterations int AddEllipseOutlineVertices(float, float, float, float, float, int) public void AddEllipseOutlineVertices(float x, float y, float radiusX, float radiusY, float lineWidth, int iterations) Parameters x float y float radiusX float radiusY float lineWidth float iterations int AddEllipseVertices(Vec2, Vec2, int) public void AddEllipseVertices(Vec2 centerPosition, Vec2 radius, int iterations) Parameters centerPosition Vec2 radius Vec2 iterations int AddEllipseVertices(Vec2, float, float, int) public void AddEllipseVertices(Vec2 centerPosition, float radiusX, float radiusY, int iterations) Parameters centerPosition Vec2 radiusX float radiusY float iterations int AddEllipseVertices(float, float, Vec2, int) public void AddEllipseVertices(float x, float y, Vec2 radius, int iterations) Parameters x float y float radius Vec2 iterations int AddEllipseVertices(float, float, float, float, int) public void AddEllipseVertices(float x, float y, float radiusX, float radiusY, int iterations) Parameters x float y float radiusX float radiusY float iterations int AddQuadGradientVertices(Vec2, ColorF, Vec2, ColorF, Vec2, ColorF, Vec2, ColorF) public void AddQuadGradientVertices(Vec2 TopLeft, ColorF TopLeftColor, Vec2 TopRight, ColorF TopRightColor, Vec2 BottomLeft, ColorF BottomLeftcolor, Vec2 BottomRight, ColorF BottomRightColor) Parameters TopLeft Vec2 TopLeftColor ColorF TopRight Vec2 TopRightColor ColorF BottomLeft Vec2 BottomLeftcolor ColorF BottomRight Vec2 BottomRightColor ColorF AddQuadGradientVertices(Vec2, uint, Vec2, uint, Vec2, uint, Vec2, uint) public void AddQuadGradientVertices(Vec2 TopLeft, uint TopLeftColor, Vec2 TopRight, uint TopRightColor, Vec2 BottomLeft, uint BottomLeftcolor, Vec2 BottomRight, uint BottomRightColor) Parameters TopLeft Vec2 TopLeftColor uint TopRight Vec2 TopRightColor uint BottomLeft Vec2 BottomLeftcolor uint BottomRight Vec2 BottomRightColor uint AddQuadGradientVertices(Vec3, ColorF, Vec3, ColorF, Vec3, ColorF, Vec3, ColorF) public void AddQuadGradientVertices(Vec3 TopLeft, ColorF TopLeftColor, Vec3 TopRight, ColorF TopRightColor, Vec3 BottomLeft, ColorF BottomLeftcolor, Vec3 BottomRight, ColorF BottomRightColor) Parameters TopLeft Vec3 TopLeftColor ColorF TopRight Vec3 TopRightColor ColorF BottomLeft Vec3 BottomLeftcolor ColorF BottomRight Vec3 BottomRightColor ColorF AddQuadGradientVertices(Vec3, uint, Vec3, uint, Vec3, uint, Vec3, uint) public void AddQuadGradientVertices(Vec3 TopLeft, uint TopLeftColor, Vec3 TopRight, uint TopRightColor, Vec3 BottomLeft, uint BottomLeftcolor, Vec3 BottomRight, uint BottomRightColor) Parameters TopLeft Vec3 TopLeftColor uint TopRight Vec3 TopRightColor uint BottomLeft Vec3 BottomLeftcolor uint BottomRight Vec3 BottomRightColor uint AddQuadQuadVertices(Vec2, Vec2, Vec2, Vec2) public void AddQuadQuadVertices(Vec2 TopLeft, Vec2 TopRight, Vec2 BottomLeft, Vec2 BottomRight) Parameters TopLeft Vec2 TopRight Vec2 BottomLeft Vec2 BottomRight Vec2 AddQuadQuadVertices(Vec3, Vec3, Vec3, Vec3) public void AddQuadQuadVertices(Vec3 TopLeft, Vec3 TopRight, Vec3 BottomLeft, Vec3 BottomRight) Parameters TopLeft Vec3 TopRight Vec3 BottomLeft Vec3 BottomRight Vec3 AddQuadUvGradientVertices(Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF) public void AddQuadUvGradientVertices(Vec2 TopLeft, Vec2 TopLeftUV, ColorF TopLeftColor, Vec2 TopRight, Vec2 TopRightUV, ColorF TopRightColor, Vec2 BottomLeft, Vec2 BottomLeftUV, ColorF BottomLeftColor, Vec2 BottomRight, Vec2 BottomRightUV, ColorF BottomRightColor) Parameters TopLeft Vec2 TopLeftUV Vec2 TopLeftColor ColorF TopRight Vec2 TopRightUV Vec2 TopRightColor ColorF BottomLeft Vec2 BottomLeftUV Vec2 BottomLeftColor ColorF BottomRight Vec2 BottomRightUV Vec2 BottomRightColor ColorF AddQuadUvGradientVertices(Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint) public void AddQuadUvGradientVertices(Vec2 TopLeft, Vec2 TopLeftUV, uint TopLeftColor, Vec2 TopRight, Vec2 TopRightUV, uint TopRightColor, Vec2 BottomLeft, Vec2 BottomLeftUV, uint BottomLeftColor, Vec2 BottomRight, Vec2 BottomRightUV, uint BottomRightColor) Parameters TopLeft Vec2 TopLeftUV Vec2 TopLeftColor uint TopRight Vec2 TopRightUV Vec2 TopRightColor uint BottomLeft Vec2 BottomLeftUV Vec2 BottomLeftColor uint BottomRight Vec2 BottomRightUV Vec2 BottomRightColor uint AddQuadUvGradientVertices(Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF) public void AddQuadUvGradientVertices(Vec3 TopLeft, Vec2 TopLeftUV, ColorF TopLeftColor, Vec3 TopRight, Vec2 TopRightUV, ColorF TopRightColor, Vec3 BottomLeft, Vec2 BottomLeftUV, ColorF BottomLeftColor, Vec3 BottomRight, Vec2 BottomRightUV, ColorF BottomRightColor) Parameters TopLeft Vec3 TopLeftUV Vec2 TopLeftColor ColorF TopRight Vec3 TopRightUV Vec2 TopRightColor ColorF BottomLeft Vec3 BottomLeftUV Vec2 BottomLeftColor ColorF BottomRight Vec3 BottomRightUV Vec2 BottomRightColor ColorF AddQuadUvGradientVertices(Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint) public void AddQuadUvGradientVertices(Vec3 TopLeft, Vec2 TopLeftUV, uint TopLeftColor, Vec3 TopRight, Vec2 TopRightUV, uint TopRightColor, Vec3 BottomLeft, Vec2 BottomLeftUV, uint BottomLeftColor, Vec3 BottomRight, Vec2 BottomRightUV, uint BottomRightColor) Parameters TopLeft Vec3 TopLeftUV Vec2 TopLeftColor uint TopRight Vec3 TopRightUV Vec2 TopRightColor uint BottomLeft Vec3 BottomLeftUV Vec2 BottomLeftColor uint BottomRight Vec3 BottomRightUV Vec2 BottomRightColor uint AddQuadUvVertices(Vec2, Vec2, Vec2, Vec2, Vec2, Vec2, Vec2, Vec2) public void AddQuadUvVertices(Vec2 TopLeft, Vec2 TopLeftUV, Vec2 TopRight, Vec2 TopRightUV, Vec2 BottomLeft, Vec2 BottomLeftUV, Vec2 BottomRight, Vec2 BottomRightUV) Parameters TopLeft Vec2 TopLeftUV Vec2 TopRight Vec2 TopRightUV Vec2 BottomLeft Vec2 BottomLeftUV Vec2 BottomRight Vec2 BottomRightUV Vec2 AddQuadUvVertices(Vec3, Vec2, Vec3, Vec2, Vec3, Vec2, Vec3, Vec2) public void AddQuadUvVertices(Vec3 TopLeft, Vec2 TopLeftUV, Vec3 TopRight, Vec2 TopRightUV, Vec3 BottomLeft, Vec2 BottomLeftUV, Vec3 BottomRight, Vec2 BottomRightUV) Parameters TopLeft Vec3 TopLeftUV Vec2 TopRight Vec3 TopRightUV Vec2 BottomLeft Vec3 BottomLeftUV Vec2 BottomRight Vec3 BottomRightUV Vec2 AddRoundRectOutlineVertices(Rect, float, float, int) public void AddRoundRectOutlineVertices(Rect position, float cornerRadius, float width, int iterations) Parameters position Rect cornerRadius float width float iterations int AddRoundRectVertices(Rect, float, int) public void AddRoundRectVertices(Rect position, float cornerRadius, int iterations) Parameters position Rect cornerRadius float iterations int AddTriangleGradientVertices(Vec2, ColorF, Vec2, ColorF, Vec2, ColorF) public void AddTriangleGradientVertices(Vec2 point1, ColorF point1Color, Vec2 point2, ColorF point2Color, Vec2 point3, ColorF point3Color) Parameters point1 Vec2 point1Color ColorF point2 Vec2 point2Color ColorF point3 Vec2 point3Color ColorF AddTriangleGradientVertices(Vec2, uint, Vec2, uint, Vec2, uint) public void AddTriangleGradientVertices(Vec2 point1, uint point1Color, Vec2 point2, uint point2Color, Vec2 point3, uint point3Color) Parameters point1 Vec2 point1Color uint point2 Vec2 point2Color uint point3 Vec2 point3Color uint AddTriangleGradientVertices(Vec3, ColorF, Vec3, ColorF, Vec3, ColorF) public void AddTriangleGradientVertices(Vec3 point1, ColorF point1Color, Vec3 point2, ColorF point2Color, Vec3 point3, ColorF point3Color) Parameters point1 Vec3 point1Color ColorF point2 Vec3 point2Color ColorF point3 Vec3 point3Color ColorF AddTriangleGradientVertices(Vec3, uint, Vec3, uint, Vec3, uint) public void AddTriangleGradientVertices(Vec3 point1, uint point1Color, Vec3 point2, uint point2Color, Vec3 point3, uint point3Color) Parameters point1 Vec3 point1Color uint point2 Vec3 point2Color uint point3 Vec3 point3Color uint AddTriangleUvGradientVertices(Vec2, Vec2, ColorF, Vec2, Vec2, ColorF, Vec2, Vec2, ColorF) public void AddTriangleUvGradientVertices(Vec2 point1, Vec2 point1UV, ColorF point1Color, Vec2 point2, Vec2 point2UV, ColorF point2Color, Vec2 point3, Vec2 point3UV, ColorF point3Color) Parameters point1 Vec2 point1UV Vec2 point1Color ColorF point2 Vec2 point2UV Vec2 point2Color ColorF point3 Vec2 point3UV Vec2 point3Color ColorF AddTriangleUvGradientVertices(Vec2, Vec2, uint, Vec2, Vec2, uint, Vec2, Vec2, uint) public void AddTriangleUvGradientVertices(Vec2 point1, Vec2 point1UV, uint point1Color, Vec2 point2, Vec2 point2UV, uint point2Color, Vec2 point3, Vec2 point3UV, uint point3Color) Parameters point1 Vec2 point1UV Vec2 point1Color uint point2 Vec2 point2UV Vec2 point2Color uint point3 Vec2 point3UV Vec2 point3Color uint AddTriangleUvGradientVertices(Vec3, Vec2, ColorF, Vec3, Vec2, ColorF, Vec3, Vec2, ColorF) public void AddTriangleUvGradientVertices(Vec3 point1, Vec2 point1UV, ColorF point1Color, Vec3 point2, Vec2 point2UV, ColorF point2Color, Vec3 point3, Vec2 point3UV, ColorF point3Color) Parameters point1 Vec3 point1UV Vec2 point1Color ColorF point2 Vec3 point2UV Vec2 point2Color ColorF point3 Vec3 point3UV Vec2 point3Color ColorF AddTriangleUvGradientVertices(Vec3, Vec2, uint, Vec3, Vec2, uint, Vec3, Vec2, uint) public void AddTriangleUvGradientVertices(Vec3 point1, Vec2 point1UV, uint point1Color, Vec3 point2, Vec2 point2UV, uint point2Color, Vec3 point3, Vec2 point3UV, uint point3Color) Parameters point1 Vec3 point1UV Vec2 point1Color uint point2 Vec3 point2UV Vec2 point2Color uint point3 Vec3 point3UV Vec2 point3Color uint AddTriangleUvVertices(Vec2, Vec2, Vec2, Vec2, Vec2, Vec2) public void AddTriangleUvVertices(Vec2 point1, Vec2 point1UV, Vec2 point2, Vec2 point2UV, Vec2 point3, Vec2 point3UV) Parameters point1 Vec2 point1UV Vec2 point2 Vec2 point2UV Vec2 point3 Vec2 point3UV Vec2 AddTriangleUvVertices(Vec3, Vec2, Vec3, Vec2, Vec3, Vec2) public void AddTriangleUvVertices(Vec3 point1, Vec2 point1UV, Vec3 point2, Vec2 point2UV, Vec3 point3, Vec2 point3UV) Parameters point1 Vec3 point1UV Vec2 point2 Vec3 point2UV Vec2 point3 Vec3 point3UV Vec2 AddTriangleVertices(Vec2, Vec2, Vec2) public void AddTriangleVertices(Vec2 point1, Vec2 point2, Vec2 point3) Parameters point1 Vec2 point2 Vec2 point3 Vec2 AddTriangleVertices(Vec3, Vec3, Vec3) public void AddTriangleVertices(Vec3 point1, Vec3 point2, Vec3 point3) Parameters point1 Vec3 point2 Vec3 point3 Vec3 Color(ColorF) public void Color(ColorF color) Parameters color ColorF Color(uint) public void Color(uint color) Parameters color uint New(ColorF, MeshBuilderPrimitiveType) public void New(ColorF color, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters color ColorF primitiveType MeshBuilderPrimitiveType New(MeshBuilderPrimitiveType) public void New(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters primitiveType MeshBuilderPrimitiveType NewSession(MeshBuilderPrimitiveType, ColorF?, TexturePath?) public GameMeshBuilder.GameMeshBuilderSession NewSession(MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null, TexturePath? texture = null) Parameters primitiveType MeshBuilderPrimitiveType color ColorF? texture TexturePath Returns GameMeshBuilder.GameMeshBuilderSession NewSession(TexturePath?, MeshBuilderPrimitiveType, ColorF?) public GameMeshBuilder.GameMeshBuilderSession NewSession(TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, ColorF? color = null) Parameters texture TexturePath primitiveType MeshBuilderPrimitiveType color ColorF? Returns GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF?, MeshBuilderPrimitiveType, TexturePath?) public GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF? color = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad, TexturePath? texture = null) Parameters color ColorF? primitiveType MeshBuilderPrimitiveType texture TexturePath Returns GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF?, TexturePath?, MeshBuilderPrimitiveType) public GameMeshBuilder.GameMeshBuilderSession NewSession(ColorF? color = null, TexturePath? texture = null, MeshBuilderPrimitiveType primitiveType = MeshBuilderPrimitiveType.Quad) Parameters color ColorF? texture TexturePath primitiveType MeshBuilderPrimitiveType Returns GameMeshBuilder.GameMeshBuilderSession Normal(Vec3) public void Normal(Vec3 normal) Parameters normal Vec3 Normal(float, float, float) public void Normal(float x, float y, float z) Parameters x float y float z float Render() public void Render() Render(TexturePath) public void Render(TexturePath texture) Parameters texture TexturePath Uv(Vec2) public void Uv(Vec2 uv) Parameters uv Vec2 Uv(float, float) public void Uv(float u, float v) Parameters u float v float Vertex(Vec2) public void Vertex(Vec2 position) Parameters position Vec2 Vertex(Vec2, Vec2) public void Vertex(Vec2 position, Vec2 uv) Parameters position Vec2 uv Vec2 Vertex(Vec2, float, float) public void Vertex(Vec2 position, float u, float v) Parameters position Vec2 u float v float Vertex(Vec3) public void Vertex(Vec3 position) Parameters position Vec3 Vertex(Vec3, Vec2) public void Vertex(Vec3 position, Vec2 uv) Parameters position Vec3 uv Vec2 Vertex(Vec3, float, float) public void Vertex(Vec3 position, float u, float v) Parameters position Vec3 u float v float Vertex(float, float) public void Vertex(float x, float y) Parameters x float y float Vertex(float, float, Vec2) public void Vertex(float x, float y, Vec2 uv) Parameters x float y float uv Vec2 Vertex(float, float, float) public void Vertex(float x, float y, float z) Parameters x float y float z float Vertex(float, float, float, Vec2) public void Vertex(float x, float y, float z, Vec2 uv) Parameters x float y float z float uv Vec2 Vertex(float, float, float, float) public void Vertex(float x, float y, float u, float v) Parameters x float y float u float v float Vertex(float, float, float, float, float) public void Vertex(float x, float y, float z, float u, float v) Parameters x float y float z float u float v float"
  },
  "docs/OnixRuntime.Core.Rendering.GameTitleTimes.html": {
    "href": "docs/OnixRuntime.Core.Rendering.GameTitleTimes.html",
    "title": "Class GameTitleTimes | Onix Plugin Documentation",
    "summary": "Class GameTitleTimes Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class GameTitleTimes Inheritance object GameTitleTimes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration public TimeSpan Duration { get; init; } Property Value TimeSpan FadeIn public TimeSpan FadeIn { get; init; } Property Value TimeSpan FadeOut public TimeSpan FadeOut { get; init; } Property Value TimeSpan"
  },
  "docs/OnixRuntime.Core.Rendering.IGameRenderer.html": {
    "href": "docs/OnixRuntime.Core.Rendering.IGameRenderer.html",
    "title": "Interface IGameRenderer | Onix Plugin Documentation",
    "summary": "Interface IGameRenderer Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public interface IGameRenderer Properties MeshBuilder GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Methods RenderItem(Vec2, ItemStack, bool, float, bool) void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 item ItemStack renderDecorations bool scale float forceEnchantEffect bool RenderItem(float, float, ItemStack, bool, float, bool) void RenderItem(float x, float y, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters x float y float item ItemStack renderDecorations bool scale float forceEnchantEffect bool"
  },
  "docs/OnixRuntime.Core.Rendering.MeshBuilderPrimitiveType.html": {
    "href": "docs/OnixRuntime.Core.Rendering.MeshBuilderPrimitiveType.html",
    "title": "Enum MeshBuilderPrimitiveType | Onix Plugin Documentation",
    "summary": "Enum MeshBuilderPrimitiveType Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public enum MeshBuilderPrimitiveType Fields Line = 4 LineStrip = 5 Quad = 1 Triangle = 2 TriangleStrip = 3"
  },
  "docs/OnixRuntime.Core.Rendering.RenderContexes.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RenderContexes.html",
    "title": "Class RenderContexes | Onix Plugin Documentation",
    "summary": "Class RenderContexes Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RenderContexes Inheritance object RenderContexes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Common public RendererCommon Common { get; } Property Value RendererCommon Common2D public RendererTwoDimentional Common2D { get; } Property Value RendererTwoDimentional Direct2D public RendererDirect2D Direct2D { get; } Property Value RendererDirect2D Game public RendererGame Game { get; } Property Value RendererGame Origin public Vec3 Origin { get; } Property Value Vec3 World public RendererWorld World { get; } Property Value RendererWorld Methods WorldToScreen(Vec3) public Vec2? WorldToScreen(Vec3 point) Parameters point Vec3 Returns Vec2?"
  },
  "docs/OnixRuntime.Core.Rendering.RendererCommon.OpacityPopper.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererCommon.OpacityPopper.html",
    "title": "Struct RendererCommon.OpacityPopper | Onix Plugin Documentation",
    "summary": "Struct RendererCommon.OpacityPopper Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct RendererCommon.OpacityPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OpacityPopper(RendererCommon) public OpacityPopper(RendererCommon renderer) Parameters renderer RendererCommon Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererCommon.TransformationPopper.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererCommon.TransformationPopper.html",
    "title": "Struct RendererCommon.TransformationPopper | Onix Plugin Documentation",
    "summary": "Struct RendererCommon.TransformationPopper Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct RendererCommon.TransformationPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransformationPopper(RendererCommon) public TransformationPopper(RendererCommon renderer) Parameters renderer RendererCommon Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererCommon.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererCommon.html",
    "title": "Class RendererCommon | Onix Plugin Documentation",
    "summary": "Class RendererCommon Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RendererCommon Inheritance object RendererCommon Derived RendererTwoDimentional RendererWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height public virtual float Height { get; } Property Value float Size public virtual Vec2 Size { get; } Property Value Vec2 Width public virtual float Width { get; } Property Value float Methods DrawCircle(Vec2, ColorF, float, float) public virtual void DrawCircle(Vec2 center, ColorF color, float radius, float width) Parameters center Vec2 color ColorF radius float width float DrawCircle(Vec2, ColorF, float, float, int) public virtual void DrawCircle(Vec2 center, ColorF color, float radius, float width, int iterations) Parameters center Vec2 color ColorF radius float width float iterations int DrawEllipse(Vec2, ColorF, Vec2, float) public virtual void DrawEllipse(Vec2 center, ColorF color, Vec2 radius, float width) Parameters center Vec2 color ColorF radius Vec2 width float DrawEllipse(Vec2, ColorF, Vec2, float, int) public virtual void DrawEllipse(Vec2 center, ColorF color, Vec2 radius, float width, int iterations) Parameters center Vec2 color ColorF radius Vec2 width float iterations int DrawEllipse(Vec2, ColorF, float, float, float) public virtual void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width) Parameters center Vec2 color ColorF radiusX float radiusY float width float DrawEllipse(Vec2, ColorF, float, float, float, int) public virtual void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float width float iterations int DrawRectangle(Rect, ColorF, float) this will fill towards the inside of the rectangle only public virtual void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect color ColorF width float DrawRoundedRectangle(Rect, ColorF, float, float) this will fill towards the inside of the rectangle only public virtual void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius) Parameters position Rect color ColorF width float cornerRadius float DrawRoundedRectangle(Rect, ColorF, float, float, int) this will fill towards the inside of the rectangle only public virtual void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect color ColorF width float cornerRadius float iterations int FillCircle(Vec2, ColorF, float) public virtual void FillCircle(Vec2 center, ColorF color, float radius) Parameters center Vec2 color ColorF radius float FillCircle(Vec2, ColorF, float, int) public virtual void FillCircle(Vec2 center, ColorF color, float radius, int iterations) Parameters center Vec2 color ColorF radius float iterations int FillEllipse(Vec2, ColorF, Vec2) public virtual void FillEllipse(Vec2 center, ColorF color, Vec2 radius) Parameters center Vec2 color ColorF radius Vec2 FillEllipse(Vec2, ColorF, Vec2, int) public virtual void FillEllipse(Vec2 center, ColorF color, Vec2 radius, int iterations) Parameters center Vec2 color ColorF radius Vec2 iterations int FillEllipse(Vec2, ColorF, float, float) public virtual void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY) Parameters center Vec2 color ColorF radiusX float radiusY float FillEllipse(Vec2, ColorF, float, float, int) public virtual void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float iterations int FillRectangle(Rect, ColorF) public virtual void FillRectangle(Rect position, ColorF color) Parameters position Rect color ColorF FillRoundedRectangle(Rect, ColorF, float) public virtual void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius) Parameters position Rect color ColorF cornerRadius float FillRoundedRectangle(Rect, ColorF, float, int) public virtual void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect color ColorF cornerRadius float iterations int GetOpacity(float) Note: Functions here should implement this for you, this is mainly for implementing your own renderer or using lower level functions (which are not found in RendererCommon) which don't apply the opacity (like GameMeshBuilder.Color/Begin) public virtual float GetOpacity(float opacity = 1) Parameters opacity float Returns float GetTextureStatus(TexturePath) public virtual RendererTextureStatus GetTextureStatus(TexturePath path) Parameters path TexturePath Returns RendererTextureStatus MeasureText(string, float) public virtual Vec2 MeasureText(string text, float scale = 1) Parameters text string scale float Returns Vec2 PopOpacity() protected virtual void PopOpacity() PopTransformation() protected virtual void PopTransformation() PushOpacity(float) public virtual RendererCommon.OpacityPopper PushOpacity(float opacity) Parameters opacity float Returns RendererCommon.OpacityPopper PushTransformation(TransformationMatrix, bool) public virtual RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix multiplyPrevious bool Returns RendererCommon.TransformationPopper RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) public virtual void RenderText(Vec2 center, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters center Vec2 color ColorF text string alignmentX TextAlignment alignmentY TextAlignment scale float RenderText(Vec2, ColorF, string, float) public virtual void RenderText(Vec2 center, ColorF color, string text, float scale = 1) Parameters center Vec2 color ColorF text string scale float RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) public void RenderText(Rectangle position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Rectangle color ColorF text string alignmentX TextAlignment alignmentY TextAlignment scale float RenderTextCentered(Rect, ColorF, string, float) public virtual void RenderTextCentered(Rect position, ColorF color, string text, float scale = 1) Parameters position Rect color ColorF text string scale float RenderTextCentered(Vec2, ColorF, string, float) public virtual void RenderTextCentered(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 color ColorF text string scale float RenderTexture(Rect, TexturePath, ColorF) public virtual void RenderTexture(Rect region, TexturePath path, ColorF tint) Parameters region Rect path TexturePath tint ColorF RenderTexture(Rect, TexturePath, ColorF, Rect) public virtual void RenderTexture(Rect region, TexturePath path, ColorF tint, Rect uv) Parameters region Rect path TexturePath tint ColorF uv Rect RenderTexture(Rect, TexturePath, float) public virtual void RenderTexture(Rect region, TexturePath path, float opacity = 1) Parameters region Rect path TexturePath opacity float RenderTexture(Rect, TexturePath, float, Rect) public virtual void RenderTexture(Rect region, TexturePath path, float opacity, Rect uv) Parameters region Rect path TexturePath opacity float uv Rect SetDefaultState(bool) public virtual void SetDefaultState(bool final) Parameters final bool UnloadTexture(TexturePath) public virtual void UnloadTexture(TexturePath path) Parameters path TexturePath UploadTexture(TexturePath, RawImageData) public virtual void UploadTexture(TexturePath path, RawImageData data) Parameters path TexturePath data RawImageData WrapText(string, float, float, int) public virtual string WrapText(string text, float maxWidth, float scale = 1, int maxLines = 6000) Parameters text string maxWidth float scale float maxLines int Returns string"
  },
  "docs/OnixRuntime.Core.Rendering.RendererDirect2D.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererDirect2D.html",
    "title": "Class RendererDirect2D | Onix Plugin Documentation",
    "summary": "Class RendererDirect2D Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RendererDirect2D : RendererTwoDimentional Inheritance object RendererCommon RendererTwoDimentional RendererDirect2D Inherited Members RendererTwoDimentional.SetClippingRectangle(Rect) RendererTwoDimentional.PushClippingRectangle(Rect) RendererTwoDimentional.PopClippingRectangle() RendererTwoDimentional.ResetClippingRectangle() RendererTwoDimentional.PushRenderOffset(Vec2, Vec2) RendererTwoDimentional.PushRenderOffset(Vec2, float) RendererTwoDimentional.PushRenderOffset(Vec2, float, float) RendererTwoDimentional.PushRenderOffset(Vec2) RendererTwoDimentional.PushRenderOffset(float, float) RendererTwoDimentional.PushRenderOffset(float, float, float) RendererTwoDimentional.PushRenderOffset(float, float, Vec2) RendererTwoDimentional.PushRenderOffset(float, float, float, float) RendererTwoDimentional.SetDefaultState(bool) RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRectangle(Rect, ColorF) RendererCommon.DrawRectangle(Rect, ColorF, float) RendererCommon.FillRoundedRectangle(Rect, ColorF, float, int) RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float, int) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, float, float, int) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderText(Vec2, ColorF, string, float) RendererCommon.RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.RenderTexture(Rect, TexturePath, float) RendererCommon.RenderTexture(Rect, TexturePath, ColorF) RendererCommon.RenderTexture(Rect, TexturePath, float, Rect) RendererCommon.RenderTexture(Rect, TexturePath, ColorF, Rect) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() RendererCommon.PushTransformation(TransformationMatrix, bool) RendererCommon.PopTransformation() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererGame.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererGame.html",
    "title": "Class RendererGame | Onix Plugin Documentation",
    "summary": "Class RendererGame Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RendererGame : RendererTwoDimentional, IGameRenderer Inheritance object RendererCommon RendererTwoDimentional RendererGame Implements IGameRenderer Inherited Members RendererTwoDimentional.PushClippingRectangle(Rect) RendererTwoDimentional.PushRenderOffset(Vec2, Vec2) RendererTwoDimentional.PushRenderOffset(Vec2, float) RendererTwoDimentional.PushRenderOffset(Vec2, float, float) RendererTwoDimentional.PushRenderOffset(Vec2) RendererTwoDimentional.PushRenderOffset(float, float) RendererTwoDimentional.PushRenderOffset(float, float, float) RendererTwoDimentional.PushRenderOffset(float, float, Vec2) RendererTwoDimentional.PushRenderOffset(float, float, float, float) RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MeshBuilder public GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Methods DrawEllipse(Vec2, ColorF, float, float, float, int) public override void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float width float iterations int DrawLine(Vec2, Vec2, ColorF) public virtual void DrawLine(Vec2 point1, Vec2 point2, ColorF color) Parameters point1 Vec2 point2 Vec2 color ColorF DrawLine(Vec3, Vec3, ColorF) public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color) Parameters point1 Vec3 point2 Vec3 color ColorF DrawLine(Vec3, Vec3, ColorF, ColorF) public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color1, ColorF color2) Parameters point1 Vec3 point2 Vec3 color1 ColorF color2 ColorF DrawRectangle(Rect, ColorF, float) this will fill towards the inside of the rectangle only public override void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect color ColorF width float DrawRoundedRectangle(Rect, ColorF, float, float, int) this will fill towards the inside of the rectangle only public override void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect color ColorF width float cornerRadius float iterations int FillEllipse(Vec2, ColorF, float, float, int) public override void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float iterations int FillRectangle(Rect, ColorF) public override void FillRectangle(Rect position, ColorF color) Parameters position Rect color ColorF FillRoundedRectangle(Rect, ColorF, float, int) public override void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect color ColorF cornerRadius float iterations int FlushMesh() public void FlushMesh() PopClippingRectangle() protected override void PopClippingRectangle() PopTransformation() protected override void PopTransformation() PushTransformation(TransformationMatrix, bool) public override RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix multiplyPrevious bool Returns RendererCommon.TransformationPopper RenderItem(Vec2, ItemStack, bool, float, bool) public void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 item ItemStack renderDecorations bool scale float forceEnchantEffect bool RenderItem(float, float, ItemStack, bool, float, bool) public virtual void RenderItem(float x, float y, ItemStack item, bool renderDecorations = true, float scale = 1, bool forceEnchantEffect = false) Parameters x float y float item ItemStack renderDecorations bool scale float forceEnchantEffect bool RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) public override void RenderText(Vec2 position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Vec2 color ColorF text string alignmentX TextAlignment alignmentY TextAlignment scale float RenderText(Vec2, ColorF, string, float) public override void RenderText(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 color ColorF text string scale float RenderTexture(Rect, TexturePath, ColorF) public override void RenderTexture(Rect region, TexturePath path, ColorF tint) Parameters region Rect path TexturePath tint ColorF RenderTexture(Rect, TexturePath, ColorF, Rect) public override void RenderTexture(Rect region, TexturePath path, ColorF tint, Rect uv) Parameters region Rect path TexturePath tint ColorF uv Rect RenderTexture(Rect, TexturePath, float) public override void RenderTexture(Rect region, TexturePath path, float opacity = 1) Parameters region Rect path TexturePath opacity float RenderTexture(Rect, TexturePath, float, Rect) public override void RenderTexture(Rect region, TexturePath path, float opacity, Rect uv) Parameters region Rect path TexturePath opacity float uv Rect ResetClippingRectangle() public override void ResetClippingRectangle() SetClippingRectangle(Rect) public override void SetClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect SetDefaultState(bool) public override void SetDefaultState(bool final) Parameters final bool"
  },
  "docs/OnixRuntime.Core.Rendering.RendererTextureStatus.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererTextureStatus.html",
    "title": "Enum RendererTextureStatus | Onix Plugin Documentation",
    "summary": "Enum RendererTextureStatus Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public enum RendererTextureStatus Fields Loaded = 3 Loading = 2 Missing = 0 Unloaded = 1"
  },
  "docs/OnixRuntime.Core.Rendering.RendererTwoDimentional.ClippingRectanglePopper.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererTwoDimentional.ClippingRectanglePopper.html",
    "title": "Struct RendererTwoDimentional.ClippingRectanglePopper | Onix Plugin Documentation",
    "summary": "Struct RendererTwoDimentional.ClippingRectanglePopper Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct RendererTwoDimentional.ClippingRectanglePopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererTwoDimentional.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererTwoDimentional.html",
    "title": "Class RendererTwoDimentional | Onix Plugin Documentation",
    "summary": "Class RendererTwoDimentional Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RendererTwoDimentional : RendererCommon Inheritance object RendererCommon RendererTwoDimentional Derived RendererDirect2D RendererGame Inherited Members RendererCommon.Width RendererCommon.Height RendererCommon.Size RendererCommon.FillRectangle(Rect, ColorF) RendererCommon.DrawRectangle(Rect, ColorF, float) RendererCommon.FillRoundedRectangle(Rect, ColorF, float, int) RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float, int) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, float, float, int) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderText(Vec2, ColorF, string, float) RendererCommon.RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.RenderTexture(Rect, TexturePath, float) RendererCommon.RenderTexture(Rect, TexturePath, ColorF) RendererCommon.RenderTexture(Rect, TexturePath, float, Rect) RendererCommon.RenderTexture(Rect, TexturePath, ColorF, Rect) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() RendererCommon.PushTransformation(TransformationMatrix, bool) RendererCommon.PopTransformation() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PopClippingRectangle() protected virtual void PopClippingRectangle() PushClippingRectangle(Rect) public RendererTwoDimentional.ClippingRectanglePopper PushClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect Returns RendererTwoDimentional.ClippingRectanglePopper PushRenderOffset(Vec2) public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset) Parameters offset Vec2 Returns RendererCommon.TransformationPopper PushRenderOffset(Vec2, Vec2) public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, Vec2 scale) Parameters offset Vec2 scale Vec2 Returns RendererCommon.TransformationPopper PushRenderOffset(Vec2, float) public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, float scale) Parameters offset Vec2 scale float Returns RendererCommon.TransformationPopper PushRenderOffset(Vec2, float, float) public RendererCommon.TransformationPopper PushRenderOffset(Vec2 offset, float scaleX, float scaleY) Parameters offset Vec2 scaleX float scaleY float Returns RendererCommon.TransformationPopper PushRenderOffset(float, float) public RendererCommon.TransformationPopper PushRenderOffset(float x, float y) Parameters x float y float Returns RendererCommon.TransformationPopper PushRenderOffset(float, float, Vec2) public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, Vec2 scale) Parameters x float y float scale Vec2 Returns RendererCommon.TransformationPopper PushRenderOffset(float, float, float) public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, float scale) Parameters x float y float scale float Returns RendererCommon.TransformationPopper PushRenderOffset(float, float, float, float) public RendererCommon.TransformationPopper PushRenderOffset(float x, float y, float scaleX, float scaleY) Parameters x float y float scaleX float scaleY float Returns RendererCommon.TransformationPopper ResetClippingRectangle() public virtual void ResetClippingRectangle() SetClippingRectangle(Rect) public virtual void SetClippingRectangle(Rect clippingRectangle) Parameters clippingRectangle Rect SetDefaultState(bool) public override void SetDefaultState(bool final) Parameters final bool"
  },
  "docs/OnixRuntime.Core.Rendering.RendererWorld.WorldRenderSettingsPopper.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererWorld.WorldRenderSettingsPopper.html",
    "title": "Struct RendererWorld.WorldRenderSettingsPopper | Onix Plugin Documentation",
    "summary": "Struct RendererWorld.WorldRenderSettingsPopper Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct RendererWorld.WorldRenderSettingsPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WorldRenderSettingsPopper(RendererWorld, bool) public WorldRenderSettingsPopper(RendererWorld renderer, bool disposedCtorParam) Parameters renderer RendererWorld disposedCtorParam bool Properties DepthTest public bool DepthTest { get; } Property Value bool RenderBackFace public bool RenderBackFace { get; } Property Value bool RenderFrontFace public bool RenderFrontFace { get; } Property Value bool SimulatingUi public bool SimulatingUi { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererWorld.WorldUIRenderSettingsPopper.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererWorld.WorldUIRenderSettingsPopper.html",
    "title": "Struct RendererWorld.WorldUIRenderSettingsPopper | Onix Plugin Documentation",
    "summary": "Struct RendererWorld.WorldUIRenderSettingsPopper Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public struct RendererWorld.WorldUIRenderSettingsPopper : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WorldUIRenderSettingsPopper(WorldRenderSettingsPopper, TransformationPopper, RendererWorld) public WorldUIRenderSettingsPopper(RendererWorld.WorldRenderSettingsPopper worldSettingsPopperCtor, RendererCommon.TransformationPopper transformationPopperCtor, RendererWorld renderer) Parameters worldSettingsPopperCtor RendererWorld.WorldRenderSettingsPopper transformationPopperCtor RendererCommon.TransformationPopper renderer RendererWorld Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "docs/OnixRuntime.Core.Rendering.RendererWorld.html": {
    "href": "docs/OnixRuntime.Core.Rendering.RendererWorld.html",
    "title": "Class RendererWorld | Onix Plugin Documentation",
    "summary": "Class RendererWorld Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class RendererWorld : RendererCommon, IGameRenderer Inheritance object RendererCommon RendererWorld Implements IGameRenderer Inherited Members RendererCommon.FillRoundedRectangle(Rect, ColorF, float) RendererCommon.DrawRoundedRectangle(Rect, ColorF, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float, int) RendererCommon.DrawEllipse(Vec2, ColorF, float, float, float) RendererCommon.DrawEllipse(Vec2, ColorF, Vec2, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2, int) RendererCommon.FillEllipse(Vec2, ColorF, float, float) RendererCommon.FillEllipse(Vec2, ColorF, Vec2) RendererCommon.FillCircle(Vec2, ColorF, float, int) RendererCommon.FillCircle(Vec2, ColorF, float) RendererCommon.DrawCircle(Vec2, ColorF, float, float, int) RendererCommon.DrawCircle(Vec2, ColorF, float, float) RendererCommon.RenderTextCentered(Vec2, ColorF, string, float) RendererCommon.RenderTextCentered(Rect, ColorF, string, float) RendererCommon.RenderText(Rectangle, ColorF, string, TextAlignment, TextAlignment, float) RendererCommon.WrapText(string, float, float, int) RendererCommon.MeasureText(string, float) RendererCommon.UnloadTexture(TexturePath) RendererCommon.UploadTexture(TexturePath, RawImageData) RendererCommon.GetTextureStatus(TexturePath) RendererCommon.GetOpacity(float) RendererCommon.PushOpacity(float) RendererCommon.PopOpacity() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height public override float Height { get; } Property Value float MeshBuilder public GameMeshBuilder MeshBuilder { get; } Property Value GameMeshBuilder Size public override Vec2 Size { get; } Property Value Vec2 Width public override float Width { get; } Property Value float Methods DrawEllipse(Vec2, ColorF, float, float, float, int) public override void DrawEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, float width, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float width float iterations int DrawLine(Vec2, Vec2, ColorF) public virtual void DrawLine(Vec2 point1, Vec2 point2, ColorF color) Parameters point1 Vec2 point2 Vec2 color ColorF DrawLine(Vec3, Vec3, ColorF) public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color) Parameters point1 Vec3 point2 Vec3 color ColorF DrawLine(Vec3, Vec3, ColorF, ColorF) public virtual void DrawLine(Vec3 point1, Vec3 point2, ColorF color1, ColorF color2) Parameters point1 Vec3 point2 Vec3 color1 ColorF color2 ColorF DrawRectangle(Rect, ColorF, float) this will fill towards the inside of the rectangle only public override void DrawRectangle(Rect position, ColorF color, float width) Parameters position Rect color ColorF width float DrawRoundedRectangle(Rect, ColorF, float, float, int) this will fill towards the inside of the rectangle only public override void DrawRoundedRectangle(Rect position, ColorF color, float width, float cornerRadius, int iterations) Parameters position Rect color ColorF width float cornerRadius float iterations int EnableLights(bool) public virtual void EnableLights(bool enabled) Parameters enabled bool FillEllipse(Vec2, ColorF, float, float, int) public override void FillEllipse(Vec2 center, ColorF color, float radiusX, float radiusY, int iterations) Parameters center Vec2 color ColorF radiusX float radiusY float iterations int FillRectangle(Rect, ColorF) public override void FillRectangle(Rect position, ColorF color) Parameters position Rect color ColorF FillRoundedRectangle(Rect, ColorF, float, int) public override void FillRoundedRectangle(Rect position, ColorF color, float cornerRadius, int iterations) Parameters position Rect color ColorF cornerRadius float iterations int FlushMesh() public void FlushMesh() GetWorldRenderSettings() public RendererWorld.WorldRenderSettingsPopper GetWorldRenderSettings() Returns RendererWorld.WorldRenderSettingsPopper InternalPushWorldRenderSettings(bool, bool, bool, bool) protected void InternalPushWorldRenderSettings(bool depthTest = true, bool renderBackface = false, bool simulateUI = false, bool renderFrontFace = true) Parameters depthTest bool renderBackface bool simulateUI bool renderFrontFace bool PopTransformation() protected override void PopTransformation() PushTransformation(TransformationMatrix, bool) public override RendererCommon.TransformationPopper PushTransformation(TransformationMatrix transformation, bool multiplyPrevious = true) Parameters transformation TransformationMatrix multiplyPrevious bool Returns RendererCommon.TransformationPopper PushWorldRenderSettings(bool, bool, bool, bool) public RendererWorld.WorldRenderSettingsPopper PushWorldRenderSettings(bool depthTest = true, bool renderBackface = false, bool simulateUI = false, bool renderFrontFace = true) Parameters depthTest bool renderBackface bool simulateUI bool renderFrontFace bool Returns RendererWorld.WorldRenderSettingsPopper PushWorldUIRenderSettings(BlockPos, BlockFace, Vec2, Vec2, float) public RendererWorld.WorldUIRenderSettingsPopper PushWorldUIRenderSettings(BlockPos position, BlockFace face, Vec2 pixelsPerBlock, Vec2 sizeInBlocks, float extraRotation = 0) Parameters position BlockPos face BlockFace pixelsPerBlock Vec2 sizeInBlocks Vec2 extraRotation float Returns RendererWorld.WorldUIRenderSettingsPopper PushWorldUIRenderSettings(Vec3, BlockFace, Vec2, Vec2, float) public RendererWorld.WorldUIRenderSettingsPopper PushWorldUIRenderSettings(Vec3 position, BlockFace face, Vec2 pixelsPerBlock, Vec2 sizeInBlocks, float extraRotation = 0) Parameters position Vec3 face BlockFace pixelsPerBlock Vec2 sizeInBlocks Vec2 extraRotation float Returns RendererWorld.WorldUIRenderSettingsPopper RenderBoundingBox(BoundingBox, ColorF) public virtual void RenderBoundingBox(BoundingBox box, ColorF color) Parameters box BoundingBox color ColorF RenderItem(Vec2, ItemStack, bool, float, bool) public void RenderItem(Vec2 position, ItemStack item, bool renderDecorations = false, float scale = 1, bool forceEnchantEffect = false) Parameters position Vec2 item ItemStack renderDecorations bool scale float forceEnchantEffect bool RenderItem(float, float, ItemStack, bool, float, bool) public virtual void RenderItem(float x, float y, ItemStack item, bool renderDecorations = false, float scale = 1, bool forceEnchantEffect = false) Parameters x float y float item ItemStack renderDecorations bool scale float forceEnchantEffect bool RenderText(Vec2, ColorF, string, TextAlignment, TextAlignment, float) public override void RenderText(Vec2 position, ColorF color, string text, TextAlignment alignmentX, TextAlignment alignmentY, float scale = 1) Parameters position Vec2 color ColorF text string alignmentX TextAlignment alignmentY TextAlignment scale float RenderText(Vec2, ColorF, string, float) public override void RenderText(Vec2 position, ColorF color, string text, float scale = 1) Parameters position Vec2 color ColorF text string scale float RenderTexture(Rect, TexturePath, ColorF) public override void RenderTexture(Rect region, TexturePath path, ColorF tint) Parameters region Rect path TexturePath tint ColorF RenderTexture(Rect, TexturePath, ColorF, Rect) public override void RenderTexture(Rect region, TexturePath path, ColorF tint, Rect uv) Parameters region Rect path TexturePath tint ColorF uv Rect RenderTexture(Rect, TexturePath, float) public override void RenderTexture(Rect region, TexturePath path, float opacity = 1) Parameters region Rect path TexturePath opacity float RenderTexture(Rect, TexturePath, float, Rect) public override void RenderTexture(Rect region, TexturePath path, float opacity, Rect uv) Parameters region Rect path TexturePath opacity float uv Rect SetDefaultState(bool) public override void SetDefaultState(bool final) Parameters final bool SetupLights(Entity, int) public virtual void SetupLights(Entity entity, int lightEmission = 0) Parameters entity Entity lightEmission int SetupLights(BoundingBox, Vec3, int) public virtual void SetupLights(BoundingBox boundingBox, Vec3 center, int lightEmission = 0) Parameters boundingBox BoundingBox center Vec3 lightEmission int SetupLights(BoundingBox, int) public virtual void SetupLights(BoundingBox boundingBox, int lightEmission = 0) Parameters boundingBox BoundingBox lightEmission int"
  },
  "docs/OnixRuntime.Core.Rendering.TextAlignment.html": {
    "href": "docs/OnixRuntime.Core.Rendering.TextAlignment.html",
    "title": "Enum TextAlignment | Onix Plugin Documentation",
    "summary": "Enum TextAlignment Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public enum TextAlignment Fields Bottom = 2 Center = 1 Left = 0 Right = 2 Top = 0"
  },
  "docs/OnixRuntime.Core.Rendering.TexturePath.html": {
    "href": "docs/OnixRuntime.Core.Rendering.TexturePath.html",
    "title": "Class TexturePath | Onix Plugin Documentation",
    "summary": "Class TexturePath Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public class TexturePath : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer TexturePath Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TexturePath(string, TexturePathBase) public TexturePath(string path, TexturePathBase baseType) Parameters path string baseType TexturePathBase Fields ItemAtlas public static TexturePath ItemAtlas Field Value TexturePath TerrainAtlas public static TexturePath TerrainAtlas Field Value TexturePath Properties Base public TexturePathBase Base { get; } Property Value TexturePathBase Path public string Path { get; } Property Value string Methods Assets(string) public static TexturePath Assets(string path) Parameters path string Returns TexturePath Game(string) public static TexturePath Game(string path) Parameters path string Returns TexturePath PersistentData(string) public static TexturePath PersistentData(string path) Parameters path string Returns TexturePath Raw(string) public static TexturePath Raw(string path) Parameters path string Returns TexturePath"
  },
  "docs/OnixRuntime.Core.Rendering.TexturePathBase.html": {
    "href": "docs/OnixRuntime.Core.Rendering.TexturePathBase.html",
    "title": "Enum TexturePathBase | Onix Plugin Documentation",
    "summary": "Enum TexturePathBase Namespace OnixRuntime.Core.Rendering Assembly OnixRuntime.dll public enum TexturePathBase Fields Assets = 2 Game = 0 ItemAtlas = 5 PersistentData = 3 Raw = 1 TerrainAtlas = 4"
  },
  "docs/OnixRuntime.Core.Rendering.html": {
    "href": "docs/OnixRuntime.Core.Rendering.html",
    "title": "Namespace OnixRuntime.Core.Rendering | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Rendering Classes ChatMessage GameGuiInfo GameMeshBuilder GameTitleTimes RenderContexes RendererCommon RendererDirect2D RendererGame RendererTwoDimentional RendererWorld TexturePath Structs GameMeshBuilder.GameMeshBuilderSession RendererCommon.OpacityPopper RendererCommon.TransformationPopper RendererTwoDimentional.ClippingRectanglePopper RendererWorld.WorldRenderSettingsPopper RendererWorld.WorldUIRenderSettingsPopper Interfaces IGameRenderer Enums ChatMessageType MeshBuilderPrimitiveType RendererTextureStatus TextAlignment TexturePathBase"
  },
  "docs/OnixRuntime.Core.Utils.Clipboard.html": {
    "href": "docs/OnixRuntime.Core.Utils.Clipboard.html",
    "title": "Class Clipboard | Onix Plugin Documentation",
    "summary": "Class Clipboard Namespace OnixRuntime.Core.Utils Assembly OnixRuntime.dll public class Clipboard Inheritance object Clipboard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetText() public static string GetText() Returns string SetText(string) public static void SetText(string text) Parameters text string"
  },
  "docs/OnixRuntime.Core.Utils.Internal.OnixCppImage.html": {
    "href": "docs/OnixRuntime.Core.Utils.Internal.OnixCppImage.html",
    "title": "Struct OnixCppImage | Onix Plugin Documentation",
    "summary": "Struct OnixCppImage Namespace OnixRuntime.Core.Utils.Internal Assembly OnixRuntime.dll public struct OnixCppImage : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OnixCppImage() public OnixCppImage() Fields Data public nint Data Field Value nint Dtor public nint Dtor Field Value nint Height public readonly int Height Field Value int Width public readonly int Width Field Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetData() public RawImageData GetData() Returns RawImageData GetDataAndDispose() public RawImageData GetDataAndDispose() Returns RawImageData"
  },
  "docs/OnixRuntime.Core.Utils.Internal.html": {
    "href": "docs/OnixRuntime.Core.Utils.Internal.html",
    "title": "Namespace OnixRuntime.Core.Utils.Internal | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Utils.Internal Structs OnixCppImage"
  },
  "docs/OnixRuntime.Core.Utils.PluginSemVersion.html": {
    "href": "docs/OnixRuntime.Core.Utils.PluginSemVersion.html",
    "title": "Class PluginSemVersion | Onix Plugin Documentation",
    "summary": "Class PluginSemVersion Namespace OnixRuntime.Core.Utils Assembly OnixRuntime.dll public class PluginSemVersion : IComparable Inheritance object PluginSemVersion Implements IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PluginSemVersion(int, int, int) public PluginSemVersion(int major, int minor, int patch) Parameters major int minor int patch int PluginSemVersion(ReadOnlySpan<char>) public PluginSemVersion(ReadOnlySpan<char> versionText) Parameters versionText ReadOnlySpan<char> Properties GameVersionInteger public int GameVersionInteger { get; } Property Value int Major public int Major { get; } Property Value int Minor public int Minor { get; } Property Value int Patch public int Patch { get; } Property Value int Methods CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromGameVersionInteger(int) public static PluginSemVersion FromGameVersionInteger(int gameVersion) Parameters gameVersion int Returns PluginSemVersion GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(PluginSemVersion, PluginSemVersion?) public static bool operator ==(PluginSemVersion a, PluginSemVersion? b) Parameters a PluginSemVersion b PluginSemVersion Returns bool operator >(PluginSemVersion, PluginSemVersion) public static bool operator >(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion b PluginSemVersion Returns bool operator >=(PluginSemVersion, PluginSemVersion) public static bool operator >=(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion b PluginSemVersion Returns bool operator !=(PluginSemVersion, PluginSemVersion?) public static bool operator !=(PluginSemVersion a, PluginSemVersion? b) Parameters a PluginSemVersion b PluginSemVersion Returns bool operator <(PluginSemVersion, PluginSemVersion) public static bool operator <(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion b PluginSemVersion Returns bool operator <=(PluginSemVersion, PluginSemVersion) public static bool operator <=(PluginSemVersion a, PluginSemVersion b) Parameters a PluginSemVersion b PluginSemVersion Returns bool"
  },
  "docs/OnixRuntime.Core.Utils.RawImageData.ImageSaveFormat.html": {
    "href": "docs/OnixRuntime.Core.Utils.RawImageData.ImageSaveFormat.html",
    "title": "Enum RawImageData.ImageSaveFormat | Onix Plugin Documentation",
    "summary": "Enum RawImageData.ImageSaveFormat Namespace OnixRuntime.Core.Utils Assembly OnixRuntime.dll public enum RawImageData.ImageSaveFormat Fields Jpg = 1 Png = 0"
  },
  "docs/OnixRuntime.Core.Utils.RawImageData.html": {
    "href": "docs/OnixRuntime.Core.Utils.RawImageData.html",
    "title": "Class RawImageData | Onix Plugin Documentation",
    "summary": "Class RawImageData Namespace OnixRuntime.Core.Utils Assembly OnixRuntime.dll public class RawImageData Inheritance object RawImageData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RawImageData(byte[]) public RawImageData(byte[] encodedImageData) Parameters encodedImageData byte[] RawImageData(byte[], int, int) public RawImageData(byte[] rawDataRGBA8, int width, int height) Parameters rawDataRGBA8 byte[] width int height int RawImageData(int, int) public RawImageData(int width, int height) Parameters width int height int RawImageData(string) public RawImageData(string path) Parameters path string Properties Data public byte[] Data { get; } Property Value byte[] Empty public static RawImageData Empty { get; } Property Value RawImageData Height public int Height { get; } Property Value int IsEmpty public bool IsEmpty { get; } Property Value bool Width public int Width { get; } Property Value int Methods Create(int, int) public static RawImageData Create(int width, int height) Parameters width int height int Returns RawImageData GetPixel(int, int) public ColorF GetPixel(int x, int y) Parameters x int y int Returns ColorF GetRawPixel(int, int) public uint GetRawPixel(int x, int y) Parameters x int y int Returns uint GetSaveBytes(ImageSaveFormat, int, int) public byte[] GetSaveBytes(RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters format RawImageData.ImageSaveFormat quality int compressionLevel int Returns byte[] GetSaveBytesJpg(int) public void GetSaveBytesJpg(int quality = 100) Parameters quality int GetSaveBytesPng(int) public void GetSaveBytesPng(int compressionLevel = 5) Parameters compressionLevel int Load(byte[]) public static RawImageData Load(byte[] bytes) Parameters bytes byte[] Returns RawImageData Load(Stream) public static RawImageData Load(Stream stream) Parameters stream Stream Returns RawImageData Load(string) public static RawImageData Load(string path) Parameters path string Returns RawImageData Save(Stream, ImageSaveFormat, int, int) public void Save(Stream stream, RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters stream Stream format RawImageData.ImageSaveFormat quality int compressionLevel int Save(string, ImageSaveFormat, int, int) public void Save(string path, RawImageData.ImageSaveFormat format = ImageSaveFormat.Png, int quality = 100, int compressionLevel = 5) Parameters path string format RawImageData.ImageSaveFormat quality int compressionLevel int SaveJpg(Stream, int) public void SaveJpg(Stream stream, int quality = 100) Parameters stream Stream quality int SaveJpg(string, int) public void SaveJpg(string path, int quality = 100) Parameters path string quality int SavePng(Stream, int) public void SavePng(Stream stream, int compressionLevel = 5) Parameters stream Stream compressionLevel int SavePng(string, int) public void SavePng(string path, int compressionLevel = 5) Parameters path string compressionLevel int SetPixel(int, int, ColorF) public void SetPixel(int x, int y, ColorF color) Parameters x int y int color ColorF SetRawPixel(int, int, uint) public void SetRawPixel(int x, int y, uint color) Parameters x int y int color uint"
  },
  "docs/OnixRuntime.Core.Utils.html": {
    "href": "docs/OnixRuntime.Core.Utils.html",
    "title": "Namespace OnixRuntime.Core.Utils | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.Utils Classes Clipboard PluginSemVersion RawImageData Enums RawImageData.ImageSaveFormat"
  },
  "docs/OnixRuntime.Core.World.Biome.html": {
    "href": "docs/OnixRuntime.Core.World.Biome.html",
    "title": "Class Biome | Onix Plugin Documentation",
    "summary": "Class Biome Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class Biome : MemoryAddressContainer Inheritance object MemoryAddressContainer Biome Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AshDensity public float AshDensity { get; } Property Value float BlueSporesDensity public float BlueSporesDensity { get; } Property Value float FoliageColor public ColorF FoliageColor { get; } Property Value ColorF FoliageSnow public float FoliageSnow { get; } Property Value float Humidity public float Humidity { get; } Property Value float Id public int Id { get; } Property Value int Name public string Name { get; } Property Value string RedSporesDensity public float RedSporesDensity { get; } Property Value float SnowAccumulation public float SnowAccumulation { get; } Property Value float Temperature public float Temperature { get; } Property Value float WhiteAshDensity public float WhiteAshDensity { get; } Property Value float"
  },
  "docs/OnixRuntime.Core.World.BiomeTintColors.html": {
    "href": "docs/OnixRuntime.Core.World.BiomeTintColors.html",
    "title": "Struct BiomeTintColors | Onix Plugin Documentation",
    "summary": "Struct BiomeTintColors Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public struct BiomeTintColors Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields GrassColor public ColorF GrassColor Field Value ColorF WaterColor public ColorF WaterColor Field Value ColorF"
  },
  "docs/OnixRuntime.Core.World.Block.html": {
    "href": "docs/OnixRuntime.Core.World.Block.html",
    "title": "Class Block | Onix Plugin Documentation",
    "summary": "Class Block Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class Block : MemoryAddressContainer Inheritance object MemoryAddressContainer Block Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreativeCategory public CreativeItemCategory CreativeCategory { get; } Property Value CreativeItemCategory Data public int Data { get; } Property Value int Id This id might not be reliable across versions/servers. public int Id { get; } Property Value int IsSolid public bool IsSolid { get; } Property Value bool Name public string Name { get; } Property Value string NameFull public string NameFull { get; } Property Value string Namespace public string Namespace { get; } Property Value string State public NbtTag State { get; } Property Value NbtTag VisualBoundingBox public BoundingBox VisualBoundingBox { get; } Property Value BoundingBox Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.World.BlockEntity.html": {
    "href": "docs/OnixRuntime.Core.World.BlockEntity.html",
    "title": "Class BlockEntity | Onix Plugin Documentation",
    "summary": "Class BlockEntity Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class BlockEntity : MemoryAddressContainer Inheritance object MemoryAddressContainer BlockEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Block public Block Block { get; } Property Value Block BoundingBox public BoundingBox BoundingBox { get; } Property Value BoundingBox Container Might not be up to date on the client, the server doesn't have to send the container content or updates to it. public ItemContainer? Container { get; } Property Value ItemContainer Position public BlockPos Position { get; } Property Value BlockPos TickCount public int TickCount { get; } Property Value int Methods SaveToNbt() public ObjectTag SaveToNbt() Returns ObjectTag"
  },
  "docs/OnixRuntime.Core.World.BlockFace.html": {
    "href": "docs/OnixRuntime.Core.World.BlockFace.html",
    "title": "Enum BlockFace | Onix Plugin Documentation",
    "summary": "Enum BlockFace Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum BlockFace Fields Bottom = 0 East = 5 North = 2 South = 3 Top = 1 West = 4"
  },
  "docs/OnixRuntime.Core.World.BlockRegistry.html": {
    "href": "docs/OnixRuntime.Core.World.BlockRegistry.html",
    "title": "Class BlockRegistry | Onix Plugin Documentation",
    "summary": "Class BlockRegistry Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class BlockRegistry : MemoryAddressContainer Inheritance object MemoryAddressContainer BlockRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RuntimeBlocks public IEnumerable<Block> RuntimeBlocks { get; } Property Value IEnumerable<Block> Methods GetBlock(ObjectTag) public Block? GetBlock(ObjectTag state) Parameters state ObjectTag Returns Block GetBlock(string, int) public Block? GetBlock(string name, int data = 0) Parameters name string data int Returns Block"
  },
  "docs/OnixRuntime.Core.World.BrightnessLevels.html": {
    "href": "docs/OnixRuntime.Core.World.BrightnessLevels.html",
    "title": "Struct BrightnessLevels | Onix Plugin Documentation",
    "summary": "Struct BrightnessLevels Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public struct BrightnessLevels Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields BlockLight Value between 0 and 15 representing how much block light (things like torches) is hitting the block. public byte BlockLight Field Value byte SkyLight Value between 0 and 15 representing how much sun/skylight is hitting the block. Note: This value will not adapt with time of day. public byte SkyLight Field Value byte"
  },
  "docs/OnixRuntime.Core.World.CreativeItemCategory.html": {
    "href": "docs/OnixRuntime.Core.World.CreativeItemCategory.html",
    "title": "Enum CreativeItemCategory | Onix Plugin Documentation",
    "summary": "Enum CreativeItemCategory Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum CreativeItemCategory Fields All = 0 Construction = 1 Equipment = 3 ItemCommandOnly = 5 Items = 4 Nature = 2 Undefined = 6"
  },
  "docs/OnixRuntime.Core.World.Difficulty.html": {
    "href": "docs/OnixRuntime.Core.World.Difficulty.html",
    "title": "Enum Difficulty | Onix Plugin Documentation",
    "summary": "Enum Difficulty Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum Difficulty Fields Easy = 1 Hard = 3 Normal = 2 Peaceful = 0"
  },
  "docs/OnixRuntime.Core.World.Dimension.html": {
    "href": "docs/OnixRuntime.Core.World.Dimension.html",
    "title": "Class Dimension | Onix Plugin Documentation",
    "summary": "Class Dimension Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class Dimension : MemoryAddressContainer Inheritance object MemoryAddressContainer Dimension Derived EndDimension NetherDimension OverworldDimension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public DimensionType Id { get; } Property Value DimensionType Name public string Name { get; } Property Value string Weather public DimensionWeather? Weather { get; } Property Value DimensionWeather? World public RuntimeWorld World { get; } Property Value RuntimeWorld WorldBlocks public WorldBlocks WorldBlocks { get; } Property Value WorldBlocks WorldChunks public WorldChunks WorldChunks { get; } Property Value WorldChunks"
  },
  "docs/OnixRuntime.Core.World.DimensionType.html": {
    "href": "docs/OnixRuntime.Core.World.DimensionType.html",
    "title": "Enum DimensionType | Onix Plugin Documentation",
    "summary": "Enum DimensionType Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum DimensionType Fields End = 2 Nether = 1 Overworld = 0"
  },
  "docs/OnixRuntime.Core.World.DimensionWeather.html": {
    "href": "docs/OnixRuntime.Core.World.DimensionWeather.html",
    "title": "Struct DimensionWeather | Onix Plugin Documentation",
    "summary": "Struct DimensionWeather Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public struct DimensionWeather Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DimensionWeather() public DimensionWeather() Fields CurrentTick public int CurrentTick Field Value int FogLevel public float FogLevel Field Value float LightningLevel public float LightningLevel Field Value float OldLightningLevel public float OldLightningLevel Field Value float OldRainLevel public float OldRainLevel Field Value float RainLevel public float RainLevel Field Value float TargetLightningLevel public float TargetLightningLevel Field Value float TargetRainLevel public float TargetRainLevel Field Value float"
  },
  "docs/OnixRuntime.Core.World.EndDimension.html": {
    "href": "docs/OnixRuntime.Core.World.EndDimension.html",
    "title": "Class EndDimension | Onix Plugin Documentation",
    "summary": "Class EndDimension Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class EndDimension : Dimension Inheritance object MemoryAddressContainer Dimension EndDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.WorldBlocks Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Core.World.NetherDimension.html": {
    "href": "docs/OnixRuntime.Core.World.NetherDimension.html",
    "title": "Class NetherDimension | Onix Plugin Documentation",
    "summary": "Class NetherDimension Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class NetherDimension : Dimension Inheritance object MemoryAddressContainer Dimension NetherDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.WorldBlocks Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Core.World.OverworldDimension.html": {
    "href": "docs/OnixRuntime.Core.World.OverworldDimension.html",
    "title": "Class OverworldDimension | Onix Plugin Documentation",
    "summary": "Class OverworldDimension Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class OverworldDimension : Dimension Inheritance object MemoryAddressContainer Dimension OverworldDimension Inherited Members Dimension.Id Dimension.Name Dimension.World Dimension.WorldBlocks Dimension.WorldChunks Dimension.Weather object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "docs/OnixRuntime.Core.World.RaycastResult.html": {
    "href": "docs/OnixRuntime.Core.World.RaycastResult.html",
    "title": "Class RaycastResult | Onix Plugin Documentation",
    "summary": "Class RaycastResult Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class RaycastResult : MightOwnMemoryAddressContainer, IDisposable Inheritance object MightOwnMemoryAddressContainer RaycastResult Implements IDisposable Inherited Members MightOwnMemoryAddressContainer.HasMemoryOwnership MightOwnMemoryAddressContainer.SetMemoryAddressValues(nint, nint) MightOwnMemoryAddressContainer.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RaycastResult() public RaycastResult() Properties BlockPosition public BlockPos BlockPosition { get; set; } Property Value BlockPos Direction public Vec3 Direction { get; set; } Property Value Vec3 Entity public Entity? Entity { get; set; } Property Value Entity Face public BlockFace Face { get; set; } Property Value BlockFace HitPosition public Vec3 HitPosition { get; set; } Property Value Vec3 Mob public Mob? Mob { get; } Property Value Mob Origin public Vec3 Origin { get; set; } Property Value Vec3 Player public Player? Player { get; } Property Value Player Type public RaycastResultType Type { get; set; } Property Value RaycastResultType Methods Clone() public RaycastResult Clone() Returns RaycastResult ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.World.RaycastResultType.html": {
    "href": "docs/OnixRuntime.Core.World.RaycastResultType.html",
    "title": "Enum RaycastResultType | Onix Plugin Documentation",
    "summary": "Enum RaycastResultType Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum RaycastResultType Fields Block = 0 Entity = 1 EntityOutOfRange = 2 None = 3"
  },
  "docs/OnixRuntime.Core.World.RuntimeWorld.html": {
    "href": "docs/OnixRuntime.Core.World.RuntimeWorld.html",
    "title": "Class RuntimeWorld | Onix Plugin Documentation",
    "summary": "Class RuntimeWorld Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class RuntimeWorld : MemoryAddressContainer Inheritance object MemoryAddressContainer RuntimeWorld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlockRegistry public BlockRegistry BlockRegistry { get; } Property Value BlockRegistry CommandsEnabled public bool CommandsEnabled { get; } Property Value bool CurrentTick public int CurrentTick { get; } Property Value int CurrentTime public int CurrentTime { get; } Property Value int DefaultGameType public GameType DefaultGameType { get; } Property Value GameType Difficulty public Difficulty Difficulty { get; } Property Value Difficulty Entities Gets all entities including players in the world. Requires trust on the client side. public Entity[] Entities { get; } Property Value Entity[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. EntitiesWithoutPlayers Gets all entities excluding players in the world. Requires trust on the client side. public Entity[] EntitiesWithoutPlayers { get; } Property Value Entity[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. FlatWorldOptions The json string of the flat world options used to create this world, right now it is not serialized or deserialized, it is just a string with the default but if they ever decide to implement it properly then it could be more useful public string FlatWorldOptions { get; } Property Value string ItemRegistry public ItemRegistry ItemRegistry { get; } Property Value ItemRegistry Name public string Name { get; } Property Value string NetherScale public int NetherScale { get; } Property Value int Players Gets all the players in the world. Requires trust on the client side. public Player[] Players { get; } Property Value Player[] Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. ProtocolVersion public int ProtocolVersion { get; } Property Value int Scoreboard public Scoreboard Scoreboard { get; } Property Value Scoreboard Seed public long Seed { get; } Property Value long ServerConnectedPlayers public ServerConnectedPlayer[] ServerConnectedPlayers { get; } Property Value ServerConnectedPlayer[] ServerPlayers Gets all the server players in the world. public ServerPlayer[] ServerPlayers { get; } Property Value ServerPlayer[] ServerTickRange public int ServerTickRange { get; } Property Value int SpawnPosition public BlockPos SpawnPosition { get; } Property Value BlockPos WorldIdentifier This is not necessarily unique, in vanilla it is the name of the world folder, servers can send anything, on realms it generally just says \"world\" public string WorldIdentifier { get; } Property Value string Methods GetEntityByRuntimeId(ulong) Gets the entity with the specified runtime id. Requires trust on the client side. public Entity? GetEntityByRuntimeId(ulong runtimeId) Parameters runtimeId ulong Returns Entity Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetEntityByUniqueId(ulong) Gets the entity with the specified unique id. Requires trust on the client side. public Entity? GetEntityByUniqueId(ulong uniqueId) Parameters uniqueId ulong Returns Entity Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetPlayerByXuid(string) Gets the player with the specified xuid. Requires trust on the client side. public Player? GetPlayerByXuid(string xuid) Parameters xuid string Returns Player Exceptions InsufficientTrustException Thrown when the user lacks the trust level necessary for this. GetServerPlayerByXuid(string) Gets the server player with the specified xuid. public ServerPlayer? GetServerPlayerByXuid(string xuid) Parameters xuid string Returns ServerPlayer IsSlimeChunk(ChunkPos) public bool IsSlimeChunk(ChunkPos pos) Parameters pos ChunkPos Returns bool"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.Scoreboard.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.Scoreboard.html",
    "title": "Class Scoreboard | Onix Plugin Documentation",
    "summary": "Class Scoreboard Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public class Scoreboard : MemoryAddressContainer Inheritance object MemoryAddressContainer Scoreboard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BelowNameObjective public ScoreboardDisplayObjective? BelowNameObjective { get; } Property Value ScoreboardDisplayObjective DisplayObjectives public IReadOnlyDictionary<string, ScoreboardDisplayObjective> DisplayObjectives { get; } Property Value IReadOnlyDictionary<string, ScoreboardDisplayObjective> ListObjective public ScoreboardDisplayObjective? ListObjective { get; } Property Value ScoreboardDisplayObjective Objectives public IReadOnlyDictionary<string, ScoreboardObjective> Objectives { get; } Property Value IReadOnlyDictionary<string, ScoreboardObjective> SidebarObjective public ScoreboardDisplayObjective? SidebarObjective { get; } Property Value ScoreboardDisplayObjective Methods AddScore(ScoreboardObjective?, Entity, int) public int? AddScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective entityOrPlayer Entity value int Returns int? AddScore(ScoreboardObjective?, ScoreboardIdentity?, int) public int? AddScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective identity ScoreboardIdentity value int Returns int? AddScore(ScoreboardObjective?, string, int) public int? AddScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective fakePlayer string value int Returns int? AddScore(string, Entity, int) public int? AddScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string entityOrPlayer Entity value int Returns int? AddScore(string, ScoreboardIdentity?, int) public int? AddScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string identity ScoreboardIdentity value int Returns int? AddScore(string, string, int) public int? AddScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string fakePlayer string value int Returns int? ClearDisplayObjective(ScoreboardDisplayObjectivePosition) public void ClearDisplayObjective(ScoreboardDisplayObjectivePosition position) Parameters position ScoreboardDisplayObjectivePosition ClearDisplayObjective(string) public void ClearDisplayObjective(string position) Parameters position string ClearScore(ScoreboardObjective?, Entity) public void ClearScore(ScoreboardObjective? objective, Entity entityOrPlayer) Parameters objective ScoreboardObjective entityOrPlayer Entity ClearScore(ScoreboardObjective?, ScoreboardIdentity?) public void ClearScore(ScoreboardObjective? objective, ScoreboardIdentity? identity) Parameters objective ScoreboardObjective identity ScoreboardIdentity ClearScore(ScoreboardObjective?, string) public void ClearScore(ScoreboardObjective? objective, string fakePlayer) Parameters objective ScoreboardObjective fakePlayer string ClearScore(string, Entity) public void ClearScore(string objectiveName, Entity entityOrPlayer) Parameters objectiveName string entityOrPlayer Entity ClearScore(string, ScoreboardIdentity?) public void ClearScore(string objectiveName, ScoreboardIdentity? identity) Parameters objectiveName string identity ScoreboardIdentity ClearScore(string, string) public void ClearScore(string objectiveName, string fakePlayer) Parameters objectiveName string fakePlayer string GetDisplayObjective(ScoreboardDisplayObjectivePosition) public ScoreboardDisplayObjective? GetDisplayObjective(ScoreboardDisplayObjectivePosition position) Parameters position ScoreboardDisplayObjectivePosition Returns ScoreboardDisplayObjective GetDisplayObjective(string) public ScoreboardDisplayObjective? GetDisplayObjective(string position) Parameters position string Returns ScoreboardDisplayObjective GetEntityIdentity(Entity) public ScoreboardIdentity? GetEntityIdentity(Entity entityOrPlayer) Parameters entityOrPlayer Entity Returns ScoreboardIdentity GetEntityIdentity(ulong) public ScoreboardIdentity? GetEntityIdentity(ulong entityUniqueId) Parameters entityUniqueId ulong Returns ScoreboardIdentity GetFakePlayerIdentity(string) public ScoreboardIdentity? GetFakePlayerIdentity(string name) Parameters name string Returns ScoreboardIdentity GetObjective(string) public ScoreboardObjective? GetObjective(string name) Parameters name string Returns ScoreboardObjective GetPlayerIdentity(ulong) public ScoreboardIdentity? GetPlayerIdentity(ulong playerUniqueId) Parameters playerUniqueId ulong Returns ScoreboardIdentity GetScore(ScoreboardObjective?, Entity) public int? GetScore(ScoreboardObjective? objective, Entity entityOrPlayer) Parameters objective ScoreboardObjective entityOrPlayer Entity Returns int? GetScore(ScoreboardObjective?, ScoreboardIdentity?) public int? GetScore(ScoreboardObjective? objective, ScoreboardIdentity? identity) Parameters objective ScoreboardObjective identity ScoreboardIdentity Returns int? GetScore(ScoreboardObjective?, string) public int? GetScore(ScoreboardObjective? objective, string fakePlayer) Parameters objective ScoreboardObjective fakePlayer string Returns int? GetScore(string, Entity) public int? GetScore(string objectiveName, Entity entityOrPlayer) Parameters objectiveName string entityOrPlayer Entity Returns int? GetScore(string, ScoreboardIdentity?) public int? GetScore(string objectiveName, ScoreboardIdentity? identity) Parameters objectiveName string identity ScoreboardIdentity Returns int? GetScore(string, string) public int? GetScore(string objectiveName, string fakePlayer) Parameters objectiveName string fakePlayer string Returns int? ModifyScore(ScoreboardObjective?, Entity, ScoreboardScoreOperation, int) public int? ModifyScore(ScoreboardObjective? objective, Entity entityOrPlayer, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective entityOrPlayer Entity operation ScoreboardScoreOperation value int Returns int? ModifyScore(ScoreboardObjective?, ScoreboardIdentity?, ScoreboardScoreOperation, int) public int? ModifyScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective identity ScoreboardIdentity operation ScoreboardScoreOperation value int Returns int? ModifyScore(ScoreboardObjective?, string, ScoreboardScoreOperation, int) public int? ModifyScore(ScoreboardObjective? objective, string fakePlayer, ScoreboardScoreOperation operation, int value) Parameters objective ScoreboardObjective fakePlayer string operation ScoreboardScoreOperation value int Returns int? ModifyScore(string, Entity, ScoreboardScoreOperation, int) public int? ModifyScore(string objectiveName, Entity entityOrPlayer, ScoreboardScoreOperation operation, int value) Parameters objectiveName string entityOrPlayer Entity operation ScoreboardScoreOperation value int Returns int? ModifyScore(string, ScoreboardIdentity?, ScoreboardScoreOperation, int) public int? ModifyScore(string objectiveName, ScoreboardIdentity? identity, ScoreboardScoreOperation operation, int value) Parameters objectiveName string identity ScoreboardIdentity operation ScoreboardScoreOperation value int Returns int? ModifyScore(string, string, ScoreboardScoreOperation, int) public int? ModifyScore(string objectiveName, string fakePlayer, ScoreboardScoreOperation operation, int value) Parameters objectiveName string fakePlayer string operation ScoreboardScoreOperation value int Returns int? SetDisplayObjective(ScoreboardObjective?, ScoreboardDisplayObjectivePosition, ScoreboardObjectiveSortOrder) public void SetDisplayObjective(ScoreboardObjective? objective, ScoreboardDisplayObjectivePosition position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Ascending) Parameters objective ScoreboardObjective position ScoreboardDisplayObjectivePosition sortOrder ScoreboardObjectiveSortOrder SetDisplayObjective(ScoreboardObjective?, string, ScoreboardObjectiveSortOrder) public void SetDisplayObjective(ScoreboardObjective? objective, string position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Descending) Parameters objective ScoreboardObjective position string sortOrder ScoreboardObjectiveSortOrder SetDisplayObjective(string, ScoreboardDisplayObjectivePosition, ScoreboardObjectiveSortOrder) public void SetDisplayObjective(string objectiveName, ScoreboardDisplayObjectivePosition position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Ascending) Parameters objectiveName string position ScoreboardDisplayObjectivePosition sortOrder ScoreboardObjectiveSortOrder SetDisplayObjective(string, string, ScoreboardObjectiveSortOrder) public void SetDisplayObjective(string objectiveName, string position, ScoreboardObjectiveSortOrder sortOrder = ScoreboardObjectiveSortOrder.Descending) Parameters objectiveName string position string sortOrder ScoreboardObjectiveSortOrder SetScore(ScoreboardObjective?, Entity, int) public void SetScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective entityOrPlayer Entity value int SetScore(ScoreboardObjective?, ScoreboardIdentity?, int) public void SetScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective identity ScoreboardIdentity value int SetScore(ScoreboardObjective?, string, int) public void SetScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective fakePlayer string value int SetScore(string, Entity, int) public void SetScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string entityOrPlayer Entity value int SetScore(string, ScoreboardIdentity?, int) public void SetScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string identity ScoreboardIdentity value int SetScore(string, string, int) public void SetScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string fakePlayer string value int SubtractScore(ScoreboardObjective?, Entity, int) public int? SubtractScore(ScoreboardObjective? objective, Entity entityOrPlayer, int value) Parameters objective ScoreboardObjective entityOrPlayer Entity value int Returns int? SubtractScore(ScoreboardObjective?, ScoreboardIdentity?, int) public int? SubtractScore(ScoreboardObjective? objective, ScoreboardIdentity? identity, int value) Parameters objective ScoreboardObjective identity ScoreboardIdentity value int Returns int? SubtractScore(ScoreboardObjective?, string, int) public int? SubtractScore(ScoreboardObjective? objective, string fakePlayer, int value) Parameters objective ScoreboardObjective fakePlayer string value int Returns int? SubtractScore(string, Entity, int) public int? SubtractScore(string objectiveName, Entity entityOrPlayer, int value) Parameters objectiveName string entityOrPlayer Entity value int Returns int? SubtractScore(string, ScoreboardIdentity?, int) public int? SubtractScore(string objectiveName, ScoreboardIdentity? identity, int value) Parameters objectiveName string identity ScoreboardIdentity value int Returns int? SubtractScore(string, string, int) public int? SubtractScore(string objectiveName, string fakePlayer, int value) Parameters objectiveName string fakePlayer string value int Returns int?"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardDisplayObjective.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardDisplayObjective.html",
    "title": "Class ScoreboardDisplayObjective | Onix Plugin Documentation",
    "summary": "Class ScoreboardDisplayObjective Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public class ScoreboardDisplayObjective : ScoreboardObjective Inheritance object MemoryAddressContainer ScoreboardObjective ScoreboardDisplayObjective Inherited Members ScoreboardObjective.Scores ScoreboardObjective.Name ScoreboardObjective.DisplayName ScoreboardObjective.IsReadOnly ScoreboardObjective.CriteriaName ScoreboardObjective.RenderType ScoreboardObjective.GetScore(ScoreboardIdentity) ScoreboardObjective.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties SortOrder public ScoreboardObjectiveSortOrder SortOrder { get; } Property Value ScoreboardObjectiveSortOrder Methods GetOrderedScores() public List<KeyValuePair<ScoreboardIdentity, int>> GetOrderedScores() Returns List<KeyValuePair<ScoreboardIdentity, int>> GetOrderedScores(ScoreboardObjectiveSortOrder) public List<KeyValuePair<ScoreboardIdentity, int>> GetOrderedScores(ScoreboardObjectiveSortOrder overridenSortOrder) Parameters overridenSortOrder ScoreboardObjectiveSortOrder Returns List<KeyValuePair<ScoreboardIdentity, int>>"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardDisplayObjectivePosition.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardDisplayObjectivePosition.html",
    "title": "Enum ScoreboardDisplayObjectivePosition | Onix Plugin Documentation",
    "summary": "Enum ScoreboardDisplayObjectivePosition Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardDisplayObjectivePosition Fields BelowName = 2 List = 1 Sidebar = 0"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardIdentity.IdentityType.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardIdentity.IdentityType.html",
    "title": "Enum ScoreboardIdentity.IdentityType | Onix Plugin Documentation",
    "summary": "Enum ScoreboardIdentity.IdentityType Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardIdentity.IdentityType Fields Entity = 2 FakePlayer = 3 Invalid = 0 Player = 1"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardIdentity.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardIdentity.html",
    "title": "Class ScoreboardIdentity | Onix Plugin Documentation",
    "summary": "Class ScoreboardIdentity Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public class ScoreboardIdentity Inheritance object ScoreboardIdentity Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties EntityUniqueId public ulong? EntityUniqueId { get; } Property Value ulong? FakePlayerName public string? FakePlayerName { get; } Property Value string IsEntityOrPlayer public bool IsEntityOrPlayer { get; } Property Value bool IsHiddenFakePlayer public bool IsHiddenFakePlayer { get; } Property Value bool PlayerUniqueId public ulong? PlayerUniqueId { get; } Property Value ulong? ScoreboardId public ulong ScoreboardId { get; } Property Value ulong Type public ScoreboardIdentity.IdentityType Type { get; } Property Value ScoreboardIdentity.IdentityType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetDisplayName(RuntimeWorld, bool) public string GetDisplayName(RuntimeWorld world, bool includeEntityNametag = true) Parameters world RuntimeWorld includeEntityNametag bool By default it just puts the entity id with no effort. Returns string GetEntity(RuntimeWorld) public Entity? GetEntity(RuntimeWorld world) Parameters world RuntimeWorld Returns Entity GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetPlayer(RuntimeWorld) public Player? GetPlayer(RuntimeWorld world) Parameters world RuntimeWorld Returns Player GetServerPlayer(RuntimeWorld) public ServerPlayer? GetServerPlayer(RuntimeWorld world) Parameters world RuntimeWorld Returns ServerPlayer ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjective.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjective.html",
    "title": "Class ScoreboardObjective | Onix Plugin Documentation",
    "summary": "Class ScoreboardObjective Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public class ScoreboardObjective : MemoryAddressContainer Inheritance object MemoryAddressContainer ScoreboardObjective Derived ScoreboardDisplayObjective Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CriteriaName public string CriteriaName { get; } Property Value string DisplayName public string DisplayName { get; } Property Value string IsReadOnly public bool IsReadOnly { get; } Property Value bool Name public string Name { get; } Property Value string RenderType public ScoreboardObjectiveRenderType RenderType { get; } Property Value ScoreboardObjectiveRenderType Scores public IReadOnlyDictionary<ScoreboardIdentity, int> Scores { get; } Property Value IReadOnlyDictionary<ScoreboardIdentity, int> Methods GetScore(ScoreboardIdentity?) public int? GetScore(ScoreboardIdentity? identity) Parameters identity ScoreboardIdentity Returns int? ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjectiveRenderType.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjectiveRenderType.html",
    "title": "Enum ScoreboardObjectiveRenderType | Onix Plugin Documentation",
    "summary": "Enum ScoreboardObjectiveRenderType Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardObjectiveRenderType Fields Hearts = 1 Integer = 0"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjectiveSortOrder.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardObjectiveSortOrder.html",
    "title": "Enum ScoreboardObjectiveSortOrder | Onix Plugin Documentation",
    "summary": "Enum ScoreboardObjectiveSortOrder Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardObjectiveSortOrder Fields Ascending = 0 Descending = 1"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardScoreOperation.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.ScoreboardScoreOperation.html",
    "title": "Enum ScoreboardScoreOperation | Onix Plugin Documentation",
    "summary": "Enum ScoreboardScoreOperation Namespace OnixRuntime.Core.World.Scoreboards Assembly OnixRuntime.dll public enum ScoreboardScoreOperation Fields Add = 1 Max = 4 Min = 3 Set = 0 Subtract = 2"
  },
  "docs/OnixRuntime.Core.World.Scoreboards.html": {
    "href": "docs/OnixRuntime.Core.World.Scoreboards.html",
    "title": "Namespace OnixRuntime.Core.World.Scoreboards | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.World.Scoreboards Classes Scoreboard ScoreboardDisplayObjective ScoreboardIdentity ScoreboardObjective Enums ScoreboardDisplayObjectivePosition ScoreboardIdentity.IdentityType ScoreboardObjectiveRenderType ScoreboardObjectiveSortOrder ScoreboardScoreOperation"
  },
  "docs/OnixRuntime.Core.World.WorldBlocks.BlockUpdateType.html": {
    "href": "docs/OnixRuntime.Core.World.WorldBlocks.BlockUpdateType.html",
    "title": "Enum WorldBlocks.BlockUpdateType | Onix Plugin Documentation",
    "summary": "Enum WorldBlocks.BlockUpdateType Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll [Flags] public enum WorldBlocks.BlockUpdateType Fields All = NeighborsAndNetwork | NoGraphicsAndNoPriority AllButNoGraphics = Neighbors | NetworkAndNoPriority Neighbors = 1 NeighborsAndNetwork = Neighbors | Network NeighborsAndNoGraphics = Neighbors | NoGraphics NeighborsAndNoPriority = Neighbors | Priority Network = 2 NetworkAndNoGraphics = Network | NoGraphics NetworkAndNoPriority = Network | Priority NoGraphics = 4 NoGraphicsAndNoPriority = NoGraphics | Priority None = 0 Priority = 8"
  },
  "docs/OnixRuntime.Core.World.WorldBlocks.html": {
    "href": "docs/OnixRuntime.Core.World.WorldBlocks.html",
    "title": "Class WorldBlocks | Onix Plugin Documentation",
    "summary": "Class WorldBlocks Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class WorldBlocks : MemoryAddressContainer Inheritance object MemoryAddressContainer WorldBlocks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dimension public Dimension Dimension { get; } Property Value Dimension MaxHeight public int MaxHeight { get; } Property Value int MinHeight public int MinHeight { get; } Property Value int World public RuntimeWorld World { get; } Property Value RuntimeWorld WorldChunks Going this path could lead to instabilities and crashes. public WorldChunks WorldChunks { get; } Property Value WorldChunks Methods GetBiome(BlockPos) public Biome GetBiome(BlockPos worldPosition) Parameters worldPosition BlockPos Returns Biome GetBiomeTintedColors(BlockPos) public BiomeTintColors GetBiomeTintedColors(BlockPos worldPosition) Parameters worldPosition BlockPos Returns BiomeTintColors GetBlock(BlockPos) public Block GetBlock(BlockPos worldPosition) Parameters worldPosition BlockPos Returns Block GetBlock(int, int, int) public Block GetBlock(int x, int y, int z) Parameters x int y int z int Returns Block GetBlockEntity(BlockPos) public BlockEntity? GetBlockEntity(BlockPos worldPosition) Parameters worldPosition BlockPos Returns BlockEntity GetBlockEntity(int, int, int) public BlockEntity? GetBlockEntity(int x, int y, int z) Parameters x int y int z int Returns BlockEntity GetBrightness(BlockPos) public BrightnessLevels GetBrightness(BlockPos worldPosition) Parameters worldPosition BlockPos Returns BrightnessLevels GetChunk(ChunkPos, bool) Accessing chunk data could be unstable and lead to crashes if the chunk were to unload before you finish using it. public WorldChunk? GetChunk(ChunkPos chunkPosition, bool mustBeLoaded = true) Parameters chunkPosition ChunkPos The position of the chunk to get. mustBeLoaded bool If the chunk has to be fully loaded and ready to obtain it. Returns WorldChunk GetCollisions(BlockPos, bool) The positions returned are in world coordinates. public BoundingBox[] GetCollisions(BlockPos position, bool includeUnloadedChunks = true) Parameters position BlockPos includeUnloadedChunks bool Returns BoundingBox[] GetCollisions(BoundingBox, bool) The positions returned are in world coordinates. public BoundingBox[] GetCollisions(BoundingBox areaToCheck, bool includeUnloadedChunks = true) Parameters areaToCheck BoundingBox includeUnloadedChunks bool Returns BoundingBox[] GetMapColor(BlockPos) public ColorF GetMapColor(BlockPos worldPosition) Parameters worldPosition BlockPos Returns ColorF Raycast(Vec3, Vec3, bool, bool, bool, bool, int) public RaycastResult Raycast(Vec3 origin, Vec3 target, bool solidBlocksOnly = true, bool hitLiquid = false, bool fullBlocksOnly = false, bool ignoreBorderBlocks = false, int maxDistance = 500000) Parameters origin Vec3 target Vec3 solidBlocksOnly bool hitLiquid bool fullBlocksOnly bool ignoreBorderBlocks bool maxDistance int Returns RaycastResult SetBlock(BlockPos, Block, BlockUpdateType) public void SetBlock(BlockPos worldPosition, Block block, WorldBlocks.BlockUpdateType updateType = BlockUpdateType.NeighborsAndNetwork) Parameters worldPosition BlockPos block Block updateType WorldBlocks.BlockUpdateType"
  },
  "docs/OnixRuntime.Core.World.WorldChunk.ChunkState.html": {
    "href": "docs/OnixRuntime.Core.World.WorldChunk.ChunkState.html",
    "title": "Enum WorldChunk.ChunkState | Onix Plugin Documentation",
    "summary": "Enum WorldChunk.ChunkState Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public enum WorldChunk.ChunkState Fields CheckingForReplacementData = 5 Generated = 2 Generating = 1 Lighting = 7 LightingFinished = 8 Loaded = 9 NeedsLighting = 6 PostProcessed = 4 PostProcessing = 3 Unloaded = 0"
  },
  "docs/OnixRuntime.Core.World.WorldChunk.html": {
    "href": "docs/OnixRuntime.Core.World.WorldChunk.html",
    "title": "Class WorldChunk | Onix Plugin Documentation",
    "summary": "Class WorldChunk Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class WorldChunk : MemoryAddressContainer Inheritance object MemoryAddressContainer WorldChunk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dimension public Dimension Dimension { get; } Property Value Dimension LastTick public int LastTick { get; } Property Value int LoadState public WorldChunk.ChunkState LoadState { get; } Property Value WorldChunk.ChunkState MaxHeight public int MaxHeight { get; } Property Value int MinHeight public int MinHeight { get; } Property Value int Position public ChunkPos Position { get; } Property Value ChunkPos World public RuntimeWorld World { get; } Property Value RuntimeWorld WorldPosMax public BlockPos WorldPosMax { get; } Property Value BlockPos WorldPosMin public BlockPos WorldPosMin { get; } Property Value BlockPos Methods GetBlock(int, int, int) public Block? GetBlock(int inChunkX, int inChunkY, int inChunkZ) Parameters inChunkX int inChunkY int inChunkZ int Returns Block GetHeightAt(int, int) public int GetHeightAt(int relativeX, int relativeZ) Parameters relativeX int relativeZ int Returns int GetRainHeightAt(int, int) public int GetRainHeightAt(int relativeX, int relativeZ) Parameters relativeX int relativeZ int Returns int"
  },
  "docs/OnixRuntime.Core.World.WorldChunks.html": {
    "href": "docs/OnixRuntime.Core.World.WorldChunks.html",
    "title": "Class WorldChunks | Onix Plugin Documentation",
    "summary": "Class WorldChunks Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class WorldChunks : MemoryAddressContainer, IEnumerable<WorldChunk>, IEnumerable Inheritance object MemoryAddressContainer WorldChunks Implements IEnumerable<WorldChunk> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChunkPositions Note that this may contain chunks that are no longer valid or not loaded. You should use GetChunk to get only valid/loaded chunks or the IEnumerable public ChunkPos[] ChunkPositions { get; } Property Value ChunkPos[] Dimension public Dimension Dimension { get; } Property Value Dimension World public RuntimeWorld World { get; } Property Value RuntimeWorld Methods GetChunk(ChunkPos, bool) public WorldChunk? GetChunk(ChunkPos pos, bool requireLoaded = true) Parameters pos ChunkPos requireLoaded bool Returns WorldChunk GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<WorldChunk> GetEnumerator() Returns IEnumerator<WorldChunk> An enumerator that can be used to iterate through the collection. GetEnumerator(bool) public IEnumerator<WorldChunk> GetEnumerator(bool requireLoaded) Parameters requireLoaded bool Returns IEnumerator<WorldChunk>"
  },
  "docs/OnixRuntime.Core.World.WorldChunksIterator.html": {
    "href": "docs/OnixRuntime.Core.World.WorldChunksIterator.html",
    "title": "Class WorldChunksIterator | Onix Plugin Documentation",
    "summary": "Class WorldChunksIterator Namespace OnixRuntime.Core.World Assembly OnixRuntime.dll public class WorldChunksIterator : IEnumerator<WorldChunk>, IEnumerator, IDisposable Inheritance object WorldChunksIterator Implements IEnumerator<WorldChunk> IEnumerator IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldChunksIterator(WorldChunks, bool) public WorldChunksIterator(WorldChunks chunks, bool requireLoaded = true) Parameters chunks WorldChunks requireLoaded bool Properties Current Gets the element in the collection at the current position of the enumerator. public WorldChunk Current { get; } Property Value WorldChunk The element in the collection at the current position of the enumerator. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "docs/OnixRuntime.Core.World.html": {
    "href": "docs/OnixRuntime.Core.World.html",
    "title": "Namespace OnixRuntime.Core.World | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core.World Classes Biome Block BlockEntity BlockRegistry Dimension EndDimension NetherDimension OverworldDimension RaycastResult RuntimeWorld WorldBlocks WorldChunk WorldChunks WorldChunksIterator Structs BiomeTintColors BrightnessLevels DimensionWeather Enums BlockFace CreativeItemCategory Difficulty DimensionType RaycastResultType WorldBlocks.BlockUpdateType WorldChunk.ChunkState"
  },
  "docs/OnixRuntime.Core.html": {
    "href": "docs/OnixRuntime.Core.html",
    "title": "Namespace OnixRuntime.Core | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Core Classes Onix OnixClientThings OnixGame Enums ClientNotificationType"
  },
  "docs/OnixRuntime.Extensions.TimeSpanExtensions.html": {
    "href": "docs/OnixRuntime.Extensions.TimeSpanExtensions.html",
    "title": "Class TimeSpanExtensions | Onix Plugin Documentation",
    "summary": "Class TimeSpanExtensions Namespace OnixRuntime.Extensions Assembly OnixRuntime.dll Provides extension methods for converting between TimeSpan and game ticks. public static class TimeSpanExtensions Inheritance object TimeSpanExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromGameTicks(int) Converts the specified number of game ticks to a TimeSpan. public static TimeSpan FromGameTicks(int ticks) Parameters ticks int The number of game ticks (20 ticks per second). Returns TimeSpan A TimeSpan representing the specified number of game ticks. ToGameTicks(TimeSpan) Converts a TimeSpan to the equivalent number of game ticks. public static int ToGameTicks(this TimeSpan timeSpan) Parameters timeSpan TimeSpan The TimeSpan to convert. Returns int The number of game ticks (20 ticks per second) represented by the TimeSpan."
  },
  "docs/OnixRuntime.Extensions.html": {
    "href": "docs/OnixRuntime.Extensions.html",
    "title": "Namespace OnixRuntime.Extensions | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Extensions Classes TimeSpanExtensions Provides extension methods for converting between TimeSpan and game ticks."
  },
  "docs/OnixRuntime.Plugin.IOnixPlugin.html": {
    "href": "docs/OnixRuntime.Plugin.IOnixPlugin.html",
    "title": "Interface IOnixPlugin | Onix Plugin Documentation",
    "summary": "Interface IOnixPlugin Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public interface IOnixPlugin Properties CompatibleWithGameVersion If the plugin is compatible with the current game version. bool CompatibleWithGameVersion { get; } Property Value bool CompatibleWithRuntime If the plugin is compatible with the current runtime. bool CompatibleWithRuntime { get; } Property Value bool DisplayModule The display module of the plugin. This is used to have the settings of the plugin in the OnixClient plugin settings menu. OnixModule DisplayModule { get; } Property Value OnixModule IsBusy When the plugin is busy, it cannot be enabled/disabled or unloaded. bool IsBusy { get; } Property Value bool IsLoaded If the plugin is loaded. bool IsLoaded { get; } Property Value bool Manifest The plugin's manifest. PluginManifest Manifest { get; } Property Value PluginManifest PluginFolder The plugin's directory path. OnixClient/Plugins/plugins/uuid_of_plugin string PluginFolder { get; } Property Value string PluginFolderName This is the name of just the directory, to get the uuid you should use the Manifest's Uuid. string PluginFolderName { get; } Property Value string PluginPersistentDataDirectory This is the path to the plugin's persistent data directory within the OnixClient/Plugins/configs/uuid/data folder. string PluginPersistentDataDirectory { get; } Property Value string PluginSettingsDirectory This is the path to the plugin's settings directory within the OnixClient/Plugins/configs folder. string PluginSettingsDirectory { get; } Property Value string PluginState The current state of the plugin. PluginState PluginState { get; } Property Value PluginState Settings The settings of the plugin like if it should get loaded or if it's enabled. PluginSettings Settings { get; } Property Value PluginSettings Uuid The plugin's UUID. string Uuid { get; } Property Value string Methods DisablePlugin() Tries to disable the plugin. This will be false when it fails. You can check IsBusy and IsLoaded bool DisablePlugin() Returns bool True when the plugin will be enabled. EnablePlugin() Tries to enable the plugin. This will be false when it fails. You can check IsBusy and IsLoaded bool EnablePlugin() Returns bool True when the plugin will be enabled. StartLoadPlugin() Will load the plugin. IsLoaded void StartLoadPlugin() StartUnloadPlugin() Will unload the plugin. IsLoaded /// void StartUnloadPlugin()"
  },
  "docs/OnixRuntime.Plugin.OnixPluginBase.html": {
    "href": "docs/OnixRuntime.Plugin.OnixPluginBase.html",
    "title": "Class OnixPluginBase | Onix Plugin Documentation",
    "summary": "Class OnixPluginBase Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Base class for Onix plugins, providing access to plugin manifest, asset paths, persistent data, and lifecycle events. public class OnixPluginBase Inheritance object OnixPluginBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnixPluginBase(OnixPluginInitInfo) Initializes a new instance of the OnixPluginBase class with the specified initialization info. protected OnixPluginBase(OnixPluginInitInfo info) Parameters info OnixPluginInitInfo The initialization info for the plugin. Fields PluginEjectionCancellationToken Gets the cancellation token used for plugin ejection. protected CancellationToken PluginEjectionCancellationToken Field Value CancellationToken Properties CurrentPluginManifest Gets the manifest for the current plugin. public PluginManifest CurrentPluginManifest { get; } Property Value PluginManifest DisablingShouldUnloadPlugin If true, disabling your plugin will unload it fully then load it back. This is useful for plugins that don't want to handle cleaning up their state when disabled. public bool DisablingShouldUnloadPlugin { get; protected set; } Property Value bool PluginAssetsPath Gets the path to the plugin's assets folder. public string PluginAssetsPath { get; } Property Value string PluginDisplayModule Gets the display module for the plugin, used to show the plugin's main settings. public OnixModule PluginDisplayModule { get; } Property Value OnixModule PluginPersistentDataPath Gets the path to the plugin's persistent data folder. public string PluginPersistentDataPath { get; } Property Value string SaveManager Gets the save manager, allowing you to save data to config, get config name or track OnixModules or OnixSettings. public OnixPluginSaveManager SaveManager { get; set; } Property Value OnixPluginSaveManager Methods OnDisabled() Called when the plugin is disabled. Override to implement custom enable logic. protected virtual void OnDisabled() OnEnabled() Called when the plugin is enabled. Override to implement custom enable logic. protected virtual void OnEnabled() OnLoaded() Called when the plugin is loaded. Override to implement custom load logic. protected virtual void OnLoaded() OnUnloaded() Called when the plugin is unloaded. Override to implement custom unload logic. protected virtual void OnUnloaded() WaitForDebuggerToBeAttached(TimeSpan?) Waits for a debugger to be present, call this from your constructor to not freeze a game thread unnecessarily. protected bool WaitForDebuggerToBeAttached(TimeSpan? timeout = null) Parameters timeout TimeSpan? How long to wait, defaults to 30 seconds. Returns bool True if the debugger was attached within the timeout; otherwise, false."
  },
  "docs/OnixRuntime.Plugin.OnixPluginInitInfo.html": {
    "href": "docs/OnixRuntime.Plugin.OnixPluginInitInfo.html",
    "title": "Class OnixPluginInitInfo | Onix Plugin Documentation",
    "summary": "Class OnixPluginInitInfo Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Contains initialization information for an Onix plugin, including manifest, asset paths, persistent data, cancellation, and bound DLLs. public class OnixPluginInitInfo Inheritance object OnixPluginInitInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AssetsFolderPath Gets the path to the plugin's assets folder. public string AssetsFolderPath Field Value string BoundDllNamesToPath Gets the dictionary mapping bound DLL names to their paths. public Dictionary<string, string> BoundDllNamesToPath Field Value Dictionary<string, string> CancellationToken Gets the cancellation token for plugin ejection. public CancellationToken CancellationToken Field Value CancellationToken DisplayModule The display module for the plugin, used to show the plugin's main settings. public OnixModule DisplayModule Field Value OnixModule Manifest Gets the manifest for the plugin. public PluginManifest Manifest Field Value PluginManifest PluginDataFolderPath Gets the path to the plugin's persistent data folder. public string PluginDataFolderPath Field Value string SaveManager The save manager for this mod, providing generic config save events. public OnixPluginSaveManager SaveManager Field Value OnixPluginSaveManager"
  },
  "docs/OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigLoadDelegate.html": {
    "href": "docs/OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigLoadDelegate.html",
    "title": "Delegate OnixPluginSaveManager.OnConfigLoadDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixPluginSaveManager.OnConfigLoadDelegate Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public delegate void OnixPluginSaveManager.OnConfigLoadDelegate(JsonNode config) Parameters config JsonNode"
  },
  "docs/OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigSaveDelegate.html": {
    "href": "docs/OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigSaveDelegate.html",
    "title": "Delegate OnixPluginSaveManager.OnConfigSaveDelegate | Onix Plugin Documentation",
    "summary": "Delegate OnixPluginSaveManager.OnConfigSaveDelegate Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public delegate JsonNode? OnixPluginSaveManager.OnConfigSaveDelegate() Returns JsonNode"
  },
  "docs/OnixRuntime.Plugin.OnixPluginSaveManager.html": {
    "href": "docs/OnixRuntime.Plugin.OnixPluginSaveManager.html",
    "title": "Class OnixPluginSaveManager | Onix Plugin Documentation",
    "summary": "Class OnixPluginSaveManager Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public class OnixPluginSaveManager Inheritance object OnixPluginSaveManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentConfigName This is the name of the current plugin config. Using this, you can respect different configs. public string CurrentConfigName { get; } Property Value string Methods TrackModule(OnixModule) Tracks the given module if it's not already tracked. This means next save or load, the module's save and load methods will be called. Calling this will also try to load the module from the last save. public void TrackModule(OnixModule module) Parameters module OnixModule The instance to track and try load settings for. TrackSetting(OnixSetting, bool, string) Tracks the given setting if it's not already tracked. Tracked settings will have their values saved and restored with the module's configuration. public void TrackSetting(OnixSetting setting, bool addParentModuleNameAsPrefix = true, string prefix = \"\") Parameters setting OnixSetting The setting to track. addParentModuleNameAsPrefix bool Whether the parent module name should be added as a prefix to the setting key when saving. prefix string An optional custom prefix to apply to the setting key, useful for grouping or namespacing. UntrackAll() Stops tracking all modules and settings. This effectively resets tracking, preventing any saves or loads from affecting previously tracked items. public void UntrackAll() UntrackModule(OnixModule) Stops tracking the given module if it was previously tracked. This prevents its settings from being saved or restored during future operations. public void UntrackModule(OnixModule module) Parameters module OnixModule The module instance to stop tracking. UntrackSetting(OnixSetting) Stops tracking the given setting if it was previously tracked. This setting will no longer be saved or restored. public void UntrackSetting(OnixSetting setting) Parameters setting OnixSetting The setting to stop tracking. Events ConfigLoaded public event OnixPluginSaveManager.OnConfigLoadDelegate? ConfigLoaded Event Type OnixPluginSaveManager.OnConfigLoadDelegate ConfigSaved public event OnixPluginSaveManager.OnConfigSaveDelegate? ConfigSaved Event Type OnixPluginSaveManager.OnConfigSaveDelegate"
  },
  "docs/OnixRuntime.Plugin.PluginManifest.html": {
    "href": "docs/OnixRuntime.Plugin.PluginManifest.html",
    "title": "Class PluginManifest | Onix Plugin Documentation",
    "summary": "Class PluginManifest Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Represents the manifest for an Onix plugin, including metadata such as UUID, name, author, description, versions, and target assembly. public class PluginManifest Inheritance object PluginManifest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Gets or sets the author of the plugin. public string Author { get; set; } Property Value string Description Gets or sets the description of the plugin. public string Description { get; set; } Property Value string GameVersion Gets or sets the game version this plugin targets. public PluginSemVersion GameVersion { get; set; } Property Value PluginSemVersion HasToggleKey Whether this plugin has a toggle key handled automatically or not. public bool HasToggleKey { get; set; } Property Value bool Name Gets or sets the name of the plugin. public string Name { get; set; } Property Value string PluginVersion Gets or sets the plugin version. public PluginSemVersion PluginVersion { get; set; } Property Value PluginSemVersion RuntimeVersion Gets or sets the runtime version required by this plugin. public int RuntimeVersion { get; set; } Property Value int SupportedGameVersionRanges The supported game version range of the plugin. public List<SupportedVersionRange> SupportedGameVersionRanges { get; set; } Property Value List<SupportedVersionRange> TargetAssemblyName Gets or sets the target assembly name for this plugin. public string TargetAssemblyName { get; set; } Property Value string Uuid Gets or sets the UUID of the plugin. public string Uuid { get; set; } Property Value string Methods CheckUUID(string) Checks if the given string is a valid UUID. public static bool CheckUUID(string uuid) Parameters uuid string The UUID string to check. Returns bool True if the string is a valid UUID; otherwise, false. LoadManifest(Stream) Loads a plugin manifest from a stream. public static PluginManifest LoadManifest(Stream stream) Parameters stream Stream The stream containing the manifest JSON. Returns PluginManifest The loaded PluginManifest. LoadManifest(string) Loads a plugin manifest from a JSON string. public static PluginManifest LoadManifest(string json) Parameters json string The JSON string containing the manifest. Returns PluginManifest The loaded PluginManifest. LoadManifestFromFile(string) Loads a plugin manifest from a file. public static PluginManifest LoadManifestFromFile(string path) Parameters path string The path to the manifest file. Returns PluginManifest The loaded PluginManifest. SupportsGameVersion(PluginSemVersion) Checks if the plugin supports a specific game version. public bool SupportsGameVersion(PluginSemVersion version) Parameters version PluginSemVersion The version to check against. Returns bool"
  },
  "docs/OnixRuntime.Plugin.PluginSettings.html": {
    "href": "docs/OnixRuntime.Plugin.PluginSettings.html",
    "title": "Class PluginSettings | Onix Plugin Documentation",
    "summary": "Class PluginSettings Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Represents plugin settings, including whether the plugin is enabled and should load. public class PluginSettings Inheritance object PluginSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PluginSettings() public PluginSettings() Properties Enabled Gets or sets whether the plugin is enabled. public bool Enabled { get; set; } Property Value bool RawConfigurationData Initializes a new instance of the PluginSettings class. public string RawConfigurationData { get; set; } Property Value string SaveManager Gets or sets the save manager for the plugin's settings. public OnixPluginSaveManager? SaveManager { get; } Property Value OnixPluginSaveManager ShouldLoad Gets or sets whether the plugin should load. public bool ShouldLoad { get; set; } Property Value bool Methods GetConfigurationDataJson() Gets the configuration data as a JSON string. public string GetConfigurationDataJson() Returns string The configuration data as a json string. LoadSettings(Stream) Loads plugin settings from a stream. public static PluginSettings LoadSettings(Stream stream) Parameters stream Stream The stream containing the settings JSON. Returns PluginSettings The loaded PluginSettings. LoadSettings(string) Loads plugin settings from a JSON string. public static PluginSettings LoadSettings(string json) Parameters json string The JSON string containing the settings. Returns PluginSettings The loaded PluginSettings. SaveSettings() Serializes the plugin settings to a JSON string. public string SaveSettings() Returns string The JSON string representing the settings. SaveSettings(Stream) Serializes the plugin settings and writes them to a stream. public void SaveSettings(Stream stream) Parameters stream Stream The stream to write the settings to. SetConfigurationDataJson(string) Sets the configuration data from a JSON string. public void SetConfigurationDataJson(string json) Parameters json string The json string containing the json data. TryCreateSaveManager() public void TryCreateSaveManager()"
  },
  "docs/OnixRuntime.Plugin.PluginState.html": {
    "href": "docs/OnixRuntime.Plugin.PluginState.html",
    "title": "Enum PluginState | Onix Plugin Documentation",
    "summary": "Enum PluginState Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public enum PluginState Extension Methods PluginStateExtensions.IsBetweenStates(PluginState) Fields Disabled = 6 Disabling = 5 Enabled = 3 Enabling = 4 Loading = 2 Unloaded = 0 Unloading = 1"
  },
  "docs/OnixRuntime.Plugin.PluginStateExtensions.html": {
    "href": "docs/OnixRuntime.Plugin.PluginStateExtensions.html",
    "title": "Class PluginStateExtensions | Onix Plugin Documentation",
    "summary": "Class PluginStateExtensions Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll public static class PluginStateExtensions Inheritance object PluginStateExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsBetweenStates(PluginState) Checks if the plugin state is between loading and unloading states and not done on a specific state. public static bool IsBetweenStates(this PluginState state) Parameters state PluginState The state to check. Returns bool"
  },
  "docs/OnixRuntime.Plugin.PublicPluginManager.html": {
    "href": "docs/OnixRuntime.Plugin.PublicPluginManager.html",
    "title": "Class PublicPluginManager | Onix Plugin Documentation",
    "summary": "Class PublicPluginManager Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Wrapper allowing you to access public plugin data. public class PublicPluginManager Inheritance object PublicPluginManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PluginsLock When you want to access plugins, you can use this lock. Note that by default GetPlugins(bool) will lock the lock for you in reader mode. public ReaderWriterLockSlim PluginsLock Field Value ReaderWriterLockSlim Properties PluginDirectory Gets the directory where plugins are stored. OnixClient/Plugins/plugins public static string PluginDirectory { get; } Property Value string Methods GetDelegatesForEventInvocations(Delegate[]?) Gets delegates for event invocations. When you are having a public event available to other plugins, you can use this so trust is respected and not overshared. public static IEnumerable<Delegate> GetDelegatesForEventInvocations(Delegate[]? functions) Parameters functions Delegate[] The array of delegate functions. Returns IEnumerable<Delegate> An enumerable of delegates and their trust status. GetPluginByUuid(string, bool) This tries to get the plugin by its uuid. When you store an instance of a plugin, you should store the uuid instead of the instance itself and call this method. When loading/unloading enabling/disabling plugins, the instance may be different or disappear for some time before coming back. This ensures you're always interacting with a plugin as optimally as possible. public static IOnixPlugin? GetPluginByUuid(string uuid, bool lockPluginsLock = true) Parameters uuid string The uuid to look for. lockPluginsLock bool Defaults to true, set to false if you wish to lock the lock yourself. Returns IOnixPlugin The plugin or null. GetPlugins(bool) Gets every plugin that is loaded or unloaded but available. This will by default lock the lock for reading, if you want to avoid locking the lock or have already locked it, set lockPluginsLock to false. public static IEnumerable<IOnixPlugin> GetPlugins(bool lockPluginsLock = true) Parameters lockPluginsLock bool Defaults to true, set to false if you wish to lock the lock yourself. Returns IEnumerable<IOnixPlugin> The plugins as an IEnumerable. SaveRelevantPlugins() Saves all relevant plugins. Which means they are loaded. Unloaded plugins don't have any code running, or options shown to the user that need saving. Unloading, enabling and disabling a plugin saves the plugin and the options. public static void SaveRelevantPlugins() SaveRelevantPluginsInTheBackground() Saves all relevant plugins in the background. Which means they are loaded. Unloaded plugins don't have any code running, or options shown to the user that need saving. Unloading, enabling and disabling a plugin saves the plugin and the options. public static void SaveRelevantPluginsInTheBackground() SetAndLoadConfig(string) Sets the configuration name and reloads all plugins. public static void SetAndLoadConfig(string configName) Parameters configName string The name of the config."
  },
  "docs/OnixRuntime.Plugin.RuntimeManifest.html": {
    "href": "docs/OnixRuntime.Plugin.RuntimeManifest.html",
    "title": "Class RuntimeManifest | Onix Plugin Documentation",
    "summary": "Class RuntimeManifest Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Represents the runtime manifest, including runtime version information. public class RuntimeManifest Inheritance object RuntimeManifest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RuntimeUuid The uuid used by the runtime. public static readonly string RuntimeUuid Field Value string Properties Current Gets the current runtime manifest instance. public static RuntimeManifest? Current { get; } Property Value RuntimeManifest MinimumRuntimeVersion Gets or sets the minimum runtime version supported. public int MinimumRuntimeVersion { get; set; } Property Value int RuntimeVersion Gets or sets the runtime version. public int RuntimeVersion { get; set; } Property Value int Methods LoadManifest(string) Loads the runtime manifest from a JSON string. public static void LoadManifest(string json) Parameters json string The JSON string containing the runtime manifest."
  },
  "docs/OnixRuntime.Plugin.SupportedVersionRange.html": {
    "href": "docs/OnixRuntime.Plugin.SupportedVersionRange.html",
    "title": "Class SupportedVersionRange | Onix Plugin Documentation",
    "summary": "Class SupportedVersionRange Namespace OnixRuntime.Plugin Assembly OnixRuntime.dll Represents a range of supported versions, either a single version or a range of versions. public class SupportedVersionRange Inheritance object SupportedVersionRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SupportedVersionRange(PluginSemVersion) Creates a new range with only one version being supported. public SupportedVersionRange(PluginSemVersion version) Parameters version PluginSemVersion The version that is supported. SupportedVersionRange(PluginSemVersion, PluginSemVersion) Creates new supported version range, inclusively. public SupportedVersionRange(PluginSemVersion min, PluginSemVersion max) Parameters min PluginSemVersion The minimum version. max PluginSemVersion The maximum version SupportedVersionRange(string) Parses a version range from a string. This will throw an exception if the string is not in the correct format. You can have a single version or a range. Single version: \"1.16.40\" Range: \"1.16.40-1.16.221\" public SupportedVersionRange(string range) Parameters range string The range string to parse. Methods IsSupported(PluginSemVersion) public bool IsSupported(PluginSemVersion version) Parameters version PluginSemVersion Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/OnixRuntime.Plugin.html": {
    "href": "docs/OnixRuntime.Plugin.html",
    "title": "Namespace OnixRuntime.Plugin | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Plugin Classes OnixPluginBase Base class for Onix plugins, providing access to plugin manifest, asset paths, persistent data, and lifecycle events. OnixPluginInitInfo Contains initialization information for an Onix plugin, including manifest, asset paths, persistent data, cancellation, and bound DLLs. OnixPluginSaveManager PluginManifest Represents the manifest for an Onix plugin, including metadata such as UUID, name, author, description, versions, and target assembly. PluginSettings Represents plugin settings, including whether the plugin is enabled and should load. PluginStateExtensions PublicPluginManager Wrapper allowing you to access public plugin data. RuntimeManifest Represents the runtime manifest, including runtime version information. SupportedVersionRange Represents a range of supported versions, either a single version or a range of versions. Interfaces IOnixPlugin Enums PluginState Delegates OnixPluginSaveManager.OnConfigLoadDelegate OnixPluginSaveManager.OnConfigSaveDelegate"
  },
  "docs/OnixRuntime.Runtime.OnixRuntimeConfig.html": {
    "href": "docs/OnixRuntime.Runtime.OnixRuntimeConfig.html",
    "title": "Class OnixRuntimeConfig | Onix Plugin Documentation",
    "summary": "Class OnixRuntimeConfig Namespace OnixRuntime.Runtime Assembly OnixRuntime.dll Represents the configuration for the Onix runtime, including log levels and persistence. public class OnixRuntimeConfig Inheritance object OnixRuntimeConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChatLogLevel Gets or sets the chat log level. [JsonPropertyName(\"chat_log_level\")] public Logger.Level ChatLogLevel { get; set; } Property Value Logger.Level FileLogLevel Gets or sets the file log level. [JsonPropertyName(\"file_log_level\")] public Logger.Level FileLogLevel { get; set; } Property Value Logger.Level Instance Gets the current instance of the runtime configuration, loading it if necessary. public static OnixRuntimeConfig Instance { get; } Property Value OnixRuntimeConfig Methods Load() Loads the runtime configuration from disk, or creates a new one if not found. public static void Load() Save() Saves the current runtime configuration to disk. public static void Save()"
  },
  "docs/OnixRuntime.Runtime.html": {
    "href": "docs/OnixRuntime.Runtime.html",
    "title": "Namespace OnixRuntime.Runtime | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntime.Runtime Classes OnixRuntimeConfig Represents the configuration for the Onix runtime, including log levels and persistence."
  },
  "docs/OnixRuntimeLoader.RuntimeLoaderEntryPoint.html": {
    "href": "docs/OnixRuntimeLoader.RuntimeLoaderEntryPoint.html",
    "title": "Class RuntimeLoaderEntryPoint | Onix Plugin Documentation",
    "summary": "Class RuntimeLoaderEntryPoint Namespace OnixRuntimeLoader Assembly OnixRuntimeLoader.dll public class RuntimeLoaderEntryPoint Inheritance object RuntimeLoaderEntryPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EjectRuntime(nint, int) public static int EjectRuntime(nint args, int argSize) Parameters args nint argSize int Returns int InitializeRuntimeUnmanaged(nint, int) public static int InitializeRuntimeUnmanaged(nint args, int argSize) Parameters args nint argSize int Returns int"
  },
  "docs/OnixRuntimeLoader.RuntimeManifest.html": {
    "href": "docs/OnixRuntimeLoader.RuntimeManifest.html",
    "title": "Class RuntimeManifest | Onix Plugin Documentation",
    "summary": "Class RuntimeManifest Namespace OnixRuntimeLoader Assembly OnixRuntimeLoader.dll public class RuntimeManifest Inheritance object RuntimeManifest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MinimumRuntimeVersion public int MinimumRuntimeVersion { get; } Property Value int RuntimeVersion public int RuntimeVersion { get; } Property Value int Methods LoadManifest(string) public static RuntimeManifest? LoadManifest(string json) Parameters json string Returns RuntimeManifest LoadManifestFromFile(string) public static RuntimeManifest? LoadManifestFromFile(string path) Parameters path string Returns RuntimeManifest"
  },
  "docs/OnixRuntimeLoader.html": {
    "href": "docs/OnixRuntimeLoader.html",
    "title": "Namespace OnixRuntimeLoader | Onix Plugin Documentation",
    "summary": "Namespace OnixRuntimeLoader Classes RuntimeLoaderEntryPoint RuntimeManifest"
  },
  "guide/creating-your-first-plugin.html": {
    "href": "guide/creating-your-first-plugin.html",
    "title": "| Onix Plugin Documentation",
    "summary": "\uD83D\uDE80 Creating Your First Plugin Getting started with your first plugin is simple with the easy-to-use Onix Client plugin project generator. Follow these steps to quickly set up a new project: Launch Minecraft: Bedrock Edition with Onix Client. In Minecraft's in-game chat, with Onix Client injected, use the .plugin create {name} command to start creating a new Onix Client Plugin. Follow the plugin project generator prompts to configure your plugin settings. Once you're happy with your choices, click Generate Project to create the project files. Open the generated solution in your preferred IDE (e.g., Visual Studio, Visual Studio Code, or Rider) and start coding! With the project set up, you're ready to begin developing your very own plugin! \uD83D\uDCDD Example Plugin If you have followed the steps above, you should have a basic plugin project set up. Here's a simple example of what your plugin might look like: using OnixRuntime.Api; using OnixRuntime.Plugin; namespace ExamplePlugin { public class ExamplePlugin : OnixPluginBase { public static ExamplePlugin Instance { get; private set; } = null!; public static ExamplePluginConfig Config { get; private set; } = null!; public ExamplePlugin(OnixPluginInitInfo initInfo) : base(initInfo) { Instance = this; // If you can clean up what the plugin leaves behind manually, please do not unload the plugin when disabling. base.DisablingShouldUnloadPlugin = false; #if DEBUG // base.WaitForDebuggerToBeAttached(); #endif } protected override void OnLoaded() { Console.WriteLine($\"Plugin {CurrentPluginManifest.Name} loaded!\"); Config = new ExamplePluginConfig(PluginDisplayModule); } protected override void OnEnabled() { } protected override void OnDisabled() { } protected override void OnUnloaded() { // Ensure every task or thread is stopped when this function returns. // You can give them base.PluginEjectionCancellationToken which will be cancelled when this function returns. Console.WriteLine($\"Plugin {CurrentPluginManifest.Name} unloaded!\"); } } } This example plugin simply logs a message to the console when it is loaded and unloaded. You can modify this code to add your own functionality and features. ✏️ Changing the Plugin Details If you already used the plugin generator and would like to change the name, description or other details of your plugin to something else, you can edit the manifest.json file located in the root of your plugin project. This file contains all the metadata for your plugin, including its name, description, version, author, and more. We recommend leaving the uuid field, runtime_version, and target_assembly fields as they are, as they are automatically generated and managed by the Onix Client Plugin API."
  },
  "guide/getting-started.html": {
    "href": "guide/getting-started.html",
    "title": "| Onix Plugin Documentation",
    "summary": "\uD83D\uDE80 Getting Started \uD83D\uDEE0️ Requirements To start developing plugins for Onix Client, you will need the following tools and software. Each section below includes a link to the official download page and a tutorial to help you get set up. \uD83D\uDC8E Onix Client Premium Get Onix Client Premium Required to use the Onix Client Plugin API. \uD83C\uDFAE Minecraft: Bedrock Edition The game you will be modding so you need to have it installed. \uD83D\uDFE3 .NET 8.0 SDK Download .NET 8.0 SDK Download the latest Windows x64 SDK in the Binaries section. Extract the downloaded archive, then rename it to dotnet8 and place the entire dotnet8 folder (with dotnet.exe in its root) into: %LOCALAPPDATA%\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\RoamingState\\OnixClient\\Plugins\\ Your folder structure should look like: OnixClient\\Plugins\\dotnet8\\dotnet.exe Note: dotnet.exe is just an example. You must place the entire dotnet8 folder (not just the exe) in the Plugins directory. \uD83D\uDCBB IDE (Integrated Development Environment) To develop plugins for Onix Client, you will need an IDE to write and compile your code. I would personally recommend using Visual Studio or JetBrains Rider as they are both good IDEs, but it always comes down to personal preference. If your PC struggles to run either, then feel free to use Visual Studio Code, as it's lightweight and only needs a few extensions to work well with C#. Note: Make sure to install the C# extension for Visual Studio Code if you choose to use it. \uD83C\uDFE2 Visual Studio Download Visual Studio (Tutorial here) A powerful IDE for C# development made by Microsoft. One of their last good products. \uD83E\uDD84 JetBrains Rider Download JetBrains Rider here A cross-platform C# IDE from JetBrains. Pretty good IDE, I personally use it. It has a lot of features and is very powerful. \uD83D\uDCDD Visual Studio Code Download Visual Studio Code (Tutorial here) A lightweight, cross-platform code editor. Make sure to install the C# extension. I don't personally use it, but it's a good option if you have a low-end PC. \uD83E\uDDE9 Creating Your First Plugin To get started with your first plugin, head over to the Creating Your First Plugin page. It will guide you through the process of creating a simple plugin and give you an overview of the Onix Client Plugin API."
  },
  "guide/publishing-your-first-plugin.html": {
    "href": "guide/publishing-your-first-plugin.html",
    "title": "| Onix Plugin Documentation",
    "summary": "\uD83D\uDCE6 Publishing Your First Plugin Ready to share your plugin with the world? Before you upload your plugin, you'll want to make sure your manifest is properly configured. Here's everything you need to know about preparing your plugin for publication. \uD83D\uDCCB Plugin Manifest Setup The plugin manifest (manifest.json) contains all the essential metadata for your plugin. Here's the JSON structure: { \"uuid\": \"9938f109-df76-4cce-aebd-533f39e777f8\", \"plugin_name\": \"Plugin Name\", \"plugin_author\": \"Author\", \"plugin_description\": \"My amazing plugin description that I forgot to change for some reason.\", \"plugin_version\": \"1.0.0\", \"game_version\": \"1.21.80\", \"supported_game_version_ranges\": [ \"0.0.0-9.99.9\" ], \"categories\": [], \"runtime_version\": 1, \"target_assembly\": \"PluginName.dll\" } ⚙️ Manual Configuration Required The plugin generator will handle most of the manifest setup for you, but there are a few important fields you'll need to configure manually: supported_game_version_ranges: This field determines which versions of Minecraft: Bedrock Edition your plugin will work with. If your plugin only uses the safe, official methods provided by the Onix Client Plugin API, you typically don't need to restrict the version range. However, if you're using \"unsafe\" features like: Direct memory reading or writing Raw packet manipulation Anything that doesn't use the official Onix Client Plugin API methods Then you must specify the exact game version ranges your plugin supports, as these features can break between game updates, and using them without proper version checks can lead to crashes or unexpected behavior. categories: (Optional), You can specify the appropriate categories that best describe your plugin's functionality. \uD83C\uDFF7️ Available Plugin Categories Choose from the following categories to help users discover your plugin: Utility - General utility tools and helpers Library - Code libraries for other plugins to use Client Side - Features that enhance the client experience Server Side - Server-related functionality and tools Social - Social features and community tools Make sure to select the categories that accurately represent your plugin's purpose and functionality. This helps users find plugins that match their needs. \uD83D\uDCE4 Uploading Your Plugin Once your manifest is properly configured, you can upload your plugin to the Onix Client Plugin Repository. Follow these steps: and then steps will go here at some point"
  },
  "guide/useful-resources.html": {
    "href": "guide/useful-resources.html",
    "title": "| Onix Plugin Documentation",
    "summary": "\uD83D\uDEE0️ Useful Resources The Onix Client Plugin API is quite extensive, so it may be overwhelming at first. To help you get started, here are some useful resources that you can use to learn more about the API and how to use it effectively: \uD83E\uDDD1 LocalPlayer LocalPlayer The LocalPlayer API provides access to the local player entity, which represents your own player, you. It is useful for getting information about your player, such as your position, rotation, gamertag, inventory, etc. \uD83C\uDFA8 Rendering Rendering The Rendering API provides access to the rendering system, which allows you to create and manipulate 2D or 3D graphics in the game. It is useful for creating custom user interfaces, overlays, and other visual elements. Requires the rendering events. See events below. ⚡ Events Events The Events API provides access to the event system, which allows you to listen for and respond to various events that occur in the game. It contains events such as chat events, input events, rendering events, and more. It is useful for creating custom game mechanics, responding to player actions, and other interactive elements."
  },
  "index.html": {
    "href": "index.html",
    "title": "Onix Client Plugin API | Onix Plugin Documentation",
    "summary": "Onix Client Plugin API Welcome! The Onix Client Plugin API lets you create and develop plugins for Onix Client, adding custom features and enhancing gameplay. Whether you're a beginner or an experienced developer, this guide will help you get started. \uD83D\uDCCC What is Onix Client? Onix Client is a feature-rich modification for Minecraft: Bedrock Edition, designed to improve your experience with enhanced utilities and customization options. \uD83D\uDD27 What is the Plugin API? The Onix Client Plugin API allows developers to extend the client's functionality using C# and the .NET runtime. With it, you can: Create custom plugins for Onix Client Access and modify game events Seamlessly integrate new tools into Onix Client Utilize a wide range of APIs for various functionalities Share your plugins with the community \uD83D\uDE80 Getting Started Ready to build your first plugin? Check out the Getting Started guide for setup instructions and an overview of the API’s capabilities."
  }
}